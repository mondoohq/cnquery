// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"azure": {
			// to override args, implement: initAzure(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzure,
		},
		"azure.subscription": {
			Init: initAzureSubscription,
			Create: createAzureSubscription,
		},
		"azure.subscription.resourcegroup": {
			// to override args, implement: initAzureSubscriptionResourcegroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionResourcegroup,
		},
		"azure.subscription.resource": {
			// to override args, implement: initAzureSubscriptionResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionResource,
		},
		"azure.subscription.computeService": {
			Init: initAzureSubscriptionComputeService,
			Create: createAzureSubscriptionComputeService,
		},
		"azure.subscription.computeService.vm": {
			Init: initAzureSubscriptionComputeServiceVm,
			Create: createAzureSubscriptionComputeServiceVm,
		},
		"azure.subscription.computeService.disk": {
			// to override args, implement: initAzureSubscriptionComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionComputeServiceDisk,
		},
		"azure.subscription.networkService": {
			Init: initAzureSubscriptionNetworkService,
			Create: createAzureSubscriptionNetworkService,
		},
		"azure.subscription.networkService.virtualNetworkGateway": {
			// to override args, implement: initAzureSubscriptionNetworkServiceVirtualNetworkGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceVirtualNetworkGateway,
		},
		"azure.subscription.networkService.appSecurityGroup": {
			// to override args, implement: initAzureSubscriptionNetworkServiceAppSecurityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceAppSecurityGroup,
		},
		"azure.subscription.networkService.firewall": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewall(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewall,
		},
		"azure.subscription.networkService.firewall.ipConfig": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewallIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewallIpConfig,
		},
		"azure.subscription.networkService.firewall.networkRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewallNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewallNetworkRule,
		},
		"azure.subscription.networkService.firewall.applicationRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewallApplicationRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewallApplicationRule,
		},
		"azure.subscription.networkService.firewall.natRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewallNatRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewallNatRule,
		},
		"azure.subscription.networkService.firewallPolicy": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFirewallPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFirewallPolicy,
		},
		"azure.subscription.networkService.virtualNetworkGateway.ipConfig": {
			// to override args, implement: initAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig,
		},
		"azure.subscription.networkService.virtualNetworkGateway.connection": {
			// to override args, implement: initAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection,
		},
		"azure.subscription.networkService.bgpSettings": {
			// to override args, implement: initAzureSubscriptionNetworkServiceBgpSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceBgpSettings,
		},
		"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress": {
			// to override args, implement: initAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress,
		},
		"azure.subscription.networkService.natGateway": {
			// to override args, implement: initAzureSubscriptionNetworkServiceNatGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceNatGateway,
		},
		"azure.subscription.networkService.subnet": {
			// to override args, implement: initAzureSubscriptionNetworkServiceSubnet(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceSubnet,
		},
		"azure.subscription.networkService.virtualNetwork": {
			// to override args, implement: initAzureSubscriptionNetworkServiceVirtualNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceVirtualNetwork,
		},
		"azure.subscription.networkService.virtualNetwork.dhcpOptions": {
			// to override args, implement: initAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions,
		},
		"azure.subscription.networkService.loadBalancer": {
			// to override args, implement: initAzureSubscriptionNetworkServiceLoadBalancer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceLoadBalancer,
		},
		"azure.subscription.networkService.probe": {
			// to override args, implement: initAzureSubscriptionNetworkServiceProbe(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceProbe,
		},
		"azure.subscription.networkService.backendAddressPool": {
			// to override args, implement: initAzureSubscriptionNetworkServiceBackendAddressPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceBackendAddressPool,
		},
		"azure.subscription.networkService.inboundNatPool": {
			// to override args, implement: initAzureSubscriptionNetworkServiceInboundNatPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceInboundNatPool,
		},
		"azure.subscription.networkService.inboundNatRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceInboundNatRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceInboundNatRule,
		},
		"azure.subscription.networkService.frontendIpConfig": {
			// to override args, implement: initAzureSubscriptionNetworkServiceFrontendIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceFrontendIpConfig,
		},
		"azure.subscription.networkService.loadBalancerRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceLoadBalancerRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceLoadBalancerRule,
		},
		"azure.subscription.networkService.outboundRule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceOutboundRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceOutboundRule,
		},
		"azure.subscription.networkService.interface": {
			// to override args, implement: initAzureSubscriptionNetworkServiceInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceInterface,
		},
		"azure.subscription.networkService.ipAddress": {
			// to override args, implement: initAzureSubscriptionNetworkServiceIpAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceIpAddress,
		},
		"azure.subscription.networkService.bastionHost": {
			// to override args, implement: initAzureSubscriptionNetworkServiceBastionHost(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceBastionHost,
		},
		"azure.subscription.networkService.securityGroup": {
			Init: initAzureSubscriptionNetworkServiceSecurityGroup,
			Create: createAzureSubscriptionNetworkServiceSecurityGroup,
		},
		"azure.subscription.networkService.securityrule": {
			// to override args, implement: initAzureSubscriptionNetworkServiceSecurityrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceSecurityrule,
		},
		"azure.subscription.networkService.watcher": {
			// to override args, implement: initAzureSubscriptionNetworkServiceWatcher(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceWatcher,
		},
		"azure.subscription.networkService.watcher.flowlog": {
			// to override args, implement: initAzureSubscriptionNetworkServiceWatcherFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceWatcherFlowlog,
		},
		"azure.subscription.networkService.applicationGateway": {
			// to override args, implement: initAzureSubscriptionNetworkServiceApplicationGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceApplicationGateway,
		},
		"azure.subscription.networkService.applicationFirewallPolicy": {
			// to override args, implement: initAzureSubscriptionNetworkServiceApplicationFirewallPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkServiceApplicationFirewallPolicy,
		},
		"azure.subscription.storageService": {
			Init: initAzureSubscriptionStorageService,
			Create: createAzureSubscriptionStorageService,
		},
		"azure.subscription.storageService.account": {
			Init: initAzureSubscriptionStorageServiceAccount,
			Create: createAzureSubscriptionStorageServiceAccount,
		},
		"azure.subscription.storageService.account.dataProtection": {
			// to override args, implement: initAzureSubscriptionStorageServiceAccountDataProtection(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageServiceAccountDataProtection,
		},
		"azure.subscription.storageService.account.service.properties": {
			// to override args, implement: initAzureSubscriptionStorageServiceAccountServiceProperties(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageServiceAccountServiceProperties,
		},
		"azure.subscription.storageService.account.service.properties.metrics": {
			// to override args, implement: initAzureSubscriptionStorageServiceAccountServicePropertiesMetrics(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageServiceAccountServicePropertiesMetrics,
		},
		"azure.subscription.storageService.account.service.properties.retentionPolicy": {
			// to override args, implement: initAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy,
		},
		"azure.subscription.storageService.account.service.properties.logging": {
			// to override args, implement: initAzureSubscriptionStorageServiceAccountServicePropertiesLogging(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageServiceAccountServicePropertiesLogging,
		},
		"azure.subscription.storageService.account.container": {
			Init: initAzureSubscriptionStorageServiceAccountContainer,
			Create: createAzureSubscriptionStorageServiceAccountContainer,
		},
		"azure.subscription.webService": {
			Init: initAzureSubscriptionWebService,
			Create: createAzureSubscriptionWebService,
		},
		"azure.subscription.webService.appsite": {
			// to override args, implement: initAzureSubscriptionWebServiceAppsite(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebServiceAppsite,
		},
		"azure.subscription.webService.appsiteauthsettings": {
			// to override args, implement: initAzureSubscriptionWebServiceAppsiteauthsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebServiceAppsiteauthsettings,
		},
		"azure.subscription.webService.appsiteconfig": {
			// to override args, implement: initAzureSubscriptionWebServiceAppsiteconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebServiceAppsiteconfig,
		},
		"azure.subscription.sqlService": {
			Init: initAzureSubscriptionSqlService,
			Create: createAzureSubscriptionSqlService,
		},
		"azure.subscription.sqlService.server": {
			Init: initAzureSubscriptionSqlServiceServer,
			Create: createAzureSubscriptionSqlServiceServer,
		},
		"azure.subscription.sqlService.server.vulnerabilityassessmentsettings": {
			// to override args, implement: initAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings,
		},
		"azure.subscription.sqlService.server.administrator": {
			// to override args, implement: initAzureSubscriptionSqlServiceServerAdministrator(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceServerAdministrator,
		},
		"azure.subscription.sqlService.database": {
			// to override args, implement: initAzureSubscriptionSqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceDatabase,
		},
		"azure.subscription.sqlService.databaseusage": {
			// to override args, implement: initAzureSubscriptionSqlServiceDatabaseusage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceDatabaseusage,
		},
		"azure.subscription.postgreSqlService": {
			Init: initAzureSubscriptionPostgreSqlService,
			Create: createAzureSubscriptionPostgreSqlService,
		},
		"azure.subscription.postgreSqlService.flexibleServer": {
			Init: initAzureSubscriptionPostgreSqlServiceFlexibleServer,
			Create: createAzureSubscriptionPostgreSqlServiceFlexibleServer,
		},
		"azure.subscription.postgreSqlService.server": {
			Init: initAzureSubscriptionPostgreSqlServiceServer,
			Create: createAzureSubscriptionPostgreSqlServiceServer,
		},
		"azure.subscription.postgreSqlService.database": {
			// to override args, implement: initAzureSubscriptionPostgreSqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionPostgreSqlServiceDatabase,
		},
		"azure.subscription.sqlService.configuration": {
			// to override args, implement: initAzureSubscriptionSqlServiceConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceConfiguration,
		},
		"azure.subscription.sqlService.firewallrule": {
			// to override args, implement: initAzureSubscriptionSqlServiceFirewallrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceFirewallrule,
		},
		"azure.subscription.sqlService.virtualNetworkRule": {
			// to override args, implement: initAzureSubscriptionSqlServiceVirtualNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServiceVirtualNetworkRule,
		},
		"azure.subscription.mySqlService": {
			Init: initAzureSubscriptionMySqlService,
			Create: createAzureSubscriptionMySqlService,
		},
		"azure.subscription.mySqlService.server": {
			Init: initAzureSubscriptionMySqlServiceServer,
			Create: createAzureSubscriptionMySqlServiceServer,
		},
		"azure.subscription.mySqlService.database": {
			// to override args, implement: initAzureSubscriptionMySqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMySqlServiceDatabase,
		},
		"azure.subscription.mySqlService.flexibleServer": {
			Init: initAzureSubscriptionMySqlServiceFlexibleServer,
			Create: createAzureSubscriptionMySqlServiceFlexibleServer,
		},
		"azure.subscription.mariaDbService": {
			// to override args, implement: initAzureSubscriptionMariaDbService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMariaDbService,
		},
		"azure.subscription.mariaDbService.server": {
			// to override args, implement: initAzureSubscriptionMariaDbServiceServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMariaDbServiceServer,
		},
		"azure.subscription.mariaDbService.database": {
			// to override args, implement: initAzureSubscriptionMariaDbServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMariaDbServiceDatabase,
		},
		"azure.subscription.cosmosDbService": {
			Init: initAzureSubscriptionCosmosDbService,
			Create: createAzureSubscriptionCosmosDbService,
		},
		"azure.subscription.cosmosDbService.account": {
			// to override args, implement: initAzureSubscriptionCosmosDbServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionCosmosDbServiceAccount,
		},
		"azure.subscription.keyVaultService": {
			Init: initAzureSubscriptionKeyVaultService,
			Create: createAzureSubscriptionKeyVaultService,
		},
		"azure.subscription.keyVaultService.vault": {
			Init: initAzureSubscriptionKeyVaultServiceVault,
			Create: createAzureSubscriptionKeyVaultServiceVault,
		},
		"azure.subscription.keyVaultService.key": {
			// to override args, implement: initAzureSubscriptionKeyVaultServiceKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultServiceKey,
		},
		"azure.subscription.keyVaultService.certificate": {
			// to override args, implement: initAzureSubscriptionKeyVaultServiceCertificate(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultServiceCertificate,
		},
		"azure.subscription.keyVaultService.secret": {
			// to override args, implement: initAzureSubscriptionKeyVaultServiceSecret(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultServiceSecret,
		},
		"azure.subscription.monitorService": {
			Init: initAzureSubscriptionMonitorService,
			Create: createAzureSubscriptionMonitorService,
		},
		"azure.subscription.monitorService.activityLog": {
			Init: initAzureSubscriptionMonitorServiceActivityLog,
			Create: createAzureSubscriptionMonitorServiceActivityLog,
		},
		"azure.subscription.monitorService.applicationInsight": {
			// to override args, implement: initAzureSubscriptionMonitorServiceApplicationInsight(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorServiceApplicationInsight,
		},
		"azure.subscription.monitorService.activityLog.alert": {
			// to override args, implement: initAzureSubscriptionMonitorServiceActivityLogAlert(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorServiceActivityLogAlert,
		},
		"azure.subscription.monitorService.logprofile": {
			// to override args, implement: initAzureSubscriptionMonitorServiceLogprofile(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorServiceLogprofile,
		},
		"azure.subscription.monitorService.diagnosticsetting": {
			// to override args, implement: initAzureSubscriptionMonitorServiceDiagnosticsetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorServiceDiagnosticsetting,
		},
		"azure.subscription.cloudDefenderService": {
			Init: initAzureSubscriptionCloudDefenderService,
			Create: createAzureSubscriptionCloudDefenderService,
		},
		"azure.subscription.cloudDefenderService.securityContact": {
			// to override args, implement: initAzureSubscriptionCloudDefenderServiceSecurityContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionCloudDefenderServiceSecurityContact,
		},
		"azure.subscription.authorizationService": {
			Init: initAzureSubscriptionAuthorizationService,
			Create: createAzureSubscriptionAuthorizationService,
		},
		"azure.subscription.authorizationService.roleDefinition": {
			// to override args, implement: initAzureSubscriptionAuthorizationServiceRoleDefinition(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAuthorizationServiceRoleDefinition,
		},
		"azure.subscription.authorizationService.roleDefinition.permission": {
			// to override args, implement: initAzureSubscriptionAuthorizationServiceRoleDefinitionPermission(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAuthorizationServiceRoleDefinitionPermission,
		},
		"azure.subscription.authorizationService.roleAssignment": {
			// to override args, implement: initAzureSubscriptionAuthorizationServiceRoleAssignment(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAuthorizationServiceRoleAssignment,
		},
		"azure.subscription.managedIdentity": {
			// to override args, implement: initAzureSubscriptionManagedIdentity(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionManagedIdentity,
		},
		"azure.subscription.aksService": {
			// to override args, implement: initAzureSubscriptionAksService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAksService,
		},
		"azure.subscription.aksService.cluster": {
			// to override args, implement: initAzureSubscriptionAksServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAksServiceCluster,
		},
		"azure.subscription.advisorService": {
			Init: initAzureSubscriptionAdvisorService,
			Create: createAzureSubscriptionAdvisorService,
		},
		"azure.subscription.advisorService.recommendation": {
			// to override args, implement: initAzureSubscriptionAdvisorServiceRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAdvisorServiceRecommendation,
		},
		"azure.subscription.advisorService.score": {
			// to override args, implement: initAzureSubscriptionAdvisorServiceScore(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAdvisorServiceScore,
		},
		"azure.subscription.advisorService.timeSeries": {
			// to override args, implement: initAzureSubscriptionAdvisorServiceTimeSeries(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAdvisorServiceTimeSeries,
		},
		"azure.subscription.advisorService.securityScore": {
			// to override args, implement: initAzureSubscriptionAdvisorServiceSecurityScore(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAdvisorServiceSecurityScore,
		},
		"azure.subscription.policy": {
			Init: initAzureSubscriptionPolicy,
			Create: createAzureSubscriptionPolicy,
		},
		"azure.subscription.policy.assignment": {
			// to override args, implement: initAzureSubscriptionPolicyAssignment(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionPolicyAssignment,
		},
		"azure.subscription.iotService": {
			Init: initAzureSubscriptionIotService,
			Create: createAzureSubscriptionIotService,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"azure.subscription.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.tenantId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetTenantId()).ToDataRes(types.String)
	},
	"azure.subscription.managedByTenants": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetManagedByTenants()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetState()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationSource": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetAuthorizationSource()).ToDataRes(types.String)
	},
	"azure.subscription.subscriptionsPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetSubscriptionsPolicies()).ToDataRes(types.Dict)
	},
	"azure.subscription.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetResources()).ToDataRes(types.Array(types.Resource("azure.subscription.resource")))
	},
	"azure.subscription.resourceGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetResourceGroups()).ToDataRes(types.Array(types.Resource("azure.subscription.resourcegroup")))
	},
	"azure.subscription.compute": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetCompute()).ToDataRes(types.Resource("azure.subscription.computeService"))
	},
	"azure.subscription.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetNetwork()).ToDataRes(types.Resource("azure.subscription.networkService"))
	},
	"azure.subscription.storage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetStorage()).ToDataRes(types.Resource("azure.subscription.storageService"))
	},
	"azure.subscription.web": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetWeb()).ToDataRes(types.Resource("azure.subscription.webService"))
	},
	"azure.subscription.sql": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetSql()).ToDataRes(types.Resource("azure.subscription.sqlService"))
	},
	"azure.subscription.mySql": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetMySql()).ToDataRes(types.Resource("azure.subscription.mySqlService"))
	},
	"azure.subscription.postgreSql": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetPostgreSql()).ToDataRes(types.Resource("azure.subscription.postgreSqlService"))
	},
	"azure.subscription.mariaDb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetMariaDb()).ToDataRes(types.Resource("azure.subscription.mariaDbService"))
	},
	"azure.subscription.cosmosDb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetCosmosDb()).ToDataRes(types.Resource("azure.subscription.cosmosDbService"))
	},
	"azure.subscription.keyVault": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetKeyVault()).ToDataRes(types.Resource("azure.subscription.keyVaultService"))
	},
	"azure.subscription.iam": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetIam()).ToDataRes(types.Resource("azure.subscription.authorizationService"))
	},
	"azure.subscription.authorization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetAuthorization()).ToDataRes(types.Resource("azure.subscription.authorizationService"))
	},
	"azure.subscription.monitor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetMonitor()).ToDataRes(types.Resource("azure.subscription.monitorService"))
	},
	"azure.subscription.cloudDefender": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetCloudDefender()).ToDataRes(types.Resource("azure.subscription.cloudDefenderService"))
	},
	"azure.subscription.aks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetAks()).ToDataRes(types.Resource("azure.subscription.aksService"))
	},
	"azure.subscription.advisor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetAdvisor()).ToDataRes(types.Resource("azure.subscription.advisorService"))
	},
	"azure.subscription.policy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetPolicy()).ToDataRes(types.Resource("azure.subscription.policy"))
	},
	"azure.subscription.iot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetIot()).ToDataRes(types.Resource("azure.subscription.iotService"))
	},
	"azure.subscription.resourcegroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.resourcegroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.resource.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.resource.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.resource.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.resource.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.resource.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.resource.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.resource.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.resource.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.plan": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetPlan()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.resource.createdTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetCreatedTime()).ToDataRes(types.Time)
	},
	"azure.subscription.resource.changedTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetChangedTime()).ToDataRes(types.Time)
	},
	"azure.subscription.computeService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vms": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeService).GetVms()).ToDataRes(types.Array(types.Resource("azure.subscription.computeService.vm")))
	},
	"azure.subscription.computeService.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeService).GetDisks()).ToDataRes(types.Array(types.Resource("azure.subscription.computeService.disk")))
	},
	"azure.subscription.computeService.vm.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vm.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vm.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vm.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetZones()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.computeService.vm.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetState()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vm.isRunning": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetIsRunning()).ToDataRes(types.Bool)
	},
	"azure.subscription.computeService.vm.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.computeService.vm.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.vm.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.computeService.vm.extensions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetExtensions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.computeService.vm.osDisk": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetOsDisk()).ToDataRes(types.Resource("azure.subscription.computeService.disk"))
	},
	"azure.subscription.computeService.vm.dataDisks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetDataDisks()).ToDataRes(types.Array(types.Resource("azure.subscription.computeService.disk")))
	},
	"azure.subscription.computeService.vm.publicIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceVm).GetPublicIpAddresses()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.ipAddress")))
	},
	"azure.subscription.computeService.disk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.disk.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.disk.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.disk.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.computeService.disk.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.disk.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.computeService.disk.managedByExtended": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetManagedByExtended()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.computeService.disk.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetZones()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.computeService.disk.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.computeService.disk.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeServiceDisk).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetInterfaces()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.interface")))
	},
	"azure.subscription.networkService.securityGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetSecurityGroups()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.securityGroup")))
	},
	"azure.subscription.networkService.watchers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetWatchers()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.watcher")))
	},
	"azure.subscription.networkService.publicIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetPublicIpAddresses()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.ipAddress")))
	},
	"azure.subscription.networkService.bastionHosts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetBastionHosts()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.bastionHost")))
	},
	"azure.subscription.networkService.loadBalancers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetLoadBalancers()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.loadBalancer")))
	},
	"azure.subscription.networkService.natGateways": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetNatGateways()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.natGateway")))
	},
	"azure.subscription.networkService.virtualNetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetVirtualNetworks()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetwork")))
	},
	"azure.subscription.networkService.virtualNetworkGateways": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetVirtualNetworkGateways()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetworkGateway")))
	},
	"azure.subscription.networkService.firewalls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetFirewalls()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall")))
	},
	"azure.subscription.networkService.firewallPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetFirewallPolicies()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewallPolicy")))
	},
	"azure.subscription.networkService.applicationSecurityGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetApplicationSecurityGroups()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.appSecurityGroup")))
	},
	"azure.subscription.networkService.applicationGateways": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetApplicationGateways()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.applicationGateway")))
	},
	"azure.subscription.networkService.applicationFirewallPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkService).GetApplicationFirewallPolicies()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.applicationFirewallPolicy")))
	},
	"azure.subscription.networkService.virtualNetworkGateway.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.virtualNetworkGateway.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.virtualNetworkGateway.active": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetActive()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableBgp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetEnableBgp()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableBgpRouteTranslationForNat": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetEnableBgpRouteTranslationForNat()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableDNSForwarding": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetEnableDNSForwarding()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.enablePrivateIPAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetEnablePrivateIPAddress()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.disableIPSecReplayProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetDisableIPSecReplayProtection()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetworkGateway.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.inboundDNSForwardingEndpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetInboundDNSForwardingEndpoint()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.skuName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetSkuName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.skuCapacity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetSkuCapacity()).ToDataRes(types.Int)
	},
	"azure.subscription.networkService.virtualNetworkGateway.addressPrefixes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetAddressPrefixes()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.virtualNetworkGateway.gatewayType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetGatewayType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnGatewayGeneration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetVpnGatewayGeneration()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetVpnType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfigurations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetIpConfigurations()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetworkGateway.ipConfig")))
	},
	"azure.subscription.networkService.virtualNetworkGateway.bgpSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetBgpSettings()).ToDataRes(types.Resource("azure.subscription.networkService.bgpSettings"))
	},
	"azure.subscription.networkService.virtualNetworkGateway.natRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetNatRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetworkGateway.natRule")))
	},
	"azure.subscription.networkService.virtualNetworkGateway.connections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetConnections()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetworkGateway.connection")))
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnClientConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GetVpnClientConfiguration()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.appSecurityGroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.appSecurityGroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.appSecurityGroup.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.appSecurityGroup.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.appSecurityGroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.appSecurityGroup.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.appSecurityGroup.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewall.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.firewall.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewall.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.skuName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetSkuName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.skuTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetSkuTier()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.threatIntelMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetThreatIntelMode()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.policy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetPolicy()).ToDataRes(types.Resource("azure.subscription.networkService.firewallPolicy"))
	},
	"azure.subscription.networkService.firewall.ipConfigurations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetIpConfigurations()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall.ipConfig")))
	},
	"azure.subscription.networkService.firewall.managementIpConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetManagementIpConfiguration()).ToDataRes(types.Resource("azure.subscription.networkService.firewall.ipConfig"))
	},
	"azure.subscription.networkService.firewall.networkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetNetworkRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall.networkRule")))
	},
	"azure.subscription.networkService.firewall.natRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetNatRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall.natRule")))
	},
	"azure.subscription.networkService.firewall.applicationRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewall).GetApplicationRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall.applicationRule")))
	},
	"azure.subscription.networkService.firewall.ipConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.ipConfig.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.ipConfig.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.ipConfig.privateIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetPrivateIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.ipConfig.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewall.ipConfig.publicIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetPublicIpAddress()).ToDataRes(types.Resource("azure.subscription.networkService.ipAddress"))
	},
	"azure.subscription.networkService.firewall.ipConfig.subnet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).GetSubnet()).ToDataRes(types.Resource("azure.subscription.networkService.subnet"))
	},
	"azure.subscription.networkService.firewall.networkRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.networkRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.networkRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.networkRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewall.applicationRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.applicationRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.applicationRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.applicationRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewall.natRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.natRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.natRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewall.natRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewallPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.firewallPolicy.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.firewallPolicy.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.firewallPolicy.basePolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetBasePolicy()).ToDataRes(types.Resource("azure.subscription.networkService.firewallPolicy"))
	},
	"azure.subscription.networkService.firewallPolicy.childPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetChildPolicies()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewallPolicy")))
	},
	"azure.subscription.networkService.firewallPolicy.firewalls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).GetFirewalls()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.firewall")))
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.privateIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetPrivateIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.publicIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).GetPublicIpAddress()).ToDataRes(types.Resource("azure.subscription.networkService.ipAddress"))
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.bgpSettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bgpSettings.asn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).GetAsn()).ToDataRes(types.Int)
	},
	"azure.subscription.networkService.bgpSettings.bgpPeeringAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).GetBgpPeeringAddress()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bgpSettings.peerWeight": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).GetPeerWeight()).ToDataRes(types.Int)
	},
	"azure.subscription.networkService.bgpSettings.bgpPeeringAddressesConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).GetBgpPeeringAddressesConfig()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress")))
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.customBgpIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).GetCustomBgpIpAddresses()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.ipConfigurationId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).GetIpConfigurationId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.defaultBgpIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).GetDefaultBgpIpAddresses()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.tunnelIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).GetTunnelIpAddresses()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.natGateway.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.natGateway.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.natGateway.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.natGateway.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.natGateway.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.natGateway.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.natGateway.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.natGateway.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetZones()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.natGateway.publicIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetPublicIpAddresses()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.ipAddress")))
	},
	"azure.subscription.networkService.natGateway.subnets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceNatGateway).GetSubnets()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.subnet")))
	},
	"azure.subscription.networkService.subnet.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.subnet.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.subnet.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.subnet.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.subnet.addressPrefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetAddressPrefix()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.subnet.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.subnet.natGateway": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetNatGateway()).ToDataRes(types.Resource("azure.subscription.networkService.natGateway"))
	},
	"azure.subscription.networkService.subnet.ipConfigurations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSubnet).GetIpConfigurations()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.virtualNetworkGateway.ipConfig")))
	},
	"azure.subscription.networkService.virtualNetwork.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.virtualNetwork.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.virtualNetwork.subnets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetSubnets()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.subnet")))
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetDhcpOptions()).ToDataRes(types.Resource("azure.subscription.networkService.virtualNetwork.dhcpOptions"))
	},
	"azure.subscription.networkService.virtualNetwork.enableDdosProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetEnableDdosProtection()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetwork.enableVmProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).GetEnableVmProtection()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions.dnsServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions).GetDnsServers()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.loadBalancer.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.loadBalancer.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.loadBalancer.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetSku()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancer.probes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetProbes()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.probe")))
	},
	"azure.subscription.networkService.loadBalancer.backendPools": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetBackendPools()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.backendAddressPool")))
	},
	"azure.subscription.networkService.loadBalancer.frontendIpConfigs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetFrontendIpConfigs()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.frontendIpConfig")))
	},
	"azure.subscription.networkService.loadBalancer.inboundNatPools": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetInboundNatPools()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.inboundNatPool")))
	},
	"azure.subscription.networkService.loadBalancer.inboundNatRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetInboundNatRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.inboundNatRule")))
	},
	"azure.subscription.networkService.loadBalancer.outboundRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetOutboundRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.outboundRule")))
	},
	"azure.subscription.networkService.loadBalancer.loadBalancerRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).GetLoadBalancerRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.loadBalancerRule")))
	},
	"azure.subscription.networkService.probe.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceProbe).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.probe.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceProbe).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.probe.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceProbe).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.probe.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceProbe).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.probe.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceProbe).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.backendAddressPool.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.backendAddressPool.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.backendAddressPool.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.backendAddressPool.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.backendAddressPool.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.inboundNatPool.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatPool.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatPool.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatPool.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatPool.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.inboundNatRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatRule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.inboundNatRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.frontendIpConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.frontendIpConfig.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.frontendIpConfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.frontendIpConfig.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.frontendIpConfig.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.frontendIpConfig.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).GetZones()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.networkService.loadBalancerRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancerRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancerRule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancerRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.loadBalancerRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.outboundRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.outboundRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.outboundRule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.outboundRule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.outboundRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.interface.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interface.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interface.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interface.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.interface.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interface.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.interface.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.interface.vm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceInterface).GetVm()).ToDataRes(types.Resource("azure.subscription.computeService.vm"))
	},
	"azure.subscription.networkService.ipAddress.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.ipAddress.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.ipAddress.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.ipAddress.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.ipAddress.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.ipAddress.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceIpAddress).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bastionHost.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bastionHost.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bastionHost.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bastionHost.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.bastionHost.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.bastionHost.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.bastionHost.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceBastionHost).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.securityGroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityGroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityGroup.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityGroup.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.securityGroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityGroup.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityGroup.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.securityGroup.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetInterfaces()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.interface")))
	},
	"azure.subscription.networkService.securityGroup.securityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetSecurityRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.securityrule")))
	},
	"azure.subscription.networkService.securityGroup.defaultSecurityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).GetDefaultSecurityRules()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.securityrule")))
	},
	"azure.subscription.networkService.securityrule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityrule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityrule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.securityrule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.securityrule.destinationPortRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetDestinationPortRange()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.networkService.securityrule.direction": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).GetDirection()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.watcher.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.watcher.flowLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetFlowLogs()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.watcher.flowlog")))
	},
	"azure.subscription.networkService.watcher.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcher).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.watcher.flowlog.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.networkService.watcher.flowlog.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.targetResourceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetTargetResourceId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.targetResourceGuid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetTargetResourceGuid()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetVersion()).ToDataRes(types.Int)
	},
	"azure.subscription.networkService.watcher.flowlog.format": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetFormat()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.watcher.flowlog.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetRetentionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.watcher.flowlog.analytics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).GetAnalytics()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.applicationGateway.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationGateway.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationGateway.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationGateway.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.applicationGateway.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationGateway.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationGateway.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.applicationGateway.policy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).GetPolicy()).ToDataRes(types.Resource("azure.subscription.networkService.applicationFirewallPolicy"))
	},
	"azure.subscription.networkService.applicationFirewallPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.networkService.applicationFirewallPolicy.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.networkService.applicationFirewallPolicy.gateways": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).GetGateways()).ToDataRes(types.Array(types.Resource("azure.subscription.networkService.applicationGateway")))
	},
	"azure.subscription.storageService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.accounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageService).GetAccounts()).ToDataRes(types.Array(types.Resource("azure.subscription.storageService.account")))
	},
	"azure.subscription.storageService.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.storageService.account.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.storageService.account.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.storageService.account.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.storageService.account.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetContainers()).ToDataRes(types.Array(types.Resource("azure.subscription.storageService.account.container")))
	},
	"azure.subscription.storageService.account.queueProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetQueueProperties()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties"))
	},
	"azure.subscription.storageService.account.tableProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetTableProperties()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties"))
	},
	"azure.subscription.storageService.account.blobProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetBlobProperties()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties"))
	},
	"azure.subscription.storageService.account.dataProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccount).GetDataProtection()).ToDataRes(types.Resource("azure.subscription.storageService.account.dataProtection"))
	},
	"azure.subscription.storageService.account.dataProtection.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.dataProtection.blobSoftDeletionEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).GetBlobSoftDeletionEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.dataProtection.blobRetentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).GetBlobRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storageService.account.dataProtection.containerSoftDeletionEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).GetContainerSoftDeletionEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.dataProtection.containerRetentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).GetContainerRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storageService.account.service.properties.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.hourMetrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).GetHourMetrics()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties.metrics"))
	},
	"azure.subscription.storageService.account.service.properties.minuteMetrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).GetMinuteMetrics()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties.metrics"))
	},
	"azure.subscription.storageService.account.service.properties.logging": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).GetLogging()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties.logging"))
	},
	"azure.subscription.storageService.account.service.properties.metrics.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.metrics.includeAPIs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).GetIncludeAPIs()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.metrics.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).GetRetentionPolicy()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties.retentionPolicy"))
	},
	"azure.subscription.storageService.account.service.properties.metrics.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.metrics.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.retentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).GetRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.logging.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.logging.delete": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetDelete()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.logging.read": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetRead()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.logging.write": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetWrite()).ToDataRes(types.Bool)
	},
	"azure.subscription.storageService.account.service.properties.logging.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.service.properties.logging.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).GetRetentionPolicy()).ToDataRes(types.Resource("azure.subscription.storageService.account.service.properties.retentionPolicy"))
	},
	"azure.subscription.storageService.account.container.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountContainer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.container.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountContainer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.container.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountContainer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.container.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountContainer).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.storageService.account.container.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageServiceAccountContainer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.webService.apps": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebService).GetApps()).ToDataRes(types.Array(types.Resource("azure.subscription.webService.appsite")))
	},
	"azure.subscription.webService.availableRuntimes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebService).GetAvailableRuntimes()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.webService.appsite.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsite.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsite.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsite.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsite.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsite.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.webService.appsite.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetConfiguration()).ToDataRes(types.Resource("azure.subscription.webService.appsiteconfig"))
	},
	"azure.subscription.webService.appsite.authenticationSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetAuthenticationSettings()).ToDataRes(types.Resource("azure.subscription.webService.appsiteauthsettings"))
	},
	"azure.subscription.webService.appsite.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetMetadata()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.applicationSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetApplicationSettings()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.connectionSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetConnectionSettings()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.stack": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetStack()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsite.diagnosticSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsite).GetDiagnosticSettings()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.diagnosticsetting")))
	},
	"azure.subscription.webService.appsiteauthsettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteauthsettings.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteauthsettings.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteauthsettings.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteauthsettings.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.webService.appsiteconfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteconfig.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteconfig.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteconfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.webService.appsiteconfig.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlService).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.server")))
	},
	"azure.subscription.sqlService.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.sqlService.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.database")))
	},
	"azure.subscription.sqlService.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.sqlService.server.azureAdAdministrators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetAzureAdAdministrators()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.server.administrator")))
	},
	"azure.subscription.sqlService.server.connectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetConnectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.auditingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetAuditingPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.securityAlertPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetSecurityAlertPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.encryptionProtector": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetEncryptionProtector()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.threatDetectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetThreatDetectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.server.vulnerabilityAssessmentSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetVulnerabilityAssessmentSettings()).ToDataRes(types.Resource("azure.subscription.sqlService.server.vulnerabilityassessmentsettings"))
	},
	"azure.subscription.sqlService.server.virtualNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServer).GetVirtualNetworkRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.virtualNetworkRule")))
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageContainerPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetStorageContainerPath()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageAccountAccessKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetStorageAccountAccessKey()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageContainerSasKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetStorageContainerSasKey()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.recurringScanEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetRecurringScanEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.recurringScanEmails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetRecurringScanEmails()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.mailSubscriptionAdmins": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).GetMailSubscriptionAdmins()).ToDataRes(types.Bool)
	},
	"azure.subscription.sqlService.server.administrator.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.administratorType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetAdministratorType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.login": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetLogin()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.sid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetSid()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.server.administrator.tenantId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).GetTenantId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.creationDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetCreationDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sqlService.database.databaseId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetDatabaseId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.earliestRestoreDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetEarliestRestoreDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sqlService.database.createMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetCreateMode()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.sourceDatabaseId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetSourceDatabaseId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.sourceDatabaseDeletionDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetSourceDatabaseDeletionDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sqlService.database.restorePointInTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetRestorePointInTime()).ToDataRes(types.Time)
	},
	"azure.subscription.sqlService.database.recoveryServicesRecoveryPointResourceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetRecoveryServicesRecoveryPointResourceId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.edition": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetEdition()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.maxSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetMaxSizeBytes()).ToDataRes(types.Int)
	},
	"azure.subscription.sqlService.database.requestedServiceObjectiveName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetRequestedServiceObjectiveName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.serviceLevelObjective": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetServiceLevelObjective()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetStatus()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.elasticPoolName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetElasticPoolName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.defaultSecondaryLocation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetDefaultSecondaryLocation()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.failoverGroupId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetFailoverGroupId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.readScale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetReadScale()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.sampleName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetSampleName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.database.zoneRedundant": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetZoneRedundant()).ToDataRes(types.Bool)
	},
	"azure.subscription.sqlService.database.transparentDataEncryption": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetTransparentDataEncryption()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.database.advisor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetAdvisor()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.sqlService.database.threatDetectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetThreatDetectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.database.connectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetConnectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.database.auditingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetAuditingPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.database.usage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabase).GetUsage()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.databaseusage")))
	},
	"azure.subscription.sqlService.databaseusage.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.databaseusage.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.databaseusage.resourceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetResourceName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.databaseusage.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetDisplayName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.databaseusage.currentValue": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetCurrentValue()).ToDataRes(types.Float)
	},
	"azure.subscription.sqlService.databaseusage.limit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetLimit()).ToDataRes(types.Float)
	},
	"azure.subscription.sqlService.databaseusage.unit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).GetUnit()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlService).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSqlService.server")))
	},
	"azure.subscription.postgreSqlService.flexibleServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlService).GetFlexibleServers()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSqlService.flexibleServer")))
	},
	"azure.subscription.postgreSqlService.flexibleServer.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.flexibleServer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.flexibleServer.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.flexibleServer.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.postgreSqlService.flexibleServer.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.flexibleServer.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.postgreSqlService.flexibleServer.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.configuration")))
	},
	"azure.subscription.postgreSqlService.flexibleServer.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSqlService.database")))
	},
	"azure.subscription.postgreSqlService.flexibleServer.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.postgreSqlService.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.postgreSqlService.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.postgreSqlService.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.configuration")))
	},
	"azure.subscription.postgreSqlService.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSqlService.database")))
	},
	"azure.subscription.postgreSqlService.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.postgreSqlService.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSqlService.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetValue()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.defaultValue": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetDefaultValue()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.dataType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetDataType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.allowedValues": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetAllowedValues()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.configuration.source": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceConfiguration).GetSource()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.firewallrule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceFirewallrule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.firewallrule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceFirewallrule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.firewallrule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceFirewallrule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.firewallrule.startIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceFirewallrule).GetStartIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.firewallrule.endIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceFirewallrule).GetEndIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.virtualNetworkRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.virtualNetworkRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.virtualNetworkRule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sqlService.virtualNetworkRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sqlService.virtualNetworkRule.virtualNetworkSubnetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).GetVirtualNetworkSubnetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlService).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mySqlService.server")))
	},
	"azure.subscription.mySqlService.flexibleServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlService).GetFlexibleServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mySqlService.flexibleServer")))
	},
	"azure.subscription.mySqlService.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mySqlService.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mySqlService.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.configuration")))
	},
	"azure.subscription.mySqlService.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mySqlService.database")))
	},
	"azure.subscription.mySqlService.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.mySqlService.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.flexibleServer.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.flexibleServer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.flexibleServer.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.flexibleServer.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mySqlService.flexibleServer.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySqlService.flexibleServer.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mySqlService.flexibleServer.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.configuration")))
	},
	"azure.subscription.mySqlService.flexibleServer.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mySqlService.database")))
	},
	"azure.subscription.mySqlService.flexibleServer.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.mariaDbService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbService).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mariaDbService.server")))
	},
	"azure.subscription.mariaDbService.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mariaDbService.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mariaDbService.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.configuration")))
	},
	"azure.subscription.mariaDbService.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mariaDbService.database")))
	},
	"azure.subscription.mariaDbService.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sqlService.firewallrule")))
	},
	"azure.subscription.mariaDbService.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDbService.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServiceDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.accounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbService).GetAccounts()).ToDataRes(types.Array(types.Resource("azure.subscription.cosmosDbService.account")))
	},
	"azure.subscription.cosmosDbService.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.account.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.cosmosDbService.account.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.account.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.cosmosDbService.account.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDbService.account.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbServiceAccount).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vaults": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultService).GetVaults()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.vault")))
	},
	"azure.subscription.keyVaultService.vault.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vault.vaultName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetVaultName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vault.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vault.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vault.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVaultService.vault.vaultUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetVaultUri()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.vault.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.keyVaultService.vault.rbacAuthorizationEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetRbacAuthorizationEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.vault.keys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetKeys()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.key")))
	},
	"azure.subscription.keyVaultService.vault.certificates": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetCertificates()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.certificate")))
	},
	"azure.subscription.keyVaultService.vault.secrets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetSecrets()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.secret")))
	},
	"azure.subscription.keyVaultService.vault.diagnosticSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceVault).GetDiagnosticSettings()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.diagnosticsetting")))
	},
	"azure.subscription.keyVaultService.key.kid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetKid()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.key.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVaultService.key.managed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetManaged()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.key.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.key.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.key.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.key.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.key.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.key.recoveryLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetRecoveryLevel()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.key.keyName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetKeyName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.key.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.key.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceKey).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.key")))
	},
	"azure.subscription.keyVaultService.certificate.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.certificate.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVaultService.certificate.x5t": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetX5t()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.certificate.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.certificate.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.certificate.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.certificate.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.certificate.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.certificate.recoveryLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetRecoveryLevel()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.certificate.certName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetCertName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.certificate.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.certificate.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.certificate")))
	},
	"azure.subscription.keyVaultService.secret.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.secret.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVaultService.secret.contentType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetContentType()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.secret.managed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetManaged()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.secret.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVaultService.secret.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.secret.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.secret.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.secret.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVaultService.secret.secretName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetSecretName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.secret.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVaultService.secret.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultServiceSecret).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVaultService.secret")))
	},
	"azure.subscription.monitorService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorService).GetLogProfiles()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.logprofile")))
	},
	"azure.subscription.monitorService.diagnosticSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorService).GetDiagnosticSettings()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.diagnosticsetting")))
	},
	"azure.subscription.monitorService.applicationInsights": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorService).GetApplicationInsights()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.applicationInsight")))
	},
	"azure.subscription.monitorService.activityLog": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorService).GetActivityLog()).ToDataRes(types.Resource("azure.subscription.monitorService.activityLog"))
	},
	"azure.subscription.monitorService.activityLog.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLog).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alerts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLog).GetAlerts()).ToDataRes(types.Array(types.Resource("azure.subscription.monitorService.activityLog.alert")))
	},
	"azure.subscription.monitorService.applicationInsight.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.applicationInsight.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.applicationInsight.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitorService.applicationInsight.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitorService.applicationInsight.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.applicationInsight.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.applicationInsight.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.conditions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetConditions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.monitorService.activityLog.alert.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.activityLog.alert.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitorService.activityLog.alert.actions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetActions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.monitorService.activityLog.alert.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.monitorService.logprofile.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logprofile.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logprofile.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logprofile.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logprofile.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitorService.logprofile.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitorService.logprofile.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.logprofile.storageAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceLogprofile).GetStorageAccount()).ToDataRes(types.Resource("azure.subscription.storageService.account"))
	},
	"azure.subscription.monitorService.diagnosticsetting.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.diagnosticsetting.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.diagnosticsetting.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.diagnosticsetting.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitorService.diagnosticsetting.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.monitorService.diagnosticsetting.storageAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).GetStorageAccount()).ToDataRes(types.Resource("azure.subscription.storageService.account"))
	},
	"azure.subscription.cloudDefenderService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefenderService.monitoringAgentAutoProvision": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetMonitoringAgentAutoProvision()).ToDataRes(types.Bool)
	},
	"azure.subscription.cloudDefenderService.defenderForServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForServers()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForAppServices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForAppServices()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForSqlServersOnMachines": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForSqlServersOnMachines()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForSqlDatabases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForSqlDatabases()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForOpenSourceDatabases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForOpenSourceDatabases()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForCosmosDb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForCosmosDb()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForStorageAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForStorageAccounts()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForKeyVaults": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForKeyVaults()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForResourceManager": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForResourceManager()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.defenderForContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetDefenderForContainers()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.securityContacts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderService).GetSecurityContacts()).ToDataRes(types.Array(types.Resource("azure.subscription.cloudDefenderService.securityContact")))
	},
	"azure.subscription.cloudDefenderService.securityContact.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefenderService.securityContact.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefenderService.securityContact.emails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).GetEmails()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.cloudDefenderService.securityContact.alertNotifications": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).GetAlertNotifications()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefenderService.securityContact.notificationsByRole": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).GetNotificationsByRole()).ToDataRes(types.Dict)
	},
	"azure.subscription.authorizationService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationService).GetRoles()).ToDataRes(types.Array(types.Resource("azure.subscription.authorizationService.roleDefinition")))
	},
	"azure.subscription.authorizationService.roleDefinitions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationService).GetRoleDefinitions()).ToDataRes(types.Array(types.Resource("azure.subscription.authorizationService.roleDefinition")))
	},
	"azure.subscription.authorizationService.roleAssignments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationService).GetRoleAssignments()).ToDataRes(types.Array(types.Resource("azure.subscription.authorizationService.roleAssignment")))
	},
	"azure.subscription.authorizationService.managedIdentities": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationService).GetManagedIdentities()).ToDataRes(types.Array(types.Resource("azure.subscription.managedIdentity")))
	},
	"azure.subscription.authorizationService.roleDefinition.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleDefinition.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleDefinition.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleDefinition.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleDefinition.isCustom": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetIsCustom()).ToDataRes(types.Bool)
	},
	"azure.subscription.authorizationService.roleDefinition.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorizationService.roleDefinition.permissions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).GetPermissions()).ToDataRes(types.Array(types.Resource("azure.subscription.authorizationService.roleDefinition.permission")))
	},
	"azure.subscription.authorizationService.roleDefinition.permission.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleDefinition.permission.allowedActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).GetAllowedActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorizationService.roleDefinition.permission.deniedActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).GetDeniedActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorizationService.roleDefinition.permission.allowedDataActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).GetAllowedDataActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorizationService.roleDefinition.permission.deniedDataActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).GetDeniedDataActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorizationService.roleAssignment.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.scope": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetScope()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.principalId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetPrincipalId()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.condition": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetCondition()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationService.roleAssignment.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetCreatedAt()).ToDataRes(types.Time)
	},
	"azure.subscription.authorizationService.roleAssignment.updatedAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetUpdatedAt()).ToDataRes(types.Time)
	},
	"azure.subscription.authorizationService.roleAssignment.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).GetRole()).ToDataRes(types.Resource("azure.subscription.authorizationService.roleDefinition"))
	},
	"azure.subscription.managedIdentity.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionManagedIdentity).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.managedIdentity.clientId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionManagedIdentity).GetClientId()).ToDataRes(types.String)
	},
	"azure.subscription.managedIdentity.principalId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionManagedIdentity).GetPrincipalId()).ToDataRes(types.String)
	},
	"azure.subscription.managedIdentity.tenantId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionManagedIdentity).GetTenantId()).ToDataRes(types.String)
	},
	"azure.subscription.managedIdentity.roleAssignments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionManagedIdentity).GetRoleAssignments()).ToDataRes(types.Array(types.Resource("azure.subscription.authorizationService.roleAssignment")))
	},
	"azure.subscription.aksService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.clusters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksService).GetClusters()).ToDataRes(types.Array(types.Resource("azure.subscription.aksService.cluster")))
	},
	"azure.subscription.aksService.cluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.kubernetesVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetKubernetesVersion()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.powerState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetPowerState()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.aksService.cluster.nodeResourceGroup": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetNodeResourceGroup()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetCreatedAt()).ToDataRes(types.Time)
	},
	"azure.subscription.aksService.cluster.rbacEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetRbacEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.aksService.cluster.fqdn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetFqdn()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.dnsPrefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetDnsPrefix()).ToDataRes(types.String)
	},
	"azure.subscription.aksService.cluster.storageProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetStorageProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.workloadAutoScalerProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetWorkloadAutoScalerProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.securityProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetSecurityProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.podIdentityProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetPodIdentityProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.networkProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetNetworkProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.httpProxyConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetHttpProxyConfig()).ToDataRes(types.Dict)
	},
	"azure.subscription.aksService.cluster.addonProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetAddonProfiles()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.aksService.cluster.agentPoolProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetAgentPoolProfiles()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.aksService.cluster.apiServerAccessProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksServiceCluster).GetApiServerAccessProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.advisorService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorService).GetRecommendations()).ToDataRes(types.Array(types.Resource("azure.subscription.advisorService.recommendation")))
	},
	"azure.subscription.advisorService.scores": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorService).GetScores()).ToDataRes(types.Array(types.Resource("azure.subscription.advisorService.score")))
	},
	"azure.subscription.advisorService.averageScore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorService).GetAverageScore()).ToDataRes(types.Float)
	},
	"azure.subscription.advisorService.recommendation.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.category": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetCategory()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.risk": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetRisk()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.impact": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetImpact()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.remediation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetRemediation()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.impactedResourceType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetImpactedResourceType()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.impactedResource": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetImpactedResource()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.recommendation.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.advisorService.score.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceScore).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.score.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceScore).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.score.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceScore).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.score.currentScore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceScore).GetCurrentScore()).ToDataRes(types.Resource("azure.subscription.advisorService.securityScore"))
	},
	"azure.subscription.advisorService.score.timeSeries": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceScore).GetTimeSeries()).ToDataRes(types.Array(types.Resource("azure.subscription.advisorService.timeSeries")))
	},
	"azure.subscription.advisorService.timeSeries.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.timeSeries.aggregationLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).GetAggregationLevel()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.timeSeries.scores": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).GetScores()).ToDataRes(types.Array(types.Resource("azure.subscription.advisorService.securityScore")))
	},
	"azure.subscription.advisorService.securityScore.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.advisorService.securityScore.score": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetScore()).ToDataRes(types.Float)
	},
	"azure.subscription.advisorService.securityScore.date": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetDate()).ToDataRes(types.Time)
	},
	"azure.subscription.advisorService.securityScore.potentialScoreIncrease": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetPotentialScoreIncrease()).ToDataRes(types.Float)
	},
	"azure.subscription.advisorService.securityScore.impactedResourcesCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetImpactedResourcesCount()).ToDataRes(types.Int)
	},
	"azure.subscription.advisorService.securityScore.categoryCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetCategoryCount()).ToDataRes(types.Int)
	},
	"azure.subscription.advisorService.securityScore.consumptionUnits": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).GetConsumptionUnits()).ToDataRes(types.Float)
	},
	"azure.subscription.policy.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicy).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.policy.assignments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicy).GetAssignments()).ToDataRes(types.Array(types.Resource("azure.subscription.policy.assignment")))
	},
	"azure.subscription.policy.assignment.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicyAssignment).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.policy.assignment.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicyAssignment).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.policy.assignment.scope": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicyAssignment).GetScope()).ToDataRes(types.String)
	},
	"azure.subscription.policy.assignment.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicyAssignment).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.policy.assignment.enforcementMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPolicyAssignment).GetEnforcementMode()).ToDataRes(types.String)
	},
	"azure.subscription.iotService.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionIotService).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.iotService.hubs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionIotService).GetHubs()).ToDataRes(types.Array(types.Dict))
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"azure.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzure).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscription).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.tenantId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).TenantId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedByTenants": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).ManagedByTenants, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationSource": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).AuthorizationSource, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.subscriptionsPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).SubscriptionsPolicies, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resourceGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).ResourceGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Compute, ok = plugin.RawToTValue[*mqlAzureSubscriptionComputeService](v.Value, v.Error)
		return
	},
	"azure.subscription.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Network, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkService](v.Value, v.Error)
		return
	},
	"azure.subscription.storage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Storage, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageService](v.Value, v.Error)
		return
	},
	"azure.subscription.web": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Web, ok = plugin.RawToTValue[*mqlAzureSubscriptionWebService](v.Value, v.Error)
		return
	},
	"azure.subscription.sql": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Sql, ok = plugin.RawToTValue[*mqlAzureSubscriptionSqlService](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).MySql, ok = plugin.RawToTValue[*mqlAzureSubscriptionMySqlService](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).PostgreSql, ok = plugin.RawToTValue[*mqlAzureSubscriptionPostgreSqlService](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).MariaDb, ok = plugin.RawToTValue[*mqlAzureSubscriptionMariaDbService](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).CosmosDb, ok = plugin.RawToTValue[*mqlAzureSubscriptionCosmosDbService](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).KeyVault, ok = plugin.RawToTValue[*mqlAzureSubscriptionKeyVaultService](v.Value, v.Error)
		return
	},
	"azure.subscription.iam": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Iam, ok = plugin.RawToTValue[*mqlAzureSubscriptionAuthorizationService](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Authorization, ok = plugin.RawToTValue[*mqlAzureSubscriptionAuthorizationService](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Monitor, ok = plugin.RawToTValue[*mqlAzureSubscriptionMonitorService](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).CloudDefender, ok = plugin.RawToTValue[*mqlAzureSubscriptionCloudDefenderService](v.Value, v.Error)
		return
	},
	"azure.subscription.aks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Aks, ok = plugin.RawToTValue[*mqlAzureSubscriptionAksService](v.Value, v.Error)
		return
	},
	"azure.subscription.advisor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Advisor, ok = plugin.RawToTValue[*mqlAzureSubscriptionAdvisorService](v.Value, v.Error)
		return
	},
	"azure.subscription.policy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Policy, ok = plugin.RawToTValue[*mqlAzureSubscriptionPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.iot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Iot, ok = plugin.RawToTValue[*mqlAzureSubscriptionIotService](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionResourcegroup).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.resourcegroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionResource).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.resource.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.plan": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Plan, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.createdTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).CreatedTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.changedTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ChangedTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionComputeService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.computeService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vms": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeService).Vms, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeService).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionComputeServiceVm).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.computeService.vm.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.isRunning": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).IsRunning, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.extensions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).Extensions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.osDisk": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).OsDisk, ok = plugin.RawToTValue[*mqlAzureSubscriptionComputeServiceDisk](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.dataDisks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).DataDisks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.vm.publicIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceVm).PublicIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionComputeServiceDisk).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.computeService.disk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.managedByExtended": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).ManagedByExtended, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.computeService.disk.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeServiceDisk).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).SecurityGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watchers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).Watchers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.publicIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).PublicIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHosts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).BastionHosts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).LoadBalancers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateways": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).NatGateways, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).VirtualNetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateways": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).VirtualNetworkGateways, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewalls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).Firewalls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).FirewallPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationSecurityGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).ApplicationSecurityGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateways": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).ApplicationGateways, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkService).ApplicationFirewallPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.virtualNetworkGateway.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.active": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Active, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableBgp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).EnableBgp, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableBgpRouteTranslationForNat": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).EnableBgpRouteTranslationForNat, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.enableDNSForwarding": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).EnableDNSForwarding, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.enablePrivateIPAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).EnablePrivateIPAddress, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.disableIPSecReplayProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).DisableIPSecReplayProtection, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.inboundDNSForwardingEndpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).InboundDNSForwardingEndpoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.skuName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).SkuName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.skuCapacity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).SkuCapacity, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.addressPrefixes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).AddressPrefixes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.gatewayType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).GatewayType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnGatewayGeneration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).VpnGatewayGeneration, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).VpnType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfigurations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).IpConfigurations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.bgpSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).BgpSettings, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceBgpSettings](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.natRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).NatRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).Connections, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.vpnClientConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway).VpnClientConfiguration, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.appSecurityGroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.appSecurityGroup.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceAppSecurityGroup).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewall).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewall.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.skuName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).SkuName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.skuTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).SkuTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.threatIntelMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).ThreatIntelMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.policy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).Policy, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfigurations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).IpConfigurations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.managementIpConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).ManagementIpConfiguration, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceFirewallIpConfig](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.networkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).NetworkRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.natRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).NatRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.applicationRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewall).ApplicationRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewall.ipConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.privateIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).PrivateIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.publicIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).PublicIpAddress, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceIpAddress](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.ipConfig.subnet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallIpConfig).Subnet, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceSubnet](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.networkRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewall.networkRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.networkRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.networkRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.networkRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNetworkRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.applicationRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewall.applicationRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.applicationRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.applicationRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.applicationRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallApplicationRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.natRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewall.natRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.natRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.natRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewall.natRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallNatRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.firewallPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.basePolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).BasePolicy, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.childPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).ChildPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.firewallPolicy.firewalls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy).Firewalls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.privateIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).PrivateIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.ipConfig.publicIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig).PublicIpAddress, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceIpAddress](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.virtualNetworkGateway.connection.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetworkGateway.connection.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.bgpSettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.asn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).Asn, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.bgpPeeringAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).BgpPeeringAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.peerWeight": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).PeerWeight, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.bgpPeeringAddressesConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettings).BgpPeeringAddressesConfig, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.customBgpIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).CustomBgpIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.ipConfigurationId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).IpConfigurationId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.defaultBgpIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).DefaultBgpIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress.tunnelIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress).TunnelIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceNatGateway).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.natGateway.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.publicIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).PublicIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.natGateway.subnets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceNatGateway).Subnets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceSubnet).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.subnet.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.addressPrefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).AddressPrefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.natGateway": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).NatGateway, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceNatGateway](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.subnet.ipConfigurations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSubnet).IpConfigurations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.virtualNetwork.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.subnets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).Subnets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).DhcpOptions, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.enableDdosProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).EnableDdosProtection, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.enableVmProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetwork).EnableVmProtection, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.virtualNetwork.dhcpOptions.dnsServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions).DnsServers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.loadBalancer.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Sku, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.probes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).Probes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.backendPools": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).BackendPools, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.frontendIpConfigs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).FrontendIpConfigs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.inboundNatPools": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).InboundNatPools, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.inboundNatRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).InboundNatRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.outboundRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).OutboundRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancer.loadBalancerRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancer).LoadBalancerRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.probe.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceProbe).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.probe.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceProbe).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.probe.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceProbe).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.probe.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceProbe).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.probe.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceProbe).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.probe.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceProbe).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.backendAddressPool.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.backendAddressPool.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.backendAddressPool.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.backendAddressPool.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.backendAddressPool.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.backendAddressPool.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBackendAddressPool).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatPool.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.inboundNatPool.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatPool.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatPool.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatPool.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatPool.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatPool).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.inboundNatRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatRule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.inboundNatRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInboundNatRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.frontendIpConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.frontendIpConfig.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceFrontendIpConfig).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancerRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.loadBalancerRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancerRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancerRule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancerRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.loadBalancerRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceLoadBalancerRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.outboundRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.outboundRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.outboundRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.outboundRule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.outboundRule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.outboundRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceOutboundRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceInterface).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.interface.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.interface.vm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceInterface).Vm, ok = plugin.RawToTValue[*mqlAzureSubscriptionComputeServiceVm](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceIpAddress).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.ipAddress.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.ipAddress.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceIpAddress).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceBastionHost).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.bastionHost.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.bastionHost.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceBastionHost).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.securityGroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.securityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).SecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityGroup.defaultSecurityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityGroup).DefaultSecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.securityrule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.destinationPortRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).DestinationPortRange, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.securityrule.direction": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceSecurityrule).Direction, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceWatcher).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.watcher.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).FlowLogs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcher).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.watcher.flowlog.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.targetResourceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).TargetResourceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.targetResourceGuid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).TargetResourceGuid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Version, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.format": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Format, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).RetentionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.watcher.flowlog.analytics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceWatcherFlowlog).Analytics, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.applicationGateway.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationGateway.policy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationGateway).Policy, ok = plugin.RawToTValue[*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.networkService.applicationFirewallPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.networkService.applicationFirewallPolicy.gateways": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy).Gateways, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.accounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageService).Accounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccount).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.queueProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).QueueProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.tableProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).TableProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.blobProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).BlobProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccount).DataProtection, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountDataProtection](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.dataProtection.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection.blobSoftDeletionEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).BlobSoftDeletionEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection.blobRetentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).BlobRetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection.containerSoftDeletionEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).ContainerSoftDeletionEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.dataProtection.containerRetentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountDataProtection).ContainerRetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.service.properties.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.hourMetrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).HourMetrics, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.minuteMetrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).MinuteMetrics, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties).Logging, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.metrics.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.service.properties.metrics.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.metrics.includeAPIs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).IncludeAPIs, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.metrics.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).RetentionPolicy, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.metrics.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.metrics.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.retentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).RetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.retentionPolicy.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.service.properties.logging.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.delete": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).Delete, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.read": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).Read, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.write": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).Write, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.service.properties.logging.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging).RetentionPolicy, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.container.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageServiceAccountContainer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storageService.account.container.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountContainer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.container.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.container.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountContainer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.container.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountContainer).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storageService.account.container.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageServiceAccountContainer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.webService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.apps": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebService).Apps, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.availableRuntimes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebService).AvailableRuntimes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebServiceAppsite).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.webService.appsite.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Configuration, ok = plugin.RawToTValue[*mqlAzureSubscriptionWebServiceAppsiteconfig](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.authenticationSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).AuthenticationSettings, ok = plugin.RawToTValue[*mqlAzureSubscriptionWebServiceAppsiteauthsettings](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Metadata, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.applicationSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).ApplicationSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.connectionSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).ConnectionSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.stack": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).Stack, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsite.diagnosticSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsite).DiagnosticSettings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteauthsettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.webService.appsiteauthsettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteauthsettings.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteauthsettings.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteauthsettings.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteauthsettings.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteconfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.webService.appsiteconfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteconfig.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteconfig.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteconfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.webService.appsiteconfig.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebServiceAppsiteconfig).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlService).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.azureAdAdministrators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).AzureAdAdministrators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.connectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).ConnectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.auditingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).AuditingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.securityAlertPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).SecurityAlertPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.encryptionProtector": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).EncryptionProtector, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.threatDetectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).ThreatDetectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityAssessmentSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).VulnerabilityAssessmentSettings, ok = plugin.RawToTValue[*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.virtualNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServer).VirtualNetworkRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageContainerPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).StorageContainerPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageAccountAccessKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).StorageAccountAccessKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.storageContainerSasKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).StorageContainerSasKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.recurringScanEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).RecurringScanEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.recurringScanEmails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).RecurringScanEmails, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.vulnerabilityassessmentsettings.mailSubscriptionAdmins": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings).MailSubscriptionAdmins, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.server.administrator.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.administratorType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).AdministratorType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.login": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).Login, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.sid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).Sid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.server.administrator.tenantId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceServerAdministrator).TenantId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.creationDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).CreationDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.databaseId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).DatabaseId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.earliestRestoreDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).EarliestRestoreDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.createMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).CreateMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.sourceDatabaseId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).SourceDatabaseId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.sourceDatabaseDeletionDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).SourceDatabaseDeletionDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.restorePointInTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).RestorePointInTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.recoveryServicesRecoveryPointResourceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).RecoveryServicesRecoveryPointResourceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.edition": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Edition, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.maxSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).MaxSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.requestedServiceObjectiveName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).RequestedServiceObjectiveName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.serviceLevelObjective": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ServiceLevelObjective, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.elasticPoolName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ElasticPoolName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.defaultSecondaryLocation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).DefaultSecondaryLocation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.failoverGroupId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).FailoverGroupId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.readScale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ReadScale, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.sampleName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).SampleName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.zoneRedundant": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ZoneRedundant, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.transparentDataEncryption": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).TransparentDataEncryption, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.advisor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Advisor, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.threatDetectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ThreatDetectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.connectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).ConnectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.auditingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).AuditingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.database.usage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabase).Usage, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.databaseusage.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.resourceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).ResourceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.currentValue": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).CurrentValue, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.limit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).Limit, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.databaseusage.unit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceDatabaseusage).Unit, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSqlService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlService).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlService).FlexibleServers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSqlService.flexibleServer.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.flexibleServer.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceFlexibleServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlServiceServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSqlService.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSqlService.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSqlService.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServiceDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceConfiguration).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.configuration.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.defaultValue": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).DefaultValue, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.dataType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).DataType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.allowedValues": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).AllowedValues, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.configuration.source": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceConfiguration).Source, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.firewallrule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceFirewallrule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.firewallrule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceFirewallrule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.firewallrule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceFirewallrule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.firewallrule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceFirewallrule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.firewallrule.startIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceFirewallrule).StartIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.firewallrule.endIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceFirewallrule).EndIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.virtualNetworkRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sqlService.virtualNetworkRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.virtualNetworkRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.virtualNetworkRule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.virtualNetworkRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sqlService.virtualNetworkRule.virtualNetworkSubnetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServiceVirtualNetworkRule).VirtualNetworkSubnetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySqlService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlService).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlService).FlexibleServers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlServiceServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySqlService.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlServiceDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySqlService.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySqlService.flexibleServer.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySqlService.flexibleServer.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServiceFlexibleServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDbService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDbService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbService).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDbServiceServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDbService.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDbServiceDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDbService.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDbService.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServiceDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCosmosDbService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cosmosDbService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.accounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbService).Accounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCosmosDbServiceAccount).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cosmosDbService.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDbService.account.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbServiceAccount).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVaultService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vaults": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultService).Vaults, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultServiceVault).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVaultService.vault.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.vaultName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).VaultName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.vaultUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).VaultUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.rbacAuthorizationEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).RbacAuthorizationEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.keys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Keys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.certificates": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Certificates, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.secrets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).Secrets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.vault.diagnosticSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceVault).DiagnosticSettings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultServiceKey).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVaultService.key.kid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Kid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.managed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Managed, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.recoveryLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).RecoveryLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.keyName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).KeyName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.key.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceKey).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVaultService.certificate.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.x5t": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).X5t, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.recoveryLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).RecoveryLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.certName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).CertName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.certificate.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceCertificate).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultServiceSecret).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVaultService.secret.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.contentType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).ContentType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.managed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Managed, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.secretName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).SecretName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVaultService.secret.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultServiceSecret).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorService).LogProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorService).DiagnosticSettings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsights": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorService).ApplicationInsights, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorService).ActivityLog, ok = plugin.RawToTValue[*mqlAzureSubscriptionMonitorServiceActivityLog](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorServiceActivityLog).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.activityLog.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLog).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alerts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLog).Alerts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.applicationInsight.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.applicationInsight.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceApplicationInsight).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.activityLog.alert.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.conditions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Conditions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.actions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Actions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.activityLog.alert.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceActivityLogAlert).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorServiceLogprofile).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.logprofile.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.logprofile.storageAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceLogprofile).StorageAccount, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccount](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitorService.diagnosticsetting.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitorService.diagnosticsetting.storageAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorServiceDiagnosticsetting).StorageAccount, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageServiceAccount](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCloudDefenderService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cloudDefenderService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.monitoringAgentAutoProvision": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).MonitoringAgentAutoProvision, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForServers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForAppServices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForAppServices, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForSqlServersOnMachines": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForSqlServersOnMachines, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForSqlDatabases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForSqlDatabases, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForOpenSourceDatabases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForOpenSourceDatabases, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForCosmosDb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForCosmosDb, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForStorageAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForStorageAccounts, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForKeyVaults": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForKeyVaults, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForResourceManager": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForResourceManager, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.defenderForContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).DefenderForContainers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContacts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderService).SecurityContacts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContact.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cloudDefenderService.securityContact.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContact.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContact.emails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).Emails, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContact.alertNotifications": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).AlertNotifications, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefenderService.securityContact.notificationsByRole": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderServiceSecurityContact).NotificationsByRole, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorizationService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationService).Roles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinitions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationService).RoleDefinitions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationService).RoleAssignments, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.managedIdentities": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationService).ManagedIdentities, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorizationService.roleDefinition.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.isCustom": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).IsCustom, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permissions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition).Permissions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permission.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorizationService.roleDefinition.permission.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permission.allowedActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).AllowedActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permission.deniedActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).DeniedActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permission.allowedDataActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).AllowedDataActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleDefinition.permission.deniedDataActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission).DeniedDataActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorizationService.roleAssignment.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.scope": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Scope, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.principalId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).PrincipalId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.condition": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Condition, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.updatedAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).UpdatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationService.roleAssignment.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationServiceRoleAssignment).Role, ok = plugin.RawToTValue[*mqlAzureSubscriptionAuthorizationServiceRoleDefinition](v.Value, v.Error)
		return
	},
	"azure.subscription.managedIdentity.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionManagedIdentity).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.managedIdentity.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionManagedIdentity).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedIdentity.clientId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionManagedIdentity).ClientId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedIdentity.principalId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionManagedIdentity).PrincipalId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedIdentity.tenantId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionManagedIdentity).TenantId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedIdentity.roleAssignments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionManagedIdentity).RoleAssignments, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAksService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.aksService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.clusters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksService).Clusters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAksServiceCluster).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.aksService.cluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.kubernetesVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).KubernetesVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.powerState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).PowerState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.nodeResourceGroup": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).NodeResourceGroup, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.rbacEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).RbacEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.fqdn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).Fqdn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.dnsPrefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).DnsPrefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.storageProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).StorageProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.workloadAutoScalerProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).WorkloadAutoScalerProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.securityProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).SecurityProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.podIdentityProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).PodIdentityProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.networkProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).NetworkProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.httpProxyConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).HttpProxyConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.addonProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).AddonProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.agentPoolProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).AgentPoolProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aksService.cluster.apiServerAccessProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksServiceCluster).ApiServerAccessProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAdvisorService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.advisorService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorService).Recommendations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.scores": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorService).Scores, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.averageScore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorService).AverageScore, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.advisorService.recommendation.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.category": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Category, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.risk": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Risk, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.impact": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Impact, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.remediation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Remediation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.impactedResourceType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).ImpactedResourceType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.impactedResource": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).ImpactedResource, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.recommendation.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceRecommendation).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.score.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAdvisorServiceScore).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.advisorService.score.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceScore).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.score.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceScore).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.score.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceScore).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.score.currentScore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceScore).CurrentScore, ok = plugin.RawToTValue[*mqlAzureSubscriptionAdvisorServiceSecurityScore](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.score.timeSeries": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceScore).TimeSeries, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.timeSeries.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.advisorService.timeSeries.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.timeSeries.aggregationLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).AggregationLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.timeSeries.scores": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceTimeSeries).Scores, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.advisorService.securityScore.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.score": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).Score, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.date": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).Date, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.potentialScoreIncrease": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).PotentialScoreIncrease, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.impactedResourcesCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).ImpactedResourcesCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.categoryCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).CategoryCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.advisorService.securityScore.consumptionUnits": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAdvisorServiceSecurityScore).ConsumptionUnits, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPolicy).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.policy.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicy).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicy).Assignments, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignment.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPolicyAssignment).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.policy.assignment.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicyAssignment).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignment.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicyAssignment).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignment.scope": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicyAssignment).Scope, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignment.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicyAssignment).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.policy.assignment.enforcementMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPolicyAssignment).EnforcementMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.iotService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionIotService).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.iotService.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionIotService).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.iotService.hubs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionIotService).Hubs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[azure] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[azure] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlAzure for the azure resource
type mqlAzure struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlAzureInternal
}

// createAzure creates a new instance of this resource
func createAzure(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzure{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzure) MqlName() string {
	return "azure"
}

func (c *mqlAzure) MqlID() string {
	return c.__id
}

// mqlAzureSubscription for the azure.subscription resource
type mqlAzureSubscription struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	SubscriptionId plugin.TValue[string]
	TenantId plugin.TValue[string]
	ManagedByTenants plugin.TValue[[]interface{}]
	Tags plugin.TValue[map[string]interface{}]
	State plugin.TValue[string]
	AuthorizationSource plugin.TValue[string]
	SubscriptionsPolicies plugin.TValue[interface{}]
	Resources plugin.TValue[[]interface{}]
	ResourceGroups plugin.TValue[[]interface{}]
	Compute plugin.TValue[*mqlAzureSubscriptionComputeService]
	Network plugin.TValue[*mqlAzureSubscriptionNetworkService]
	Storage plugin.TValue[*mqlAzureSubscriptionStorageService]
	Web plugin.TValue[*mqlAzureSubscriptionWebService]
	Sql plugin.TValue[*mqlAzureSubscriptionSqlService]
	MySql plugin.TValue[*mqlAzureSubscriptionMySqlService]
	PostgreSql plugin.TValue[*mqlAzureSubscriptionPostgreSqlService]
	MariaDb plugin.TValue[*mqlAzureSubscriptionMariaDbService]
	CosmosDb plugin.TValue[*mqlAzureSubscriptionCosmosDbService]
	KeyVault plugin.TValue[*mqlAzureSubscriptionKeyVaultService]
	Iam plugin.TValue[*mqlAzureSubscriptionAuthorizationService]
	Authorization plugin.TValue[*mqlAzureSubscriptionAuthorizationService]
	Monitor plugin.TValue[*mqlAzureSubscriptionMonitorService]
	CloudDefender plugin.TValue[*mqlAzureSubscriptionCloudDefenderService]
	Aks plugin.TValue[*mqlAzureSubscriptionAksService]
	Advisor plugin.TValue[*mqlAzureSubscriptionAdvisorService]
	Policy plugin.TValue[*mqlAzureSubscriptionPolicy]
	Iot plugin.TValue[*mqlAzureSubscriptionIotService]
}

// createAzureSubscription creates a new instance of this resource
func createAzureSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscription{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscription) MqlName() string {
	return "azure.subscription"
}

func (c *mqlAzureSubscription) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscription) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscription) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscription) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscription) GetTenantId() *plugin.TValue[string] {
	return &c.TenantId
}

func (c *mqlAzureSubscription) GetManagedByTenants() *plugin.TValue[[]interface{}] {
	return &c.ManagedByTenants
}

func (c *mqlAzureSubscription) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscription) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlAzureSubscription) GetAuthorizationSource() *plugin.TValue[string] {
	return &c.AuthorizationSource
}

func (c *mqlAzureSubscription) GetSubscriptionsPolicies() *plugin.TValue[interface{}] {
	return &c.SubscriptionsPolicies
}

func (c *mqlAzureSubscription) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "resources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resources()
	})
}

func (c *mqlAzureSubscription) GetResourceGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ResourceGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "resourceGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resourceGroups()
	})
}

func (c *mqlAzureSubscription) GetCompute() *plugin.TValue[*mqlAzureSubscriptionComputeService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionComputeService](&c.Compute, func() (*mqlAzureSubscriptionComputeService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "compute")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionComputeService), nil
			}
		}

		return c.compute()
	})
}

func (c *mqlAzureSubscription) GetNetwork() *plugin.TValue[*mqlAzureSubscriptionNetworkService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkService](&c.Network, func() (*mqlAzureSubscriptionNetworkService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkService), nil
			}
		}

		return c.network()
	})
}

func (c *mqlAzureSubscription) GetStorage() *plugin.TValue[*mqlAzureSubscriptionStorageService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageService](&c.Storage, func() (*mqlAzureSubscriptionStorageService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "storage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageService), nil
			}
		}

		return c.storage()
	})
}

func (c *mqlAzureSubscription) GetWeb() *plugin.TValue[*mqlAzureSubscriptionWebService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionWebService](&c.Web, func() (*mqlAzureSubscriptionWebService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "web")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionWebService), nil
			}
		}

		return c.web()
	})
}

func (c *mqlAzureSubscription) GetSql() *plugin.TValue[*mqlAzureSubscriptionSqlService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionSqlService](&c.Sql, func() (*mqlAzureSubscriptionSqlService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "sql")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionSqlService), nil
			}
		}

		return c.sql()
	})
}

func (c *mqlAzureSubscription) GetMySql() *plugin.TValue[*mqlAzureSubscriptionMySqlService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionMySqlService](&c.MySql, func() (*mqlAzureSubscriptionMySqlService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "mySql")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionMySqlService), nil
			}
		}

		return c.mySql()
	})
}

func (c *mqlAzureSubscription) GetPostgreSql() *plugin.TValue[*mqlAzureSubscriptionPostgreSqlService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionPostgreSqlService](&c.PostgreSql, func() (*mqlAzureSubscriptionPostgreSqlService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "postgreSql")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionPostgreSqlService), nil
			}
		}

		return c.postgreSql()
	})
}

func (c *mqlAzureSubscription) GetMariaDb() *plugin.TValue[*mqlAzureSubscriptionMariaDbService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionMariaDbService](&c.MariaDb, func() (*mqlAzureSubscriptionMariaDbService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "mariaDb")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionMariaDbService), nil
			}
		}

		return c.mariaDb()
	})
}

func (c *mqlAzureSubscription) GetCosmosDb() *plugin.TValue[*mqlAzureSubscriptionCosmosDbService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionCosmosDbService](&c.CosmosDb, func() (*mqlAzureSubscriptionCosmosDbService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "cosmosDb")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionCosmosDbService), nil
			}
		}

		return c.cosmosDb()
	})
}

func (c *mqlAzureSubscription) GetKeyVault() *plugin.TValue[*mqlAzureSubscriptionKeyVaultService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionKeyVaultService](&c.KeyVault, func() (*mqlAzureSubscriptionKeyVaultService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "keyVault")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionKeyVaultService), nil
			}
		}

		return c.keyVault()
	})
}

func (c *mqlAzureSubscription) GetIam() *plugin.TValue[*mqlAzureSubscriptionAuthorizationService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionAuthorizationService](&c.Iam, func() (*mqlAzureSubscriptionAuthorizationService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "iam")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionAuthorizationService), nil
			}
		}

		return c.iam()
	})
}

func (c *mqlAzureSubscription) GetAuthorization() *plugin.TValue[*mqlAzureSubscriptionAuthorizationService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionAuthorizationService](&c.Authorization, func() (*mqlAzureSubscriptionAuthorizationService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "authorization")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionAuthorizationService), nil
			}
		}

		return c.authorization()
	})
}

func (c *mqlAzureSubscription) GetMonitor() *plugin.TValue[*mqlAzureSubscriptionMonitorService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionMonitorService](&c.Monitor, func() (*mqlAzureSubscriptionMonitorService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "monitor")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionMonitorService), nil
			}
		}

		return c.monitor()
	})
}

func (c *mqlAzureSubscription) GetCloudDefender() *plugin.TValue[*mqlAzureSubscriptionCloudDefenderService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionCloudDefenderService](&c.CloudDefender, func() (*mqlAzureSubscriptionCloudDefenderService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "cloudDefender")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionCloudDefenderService), nil
			}
		}

		return c.cloudDefender()
	})
}

func (c *mqlAzureSubscription) GetAks() *plugin.TValue[*mqlAzureSubscriptionAksService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionAksService](&c.Aks, func() (*mqlAzureSubscriptionAksService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "aks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionAksService), nil
			}
		}

		return c.aks()
	})
}

func (c *mqlAzureSubscription) GetAdvisor() *plugin.TValue[*mqlAzureSubscriptionAdvisorService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionAdvisorService](&c.Advisor, func() (*mqlAzureSubscriptionAdvisorService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "advisor")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionAdvisorService), nil
			}
		}

		return c.advisor()
	})
}

func (c *mqlAzureSubscription) GetPolicy() *plugin.TValue[*mqlAzureSubscriptionPolicy] {
	return &c.Policy
}

func (c *mqlAzureSubscription) GetIot() *plugin.TValue[*mqlAzureSubscriptionIotService] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionIotService](&c.Iot, func() (*mqlAzureSubscriptionIotService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "iot")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionIotService), nil
			}
		}

		return c.iot()
	})
}

// mqlAzureSubscriptionResourcegroup for the azure.subscription.resourcegroup resource
type mqlAzureSubscriptionResourcegroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionResourcegroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
}

// createAzureSubscriptionResourcegroup creates a new instance of this resource
func createAzureSubscriptionResourcegroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionResourcegroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.resourcegroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionResourcegroup) MqlName() string {
	return "azure.subscription.resourcegroup"
}

func (c *mqlAzureSubscriptionResourcegroup) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionResourcegroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionResourcegroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionResourcegroup) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionResourcegroup) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionResourcegroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionResourcegroup) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionResourcegroup) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

// mqlAzureSubscriptionResource for the azure.subscription.resource resource
type mqlAzureSubscriptionResource struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionResourceInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	Sku plugin.TValue[interface{}]
	Plan plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	ProvisioningState plugin.TValue[string]
	CreatedTime plugin.TValue[*time.Time]
	ChangedTime plugin.TValue[*time.Time]
}

// createAzureSubscriptionResource creates a new instance of this resource
func createAzureSubscriptionResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionResource{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.resource", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionResource) MqlName() string {
	return "azure.subscription.resource"
}

func (c *mqlAzureSubscriptionResource) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionResource) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionResource) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionResource) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionResource) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionResource) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionResource) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionResource) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionResource) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionResource) GetPlan() *plugin.TValue[interface{}] {
	return &c.Plan
}

func (c *mqlAzureSubscriptionResource) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionResource) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionResource) GetCreatedTime() *plugin.TValue[*time.Time] {
	return &c.CreatedTime
}

func (c *mqlAzureSubscriptionResource) GetChangedTime() *plugin.TValue[*time.Time] {
	return &c.ChangedTime
}

// mqlAzureSubscriptionComputeService for the azure.subscription.computeService resource
type mqlAzureSubscriptionComputeService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Vms plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
}

// createAzureSubscriptionComputeService creates a new instance of this resource
func createAzureSubscriptionComputeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionComputeService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.computeService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionComputeService) MqlName() string {
	return "azure.subscription.computeService"
}

func (c *mqlAzureSubscriptionComputeService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionComputeService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionComputeService) GetVms() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vms, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.computeService", c.__id, "vms")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vms()
	})
}

func (c *mqlAzureSubscriptionComputeService) GetDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Disks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.computeService", c.__id, "disks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.disks()
	})
}

// mqlAzureSubscriptionComputeServiceVm for the azure.subscription.computeService.vm resource
type mqlAzureSubscriptionComputeServiceVm struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeServiceVmInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Zones plugin.TValue[[]interface{}]
	State plugin.TValue[string]
	IsRunning plugin.TValue[bool]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Extensions plugin.TValue[[]interface{}]
	OsDisk plugin.TValue[*mqlAzureSubscriptionComputeServiceDisk]
	DataDisks plugin.TValue[[]interface{}]
	PublicIpAddresses plugin.TValue[[]interface{}]
}

// createAzureSubscriptionComputeServiceVm creates a new instance of this resource
func createAzureSubscriptionComputeServiceVm(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionComputeServiceVm{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.computeService.vm", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionComputeServiceVm) MqlName() string {
	return "azure.subscription.computeService.vm"
}

func (c *mqlAzureSubscriptionComputeServiceVm) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetZones() *plugin.TValue[[]interface{}] {
	return &c.Zones
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetState() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.State, func() (string, error) {
		return c.state()
	})
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetIsRunning() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.IsRunning, func() (bool, error) {
		return c.isRunning()
	})
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetExtensions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Extensions, func() ([]interface{}, error) {
		return c.extensions()
	})
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetOsDisk() *plugin.TValue[*mqlAzureSubscriptionComputeServiceDisk] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionComputeServiceDisk](&c.OsDisk, func() (*mqlAzureSubscriptionComputeServiceDisk, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.computeService.vm", c.__id, "osDisk")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionComputeServiceDisk), nil
			}
		}

		return c.osDisk()
	})
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetDataDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DataDisks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.computeService.vm", c.__id, "dataDisks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.dataDisks()
	})
}

func (c *mqlAzureSubscriptionComputeServiceVm) GetPublicIpAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PublicIpAddresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.computeService.vm", c.__id, "publicIpAddresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.publicIpAddresses()
	})
}

// mqlAzureSubscriptionComputeServiceDisk for the azure.subscription.computeService.disk resource
type mqlAzureSubscriptionComputeServiceDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeServiceDiskInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	ManagedByExtended plugin.TValue[[]interface{}]
	Zones plugin.TValue[[]interface{}]
	Sku plugin.TValue[interface{}]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionComputeServiceDisk creates a new instance of this resource
func createAzureSubscriptionComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionComputeServiceDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.computeService.disk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionComputeServiceDisk) MqlName() string {
	return "azure.subscription.computeService.disk"
}

func (c *mqlAzureSubscriptionComputeServiceDisk) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetManagedByExtended() *plugin.TValue[[]interface{}] {
	return &c.ManagedByExtended
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetZones() *plugin.TValue[[]interface{}] {
	return &c.Zones
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionComputeServiceDisk) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkService for the azure.subscription.networkService resource
type mqlAzureSubscriptionNetworkService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Interfaces plugin.TValue[[]interface{}]
	SecurityGroups plugin.TValue[[]interface{}]
	Watchers plugin.TValue[[]interface{}]
	PublicIpAddresses plugin.TValue[[]interface{}]
	BastionHosts plugin.TValue[[]interface{}]
	LoadBalancers plugin.TValue[[]interface{}]
	NatGateways plugin.TValue[[]interface{}]
	VirtualNetworks plugin.TValue[[]interface{}]
	VirtualNetworkGateways plugin.TValue[[]interface{}]
	Firewalls plugin.TValue[[]interface{}]
	FirewallPolicies plugin.TValue[[]interface{}]
	ApplicationSecurityGroups plugin.TValue[[]interface{}]
	ApplicationGateways plugin.TValue[[]interface{}]
	ApplicationFirewallPolicies plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkService creates a new instance of this resource
func createAzureSubscriptionNetworkService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkService) MqlName() string {
	return "azure.subscription.networkService"
}

func (c *mqlAzureSubscriptionNetworkService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionNetworkService) GetInterfaces() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Interfaces, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "interfaces")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.interfaces()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetSecurityGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "securityGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityGroups()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetWatchers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Watchers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "watchers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.watchers()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetPublicIpAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PublicIpAddresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "publicIpAddresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.publicIpAddresses()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetBastionHosts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BastionHosts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "bastionHosts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.bastionHosts()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetLoadBalancers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.LoadBalancers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "loadBalancers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.loadBalancers()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetNatGateways() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.NatGateways, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "natGateways")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.natGateways()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetVirtualNetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VirtualNetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "virtualNetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.virtualNetworks()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetVirtualNetworkGateways() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VirtualNetworkGateways, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "virtualNetworkGateways")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.virtualNetworkGateways()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetFirewalls() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Firewalls, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "firewalls")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewalls()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetFirewallPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "firewallPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallPolicies()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetApplicationSecurityGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationSecurityGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "applicationSecurityGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationSecurityGroups()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetApplicationGateways() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationGateways, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "applicationGateways")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationGateways()
	})
}

func (c *mqlAzureSubscriptionNetworkService) GetApplicationFirewallPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationFirewallPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService", c.__id, "applicationFirewallPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationFirewallPolicies()
	})
}

// mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway for the azure.subscription.networkService.virtualNetworkGateway resource
type mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Active plugin.TValue[bool]
	EnableBgp plugin.TValue[bool]
	EnableBgpRouteTranslationForNat plugin.TValue[bool]
	EnableDNSForwarding plugin.TValue[bool]
	EnablePrivateIPAddress plugin.TValue[bool]
	DisableIPSecReplayProtection plugin.TValue[bool]
	ProvisioningState plugin.TValue[string]
	InboundDNSForwardingEndpoint plugin.TValue[string]
	SkuName plugin.TValue[string]
	SkuCapacity plugin.TValue[int64]
	AddressPrefixes plugin.TValue[[]interface{}]
	GatewayType plugin.TValue[string]
	VpnGatewayGeneration plugin.TValue[string]
	VpnType plugin.TValue[string]
	IpConfigurations plugin.TValue[[]interface{}]
	BgpSettings plugin.TValue[*mqlAzureSubscriptionNetworkServiceBgpSettings]
	NatRules plugin.TValue[[]interface{}]
	Connections plugin.TValue[[]interface{}]
	VpnClientConfiguration plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceVirtualNetworkGateway creates a new instance of this resource
func createAzureSubscriptionNetworkServiceVirtualNetworkGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.virtualNetworkGateway", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) MqlName() string {
	return "azure.subscription.networkService.virtualNetworkGateway"
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetActive() *plugin.TValue[bool] {
	return &c.Active
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetEnableBgp() *plugin.TValue[bool] {
	return &c.EnableBgp
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetEnableBgpRouteTranslationForNat() *plugin.TValue[bool] {
	return &c.EnableBgpRouteTranslationForNat
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetEnableDNSForwarding() *plugin.TValue[bool] {
	return &c.EnableDNSForwarding
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetEnablePrivateIPAddress() *plugin.TValue[bool] {
	return &c.EnablePrivateIPAddress
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetDisableIPSecReplayProtection() *plugin.TValue[bool] {
	return &c.DisableIPSecReplayProtection
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetInboundDNSForwardingEndpoint() *plugin.TValue[string] {
	return &c.InboundDNSForwardingEndpoint
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetSkuName() *plugin.TValue[string] {
	return &c.SkuName
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetSkuCapacity() *plugin.TValue[int64] {
	return &c.SkuCapacity
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetAddressPrefixes() *plugin.TValue[[]interface{}] {
	return &c.AddressPrefixes
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetGatewayType() *plugin.TValue[string] {
	return &c.GatewayType
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetVpnGatewayGeneration() *plugin.TValue[string] {
	return &c.VpnGatewayGeneration
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetVpnType() *plugin.TValue[string] {
	return &c.VpnType
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetIpConfigurations() *plugin.TValue[[]interface{}] {
	return &c.IpConfigurations
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetBgpSettings() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceBgpSettings] {
	return &c.BgpSettings
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetNatRules() *plugin.TValue[[]interface{}] {
	return &c.NatRules
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetConnections() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Connections, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.virtualNetworkGateway", c.__id, "connections")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.connections()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGateway) GetVpnClientConfiguration() *plugin.TValue[interface{}] {
	return &c.VpnClientConfiguration
}

// mqlAzureSubscriptionNetworkServiceAppSecurityGroup for the azure.subscription.networkService.appSecurityGroup resource
type mqlAzureSubscriptionNetworkServiceAppSecurityGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceAppSecurityGroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceAppSecurityGroup creates a new instance of this resource
func createAzureSubscriptionNetworkServiceAppSecurityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceAppSecurityGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.appSecurityGroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) MqlName() string {
	return "azure.subscription.networkService.appSecurityGroup"
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceAppSecurityGroup) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceFirewall for the azure.subscription.networkService.firewall resource
type mqlAzureSubscriptionNetworkServiceFirewall struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	ProvisioningState plugin.TValue[string]
	SkuName plugin.TValue[string]
	SkuTier plugin.TValue[string]
	ThreatIntelMode plugin.TValue[string]
	Policy plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy]
	IpConfigurations plugin.TValue[[]interface{}]
	ManagementIpConfiguration plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallIpConfig]
	NetworkRules plugin.TValue[[]interface{}]
	NatRules plugin.TValue[[]interface{}]
	ApplicationRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceFirewall creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewall(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewall{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewall", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) MqlName() string {
	return "azure.subscription.networkService.firewall"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetSkuName() *plugin.TValue[string] {
	return &c.SkuName
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetSkuTier() *plugin.TValue[string] {
	return &c.SkuTier
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetThreatIntelMode() *plugin.TValue[string] {
	return &c.ThreatIntelMode
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetPolicy() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceFirewallPolicy](&c.Policy, func() (*mqlAzureSubscriptionNetworkServiceFirewallPolicy, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewall", c.__id, "policy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy), nil
			}
		}

		return c.policy()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetIpConfigurations() *plugin.TValue[[]interface{}] {
	return &c.IpConfigurations
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetManagementIpConfiguration() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallIpConfig] {
	return &c.ManagementIpConfiguration
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetNetworkRules() *plugin.TValue[[]interface{}] {
	return &c.NetworkRules
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetNatRules() *plugin.TValue[[]interface{}] {
	return &c.NatRules
}

func (c *mqlAzureSubscriptionNetworkServiceFirewall) GetApplicationRules() *plugin.TValue[[]interface{}] {
	return &c.ApplicationRules
}

// mqlAzureSubscriptionNetworkServiceFirewallIpConfig for the azure.subscription.networkService.firewall.ipConfig resource
type mqlAzureSubscriptionNetworkServiceFirewallIpConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallIpConfigInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	PrivateIpAddress plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	PublicIpAddress plugin.TValue[*mqlAzureSubscriptionNetworkServiceIpAddress]
	Subnet plugin.TValue[*mqlAzureSubscriptionNetworkServiceSubnet]
}

// createAzureSubscriptionNetworkServiceFirewallIpConfig creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewallIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewallIpConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewall.ipConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) MqlName() string {
	return "azure.subscription.networkService.firewall.ipConfig"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetPrivateIpAddress() *plugin.TValue[string] {
	return &c.PrivateIpAddress
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetPublicIpAddress() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceIpAddress] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceIpAddress](&c.PublicIpAddress, func() (*mqlAzureSubscriptionNetworkServiceIpAddress, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewall.ipConfig", c.__id, "publicIpAddress")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceIpAddress), nil
			}
		}

		return c.publicIpAddress()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallIpConfig) GetSubnet() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceSubnet] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceSubnet](&c.Subnet, func() (*mqlAzureSubscriptionNetworkServiceSubnet, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewall.ipConfig", c.__id, "subnet")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceSubnet), nil
			}
		}

		return c.subnet()
	})
}

// mqlAzureSubscriptionNetworkServiceFirewallNetworkRule for the azure.subscription.networkService.firewall.networkRule resource
type mqlAzureSubscriptionNetworkServiceFirewallNetworkRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallNetworkRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceFirewallNetworkRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewallNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewallNetworkRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewall.networkRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) MqlName() string {
	return "azure.subscription.networkService.firewall.networkRule"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNetworkRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceFirewallApplicationRule for the azure.subscription.networkService.firewall.applicationRule resource
type mqlAzureSubscriptionNetworkServiceFirewallApplicationRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallApplicationRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceFirewallApplicationRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewallApplicationRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewallApplicationRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewall.applicationRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) MqlName() string {
	return "azure.subscription.networkService.firewall.applicationRule"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallApplicationRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceFirewallNatRule for the azure.subscription.networkService.firewall.natRule resource
type mqlAzureSubscriptionNetworkServiceFirewallNatRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallNatRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceFirewallNatRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewallNatRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewallNatRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewall.natRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) MqlName() string {
	return "azure.subscription.networkService.firewall.natRule"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallNatRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceFirewallPolicy for the azure.subscription.networkService.firewallPolicy resource
type mqlAzureSubscriptionNetworkServiceFirewallPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFirewallPolicyInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	ProvisioningState plugin.TValue[string]
	BasePolicy plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy]
	ChildPolicies plugin.TValue[[]interface{}]
	Firewalls plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceFirewallPolicy creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFirewallPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFirewallPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.firewallPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) MqlName() string {
	return "azure.subscription.networkService.firewallPolicy"
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetBasePolicy() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceFirewallPolicy] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceFirewallPolicy](&c.BasePolicy, func() (*mqlAzureSubscriptionNetworkServiceFirewallPolicy, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewallPolicy", c.__id, "basePolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceFirewallPolicy), nil
			}
		}

		return c.basePolicy()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetChildPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ChildPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewallPolicy", c.__id, "childPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.childPolicies()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceFirewallPolicy) GetFirewalls() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Firewalls, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.firewallPolicy", c.__id, "firewalls")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewalls()
	})
}

// mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig for the azure.subscription.networkService.virtualNetworkGateway.ipConfig resource
type mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfigInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	PrivateIpAddress plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	PublicIpAddress plugin.TValue[*mqlAzureSubscriptionNetworkServiceIpAddress]
}

// createAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig creates a new instance of this resource
func createAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.virtualNetworkGateway.ipConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) MqlName() string {
	return "azure.subscription.networkService.virtualNetworkGateway.ipConfig"
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetPrivateIpAddress() *plugin.TValue[string] {
	return &c.PrivateIpAddress
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayIpConfig) GetPublicIpAddress() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceIpAddress] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceIpAddress](&c.PublicIpAddress, func() (*mqlAzureSubscriptionNetworkServiceIpAddress, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.virtualNetworkGateway.ipConfig", c.__id, "publicIpAddress")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceIpAddress), nil
			}
		}

		return c.publicIpAddress()
	})
}

// mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection for the azure.subscription.networkService.virtualNetworkGateway.connection resource
type mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnectionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection creates a new instance of this resource
func createAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.virtualNetworkGateway.connection", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) MqlName() string {
	return "azure.subscription.networkService.virtualNetworkGateway.connection"
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkGatewayConnection) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceBgpSettings for the azure.subscription.networkService.bgpSettings resource
type mqlAzureSubscriptionNetworkServiceBgpSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceBgpSettingsInternal it will be used here
	Id plugin.TValue[string]
	Asn plugin.TValue[int64]
	BgpPeeringAddress plugin.TValue[string]
	PeerWeight plugin.TValue[int64]
	BgpPeeringAddressesConfig plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceBgpSettings creates a new instance of this resource
func createAzureSubscriptionNetworkServiceBgpSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceBgpSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.bgpSettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) MqlName() string {
	return "azure.subscription.networkService.bgpSettings"
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) GetAsn() *plugin.TValue[int64] {
	return &c.Asn
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) GetBgpPeeringAddress() *plugin.TValue[string] {
	return &c.BgpPeeringAddress
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) GetPeerWeight() *plugin.TValue[int64] {
	return &c.PeerWeight
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettings) GetBgpPeeringAddressesConfig() *plugin.TValue[[]interface{}] {
	return &c.BgpPeeringAddressesConfig
}

// mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress for the azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress resource
type mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddressInternal it will be used here
	Id plugin.TValue[string]
	CustomBgpIpAddresses plugin.TValue[[]interface{}]
	IpConfigurationId plugin.TValue[string]
	DefaultBgpIpAddresses plugin.TValue[[]interface{}]
	TunnelIpAddresses plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress creates a new instance of this resource
func createAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) MqlName() string {
	return "azure.subscription.networkService.bgpSettings.ipConfigurationBgpPeeringAddress"
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) GetCustomBgpIpAddresses() *plugin.TValue[[]interface{}] {
	return &c.CustomBgpIpAddresses
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) GetIpConfigurationId() *plugin.TValue[string] {
	return &c.IpConfigurationId
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) GetDefaultBgpIpAddresses() *plugin.TValue[[]interface{}] {
	return &c.DefaultBgpIpAddresses
}

func (c *mqlAzureSubscriptionNetworkServiceBgpSettingsIpConfigurationBgpPeeringAddress) GetTunnelIpAddresses() *plugin.TValue[[]interface{}] {
	return &c.TunnelIpAddresses
}

// mqlAzureSubscriptionNetworkServiceNatGateway for the azure.subscription.networkService.natGateway resource
type mqlAzureSubscriptionNetworkServiceNatGateway struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceNatGatewayInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Zones plugin.TValue[[]interface{}]
	PublicIpAddresses plugin.TValue[[]interface{}]
	Subnets plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceNatGateway creates a new instance of this resource
func createAzureSubscriptionNetworkServiceNatGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceNatGateway{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.natGateway", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) MqlName() string {
	return "azure.subscription.networkService.natGateway"
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetZones() *plugin.TValue[[]interface{}] {
	return &c.Zones
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetPublicIpAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PublicIpAddresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.natGateway", c.__id, "publicIpAddresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.publicIpAddresses()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceNatGateway) GetSubnets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subnets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.natGateway", c.__id, "subnets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subnets()
	})
}

// mqlAzureSubscriptionNetworkServiceSubnet for the azure.subscription.networkService.subnet resource
type mqlAzureSubscriptionNetworkServiceSubnet struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceSubnetInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	AddressPrefix plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	NatGateway plugin.TValue[*mqlAzureSubscriptionNetworkServiceNatGateway]
	IpConfigurations plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceSubnet creates a new instance of this resource
func createAzureSubscriptionNetworkServiceSubnet(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceSubnet{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.subnet", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) MqlName() string {
	return "azure.subscription.networkService.subnet"
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetAddressPrefix() *plugin.TValue[string] {
	return &c.AddressPrefix
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetNatGateway() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceNatGateway] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceNatGateway](&c.NatGateway, func() (*mqlAzureSubscriptionNetworkServiceNatGateway, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.subnet", c.__id, "natGateway")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceNatGateway), nil
			}
		}

		return c.natGateway()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceSubnet) GetIpConfigurations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IpConfigurations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.subnet", c.__id, "ipConfigurations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.ipConfigurations()
	})
}

// mqlAzureSubscriptionNetworkServiceVirtualNetwork for the azure.subscription.networkService.virtualNetwork resource
type mqlAzureSubscriptionNetworkServiceVirtualNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceVirtualNetworkInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Subnets plugin.TValue[[]interface{}]
	DhcpOptions plugin.TValue[*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions]
	EnableDdosProtection plugin.TValue[bool]
	EnableVmProtection plugin.TValue[bool]
}

// createAzureSubscriptionNetworkServiceVirtualNetwork creates a new instance of this resource
func createAzureSubscriptionNetworkServiceVirtualNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceVirtualNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.virtualNetwork", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) MqlName() string {
	return "azure.subscription.networkService.virtualNetwork"
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetSubnets() *plugin.TValue[[]interface{}] {
	return &c.Subnets
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetDhcpOptions() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions] {
	return &c.DhcpOptions
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetEnableDdosProtection() *plugin.TValue[bool] {
	return &c.EnableDdosProtection
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetwork) GetEnableVmProtection() *plugin.TValue[bool] {
	return &c.EnableVmProtection
}

// mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions for the azure.subscription.networkService.virtualNetwork.dhcpOptions resource
type mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptionsInternal it will be used here
	Id plugin.TValue[string]
	DnsServers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions creates a new instance of this resource
func createAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.virtualNetwork.dhcpOptions", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions) MqlName() string {
	return "azure.subscription.networkService.virtualNetwork.dhcpOptions"
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceVirtualNetworkDhcpOptions) GetDnsServers() *plugin.TValue[[]interface{}] {
	return &c.DnsServers
}

// mqlAzureSubscriptionNetworkServiceLoadBalancer for the azure.subscription.networkService.loadBalancer resource
type mqlAzureSubscriptionNetworkServiceLoadBalancer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceLoadBalancerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Etag plugin.TValue[string]
	Sku plugin.TValue[string]
	Probes plugin.TValue[[]interface{}]
	BackendPools plugin.TValue[[]interface{}]
	FrontendIpConfigs plugin.TValue[[]interface{}]
	InboundNatPools plugin.TValue[[]interface{}]
	InboundNatRules plugin.TValue[[]interface{}]
	OutboundRules plugin.TValue[[]interface{}]
	LoadBalancerRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceLoadBalancer creates a new instance of this resource
func createAzureSubscriptionNetworkServiceLoadBalancer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceLoadBalancer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.loadBalancer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) MqlName() string {
	return "azure.subscription.networkService.loadBalancer"
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetSku() *plugin.TValue[string] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetProbes() *plugin.TValue[[]interface{}] {
	return &c.Probes
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetBackendPools() *plugin.TValue[[]interface{}] {
	return &c.BackendPools
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetFrontendIpConfigs() *plugin.TValue[[]interface{}] {
	return &c.FrontendIpConfigs
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetInboundNatPools() *plugin.TValue[[]interface{}] {
	return &c.InboundNatPools
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetInboundNatRules() *plugin.TValue[[]interface{}] {
	return &c.InboundNatRules
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetOutboundRules() *plugin.TValue[[]interface{}] {
	return &c.OutboundRules
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancer) GetLoadBalancerRules() *plugin.TValue[[]interface{}] {
	return &c.LoadBalancerRules
}

// mqlAzureSubscriptionNetworkServiceProbe for the azure.subscription.networkService.probe resource
type mqlAzureSubscriptionNetworkServiceProbe struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceProbeInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceProbe creates a new instance of this resource
func createAzureSubscriptionNetworkServiceProbe(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceProbe{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.probe", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) MqlName() string {
	return "azure.subscription.networkService.probe"
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceProbe) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceBackendAddressPool for the azure.subscription.networkService.backendAddressPool resource
type mqlAzureSubscriptionNetworkServiceBackendAddressPool struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceBackendAddressPoolInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceBackendAddressPool creates a new instance of this resource
func createAzureSubscriptionNetworkServiceBackendAddressPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceBackendAddressPool{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.backendAddressPool", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) MqlName() string {
	return "azure.subscription.networkService.backendAddressPool"
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceBackendAddressPool) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceInboundNatPool for the azure.subscription.networkService.inboundNatPool resource
type mqlAzureSubscriptionNetworkServiceInboundNatPool struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceInboundNatPoolInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceInboundNatPool creates a new instance of this resource
func createAzureSubscriptionNetworkServiceInboundNatPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceInboundNatPool{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.inboundNatPool", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) MqlName() string {
	return "azure.subscription.networkService.inboundNatPool"
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatPool) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceInboundNatRule for the azure.subscription.networkService.inboundNatRule resource
type mqlAzureSubscriptionNetworkServiceInboundNatRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceInboundNatRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceInboundNatRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceInboundNatRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceInboundNatRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.inboundNatRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) MqlName() string {
	return "azure.subscription.networkService.inboundNatRule"
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceInboundNatRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceFrontendIpConfig for the azure.subscription.networkService.frontendIpConfig resource
type mqlAzureSubscriptionNetworkServiceFrontendIpConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceFrontendIpConfigInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Zones plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceFrontendIpConfig creates a new instance of this resource
func createAzureSubscriptionNetworkServiceFrontendIpConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceFrontendIpConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.frontendIpConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) MqlName() string {
	return "azure.subscription.networkService.frontendIpConfig"
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceFrontendIpConfig) GetZones() *plugin.TValue[[]interface{}] {
	return &c.Zones
}

// mqlAzureSubscriptionNetworkServiceLoadBalancerRule for the azure.subscription.networkService.loadBalancerRule resource
type mqlAzureSubscriptionNetworkServiceLoadBalancerRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceLoadBalancerRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceLoadBalancerRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceLoadBalancerRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceLoadBalancerRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.loadBalancerRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) MqlName() string {
	return "azure.subscription.networkService.loadBalancerRule"
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceLoadBalancerRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceOutboundRule for the azure.subscription.networkService.outboundRule resource
type mqlAzureSubscriptionNetworkServiceOutboundRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceOutboundRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceOutboundRule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceOutboundRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceOutboundRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.outboundRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) MqlName() string {
	return "azure.subscription.networkService.outboundRule"
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceOutboundRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetworkServiceInterface for the azure.subscription.networkService.interface resource
type mqlAzureSubscriptionNetworkServiceInterface struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceInterfaceInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Vm plugin.TValue[*mqlAzureSubscriptionComputeServiceVm]
}

// createAzureSubscriptionNetworkServiceInterface creates a new instance of this resource
func createAzureSubscriptionNetworkServiceInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceInterface{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.interface", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) MqlName() string {
	return "azure.subscription.networkService.interface"
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceInterface) GetVm() *plugin.TValue[*mqlAzureSubscriptionComputeServiceVm] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionComputeServiceVm](&c.Vm, func() (*mqlAzureSubscriptionComputeServiceVm, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.interface", c.__id, "vm")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionComputeServiceVm), nil
			}
		}

		return c.vm()
	})
}

// mqlAzureSubscriptionNetworkServiceIpAddress for the azure.subscription.networkService.ipAddress resource
type mqlAzureSubscriptionNetworkServiceIpAddress struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceIpAddressInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	IpAddress plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAzureSubscriptionNetworkServiceIpAddress creates a new instance of this resource
func createAzureSubscriptionNetworkServiceIpAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceIpAddress{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.ipAddress", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) MqlName() string {
	return "azure.subscription.networkService.ipAddress"
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlAzureSubscriptionNetworkServiceIpAddress) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlAzureSubscriptionNetworkServiceBastionHost for the azure.subscription.networkService.bastionHost resource
type mqlAzureSubscriptionNetworkServiceBastionHost struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceBastionHostInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Sku plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceBastionHost creates a new instance of this resource
func createAzureSubscriptionNetworkServiceBastionHost(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceBastionHost{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.bastionHost", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) MqlName() string {
	return "azure.subscription.networkService.bastionHost"
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceBastionHost) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

// mqlAzureSubscriptionNetworkServiceSecurityGroup for the azure.subscription.networkService.securityGroup resource
type mqlAzureSubscriptionNetworkServiceSecurityGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceSecurityGroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Interfaces plugin.TValue[[]interface{}]
	SecurityRules plugin.TValue[[]interface{}]
	DefaultSecurityRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceSecurityGroup creates a new instance of this resource
func createAzureSubscriptionNetworkServiceSecurityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceSecurityGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.securityGroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) MqlName() string {
	return "azure.subscription.networkService.securityGroup"
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetInterfaces() *plugin.TValue[[]interface{}] {
	return &c.Interfaces
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.SecurityRules
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityGroup) GetDefaultSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.DefaultSecurityRules
}

// mqlAzureSubscriptionNetworkServiceSecurityrule for the azure.subscription.networkService.securityrule resource
type mqlAzureSubscriptionNetworkServiceSecurityrule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceSecurityruleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	DestinationPortRange plugin.TValue[[]interface{}]
	Direction plugin.TValue[string]
}

// createAzureSubscriptionNetworkServiceSecurityrule creates a new instance of this resource
func createAzureSubscriptionNetworkServiceSecurityrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceSecurityrule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.securityrule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) MqlName() string {
	return "azure.subscription.networkService.securityrule"
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetDestinationPortRange() *plugin.TValue[[]interface{}] {
	return &c.DestinationPortRange
}

func (c *mqlAzureSubscriptionNetworkServiceSecurityrule) GetDirection() *plugin.TValue[string] {
	return &c.Direction
}

// mqlAzureSubscriptionNetworkServiceWatcher for the azure.subscription.networkService.watcher resource
type mqlAzureSubscriptionNetworkServiceWatcher struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceWatcherInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	FlowLogs plugin.TValue[[]interface{}]
	ProvisioningState plugin.TValue[string]
}

// createAzureSubscriptionNetworkServiceWatcher creates a new instance of this resource
func createAzureSubscriptionNetworkServiceWatcher(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceWatcher{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.watcher", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) MqlName() string {
	return "azure.subscription.networkService.watcher"
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetFlowLogs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlowLogs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.watcher", c.__id, "flowLogs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flowLogs()
	})
}

func (c *mqlAzureSubscriptionNetworkServiceWatcher) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

// mqlAzureSubscriptionNetworkServiceWatcherFlowlog for the azure.subscription.networkService.watcher.flowlog resource
type mqlAzureSubscriptionNetworkServiceWatcherFlowlog struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceWatcherFlowlogInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
	Enabled plugin.TValue[bool]
	StorageAccountId plugin.TValue[string]
	TargetResourceId plugin.TValue[string]
	TargetResourceGuid plugin.TValue[string]
	Version plugin.TValue[int64]
	Format plugin.TValue[string]
	RetentionPolicy plugin.TValue[interface{}]
	Analytics plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkServiceWatcherFlowlog creates a new instance of this resource
func createAzureSubscriptionNetworkServiceWatcherFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceWatcherFlowlog{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.watcher.flowlog", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) MqlName() string {
	return "azure.subscription.networkService.watcher.flowlog"
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetTargetResourceId() *plugin.TValue[string] {
	return &c.TargetResourceId
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetTargetResourceGuid() *plugin.TValue[string] {
	return &c.TargetResourceGuid
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetVersion() *plugin.TValue[int64] {
	return &c.Version
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetFormat() *plugin.TValue[string] {
	return &c.Format
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetRetentionPolicy() *plugin.TValue[interface{}] {
	return &c.RetentionPolicy
}

func (c *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) GetAnalytics() *plugin.TValue[interface{}] {
	return &c.Analytics
}

// mqlAzureSubscriptionNetworkServiceApplicationGateway for the azure.subscription.networkService.applicationGateway resource
type mqlAzureSubscriptionNetworkServiceApplicationGateway struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceApplicationGatewayInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Policy plugin.TValue[*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy]
}

// createAzureSubscriptionNetworkServiceApplicationGateway creates a new instance of this resource
func createAzureSubscriptionNetworkServiceApplicationGateway(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceApplicationGateway{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.applicationGateway", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) MqlName() string {
	return "azure.subscription.networkService.applicationGateway"
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationGateway) GetPolicy() *plugin.TValue[*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy](&c.Policy, func() (*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.applicationGateway", c.__id, "policy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy), nil
			}
		}

		return c.policy()
	})
}

// mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy for the azure.subscription.networkService.applicationFirewallPolicy resource
type mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicyInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Gateways plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkServiceApplicationFirewallPolicy creates a new instance of this resource
func createAzureSubscriptionNetworkServiceApplicationFirewallPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.networkService.applicationFirewallPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) MqlName() string {
	return "azure.subscription.networkService.applicationFirewallPolicy"
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkServiceApplicationFirewallPolicy) GetGateways() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Gateways, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.networkService.applicationFirewallPolicy", c.__id, "gateways")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.gateways()
	})
}

// mqlAzureSubscriptionStorageService for the azure.subscription.storageService resource
type mqlAzureSubscriptionStorageService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Accounts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionStorageService creates a new instance of this resource
func createAzureSubscriptionStorageService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageService) MqlName() string {
	return "azure.subscription.storageService"
}

func (c *mqlAzureSubscriptionStorageService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionStorageService) GetAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Accounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService", c.__id, "accounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accounts()
	})
}

// mqlAzureSubscriptionStorageServiceAccount for the azure.subscription.storageService.account resource
type mqlAzureSubscriptionStorageServiceAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	Sku plugin.TValue[interface{}]
	Kind plugin.TValue[string]
	Containers plugin.TValue[[]interface{}]
	QueueProperties plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties]
	TableProperties plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties]
	BlobProperties plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties]
	DataProtection plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountDataProtection]
}

// createAzureSubscriptionStorageServiceAccount creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccount) MqlName() string {
	return "azure.subscription.storageService.account"
}

func (c *mqlAzureSubscriptionStorageServiceAccount) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService.account", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetQueueProperties() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](&c.QueueProperties, func() (*mqlAzureSubscriptionStorageServiceAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService.account", c.__id, "queueProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties), nil
			}
		}

		return c.queueProperties()
	})
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetTableProperties() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](&c.TableProperties, func() (*mqlAzureSubscriptionStorageServiceAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService.account", c.__id, "tableProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties), nil
			}
		}

		return c.tableProperties()
	})
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetBlobProperties() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccountServiceProperties](&c.BlobProperties, func() (*mqlAzureSubscriptionStorageServiceAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService.account", c.__id, "blobProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccountServiceProperties), nil
			}
		}

		return c.blobProperties()
	})
}

func (c *mqlAzureSubscriptionStorageServiceAccount) GetDataProtection() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountDataProtection] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccountDataProtection](&c.DataProtection, func() (*mqlAzureSubscriptionStorageServiceAccountDataProtection, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storageService.account", c.__id, "dataProtection")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccountDataProtection), nil
			}
		}

		return c.dataProtection()
	})
}

// mqlAzureSubscriptionStorageServiceAccountDataProtection for the azure.subscription.storageService.account.dataProtection resource
type mqlAzureSubscriptionStorageServiceAccountDataProtection struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountDataProtectionInternal it will be used here
	StorageAccountId plugin.TValue[string]
	BlobSoftDeletionEnabled plugin.TValue[bool]
	BlobRetentionDays plugin.TValue[int64]
	ContainerSoftDeletionEnabled plugin.TValue[bool]
	ContainerRetentionDays plugin.TValue[int64]
}

// createAzureSubscriptionStorageServiceAccountDataProtection creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountDataProtection(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountDataProtection{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.dataProtection", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) MqlName() string {
	return "azure.subscription.storageService.account.dataProtection"
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) GetBlobSoftDeletionEnabled() *plugin.TValue[bool] {
	return &c.BlobSoftDeletionEnabled
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) GetBlobRetentionDays() *plugin.TValue[int64] {
	return &c.BlobRetentionDays
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) GetContainerSoftDeletionEnabled() *plugin.TValue[bool] {
	return &c.ContainerSoftDeletionEnabled
}

func (c *mqlAzureSubscriptionStorageServiceAccountDataProtection) GetContainerRetentionDays() *plugin.TValue[int64] {
	return &c.ContainerRetentionDays
}

// mqlAzureSubscriptionStorageServiceAccountServiceProperties for the azure.subscription.storageService.account.service.properties resource
type mqlAzureSubscriptionStorageServiceAccountServiceProperties struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountServicePropertiesInternal it will be used here
	Id plugin.TValue[string]
	HourMetrics plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics]
	MinuteMetrics plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics]
	Logging plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging]
}

// createAzureSubscriptionStorageServiceAccountServiceProperties creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountServiceProperties(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountServiceProperties{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.service.properties", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) MqlName() string {
	return "azure.subscription.storageService.account.service.properties"
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) GetHourMetrics() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics] {
	return &c.HourMetrics
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) GetMinuteMetrics() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics] {
	return &c.MinuteMetrics
}

func (c *mqlAzureSubscriptionStorageServiceAccountServiceProperties) GetLogging() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging] {
	return &c.Logging
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics for the azure.subscription.storageService.account.service.properties.metrics resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetricsInternal it will be used here
	Id plugin.TValue[string]
	IncludeAPIs plugin.TValue[bool]
	RetentionPolicy plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy]
	Enabled plugin.TValue[bool]
	Version plugin.TValue[string]
}

// createAzureSubscriptionStorageServiceAccountServicePropertiesMetrics creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountServicePropertiesMetrics(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.service.properties.metrics", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) MqlName() string {
	return "azure.subscription.storageService.account.service.properties.metrics"
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) GetIncludeAPIs() *plugin.TValue[bool] {
	return &c.IncludeAPIs
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) GetRetentionPolicy() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy] {
	return &c.RetentionPolicy
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy for the azure.subscription.storageService.account.service.properties.retentionPolicy resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicyInternal it will be used here
	Id plugin.TValue[string]
	RetentionDays plugin.TValue[int64]
	Enabled plugin.TValue[bool]
}

// createAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.service.properties.retentionPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) MqlName() string {
	return "azure.subscription.storageService.account.service.properties.retentionPolicy"
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) GetRetentionDays() *plugin.TValue[int64] {
	return &c.RetentionDays
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging for the azure.subscription.storageService.account.service.properties.logging resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountServicePropertiesLoggingInternal it will be used here
	Id plugin.TValue[string]
	Delete plugin.TValue[bool]
	Read plugin.TValue[bool]
	Write plugin.TValue[bool]
	Version plugin.TValue[string]
	RetentionPolicy plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy]
}

// createAzureSubscriptionStorageServiceAccountServicePropertiesLogging creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountServicePropertiesLogging(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.service.properties.logging", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) MqlName() string {
	return "azure.subscription.storageService.account.service.properties.logging"
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetDelete() *plugin.TValue[bool] {
	return &c.Delete
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetRead() *plugin.TValue[bool] {
	return &c.Read
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetWrite() *plugin.TValue[bool] {
	return &c.Write
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) GetRetentionPolicy() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy] {
	return &c.RetentionPolicy
}

// mqlAzureSubscriptionStorageServiceAccountContainer for the azure.subscription.storageService.account.container resource
type mqlAzureSubscriptionStorageServiceAccountContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageServiceAccountContainerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionStorageServiceAccountContainer creates a new instance of this resource
func createAzureSubscriptionStorageServiceAccountContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageServiceAccountContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storageService.account.container", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) MqlName() string {
	return "azure.subscription.storageService.account.container"
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionStorageServiceAccountContainer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionWebService for the azure.subscription.webService resource
type mqlAzureSubscriptionWebService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Apps plugin.TValue[[]interface{}]
	AvailableRuntimes plugin.TValue[[]interface{}]
}

// createAzureSubscriptionWebService creates a new instance of this resource
func createAzureSubscriptionWebService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.webService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebService) MqlName() string {
	return "azure.subscription.webService"
}

func (c *mqlAzureSubscriptionWebService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionWebService) GetApps() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Apps, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.webService", c.__id, "apps")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.apps()
	})
}

func (c *mqlAzureSubscriptionWebService) GetAvailableRuntimes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AvailableRuntimes, func() ([]interface{}, error) {
		return c.availableRuntimes()
	})
}

// mqlAzureSubscriptionWebServiceAppsite for the azure.subscription.webService.appsite resource
type mqlAzureSubscriptionWebServiceAppsite struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebServiceAppsiteInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Location plugin.TValue[string]
	Type plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Properties plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	Configuration plugin.TValue[*mqlAzureSubscriptionWebServiceAppsiteconfig]
	AuthenticationSettings plugin.TValue[*mqlAzureSubscriptionWebServiceAppsiteauthsettings]
	Metadata plugin.TValue[interface{}]
	ApplicationSettings plugin.TValue[interface{}]
	ConnectionSettings plugin.TValue[interface{}]
	Stack plugin.TValue[interface{}]
	DiagnosticSettings plugin.TValue[[]interface{}]
}

// createAzureSubscriptionWebServiceAppsite creates a new instance of this resource
func createAzureSubscriptionWebServiceAppsite(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebServiceAppsite{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.webService.appsite", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebServiceAppsite) MqlName() string {
	return "azure.subscription.webService.appsite"
}

func (c *mqlAzureSubscriptionWebServiceAppsite) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetConfiguration() *plugin.TValue[*mqlAzureSubscriptionWebServiceAppsiteconfig] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionWebServiceAppsiteconfig](&c.Configuration, func() (*mqlAzureSubscriptionWebServiceAppsiteconfig, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.webService.appsite", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionWebServiceAppsiteconfig), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetAuthenticationSettings() *plugin.TValue[*mqlAzureSubscriptionWebServiceAppsiteauthsettings] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionWebServiceAppsiteauthsettings](&c.AuthenticationSettings, func() (*mqlAzureSubscriptionWebServiceAppsiteauthsettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.webService.appsite", c.__id, "authenticationSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionWebServiceAppsiteauthsettings), nil
			}
		}

		return c.authenticationSettings()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetMetadata() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Metadata, func() (interface{}, error) {
		return c.metadata()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetApplicationSettings() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ApplicationSettings, func() (interface{}, error) {
		return c.applicationSettings()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetConnectionSettings() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionSettings, func() (interface{}, error) {
		return c.connectionSettings()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetStack() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Stack, func() (interface{}, error) {
		return c.stack()
	})
}

func (c *mqlAzureSubscriptionWebServiceAppsite) GetDiagnosticSettings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DiagnosticSettings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.webService.appsite", c.__id, "diagnosticSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.diagnosticSettings()
	})
}

// mqlAzureSubscriptionWebServiceAppsiteauthsettings for the azure.subscription.webService.appsiteauthsettings resource
type mqlAzureSubscriptionWebServiceAppsiteauthsettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebServiceAppsiteauthsettingsInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionWebServiceAppsiteauthsettings creates a new instance of this resource
func createAzureSubscriptionWebServiceAppsiteauthsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebServiceAppsiteauthsettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.webService.appsiteauthsettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) MqlName() string {
	return "azure.subscription.webService.appsiteauthsettings"
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebServiceAppsiteauthsettings) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionWebServiceAppsiteconfig for the azure.subscription.webService.appsiteconfig resource
type mqlAzureSubscriptionWebServiceAppsiteconfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebServiceAppsiteconfigInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionWebServiceAppsiteconfig creates a new instance of this resource
func createAzureSubscriptionWebServiceAppsiteconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebServiceAppsiteconfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.webService.appsiteconfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) MqlName() string {
	return "azure.subscription.webService.appsiteconfig"
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebServiceAppsiteconfig) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionSqlService for the azure.subscription.sqlService resource
type mqlAzureSubscriptionSqlService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSqlService creates a new instance of this resource
func createAzureSubscriptionSqlService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlService) MqlName() string {
	return "azure.subscription.sqlService"
}

func (c *mqlAzureSubscriptionSqlService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionSqlService) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

// mqlAzureSubscriptionSqlServiceServer for the azure.subscription.sqlService.server resource
type mqlAzureSubscriptionSqlServiceServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
	AzureAdAdministrators plugin.TValue[[]interface{}]
	ConnectionPolicy plugin.TValue[interface{}]
	AuditingPolicy plugin.TValue[interface{}]
	SecurityAlertPolicy plugin.TValue[interface{}]
	EncryptionProtector plugin.TValue[interface{}]
	ThreatDetectionPolicy plugin.TValue[interface{}]
	VulnerabilityAssessmentSettings plugin.TValue[*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings]
	VirtualNetworkRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSqlServiceServer creates a new instance of this resource
func createAzureSubscriptionSqlServiceServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceServer) MqlName() string {
	return "azure.subscription.sqlService.server"
}

func (c *mqlAzureSubscriptionSqlServiceServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetAzureAdAdministrators() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AzureAdAdministrators, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.server", c.__id, "azureAdAdministrators")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.azureAdAdministrators()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetConnectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionPolicy, func() (interface{}, error) {
		return c.connectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetAuditingPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.AuditingPolicy, func() (interface{}, error) {
		return c.auditingPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetSecurityAlertPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.SecurityAlertPolicy, func() (interface{}, error) {
		return c.securityAlertPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetEncryptionProtector() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.EncryptionProtector, func() (interface{}, error) {
		return c.encryptionProtector()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetThreatDetectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ThreatDetectionPolicy, func() (interface{}, error) {
		return c.threatDetectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetVulnerabilityAssessmentSettings() *plugin.TValue[*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings](&c.VulnerabilityAssessmentSettings, func() (*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.server", c.__id, "vulnerabilityAssessmentSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings), nil
			}
		}

		return c.vulnerabilityAssessmentSettings()
	})
}

func (c *mqlAzureSubscriptionSqlServiceServer) GetVirtualNetworkRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VirtualNetworkRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.server", c.__id, "virtualNetworkRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.virtualNetworkRules()
	})
}

// mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings for the azure.subscription.sqlService.server.vulnerabilityassessmentsettings resource
type mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettingsInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	StorageContainerPath plugin.TValue[string]
	StorageAccountAccessKey plugin.TValue[string]
	StorageContainerSasKey plugin.TValue[string]
	RecurringScanEnabled plugin.TValue[bool]
	RecurringScanEmails plugin.TValue[[]interface{}]
	MailSubscriptionAdmins plugin.TValue[bool]
}

// createAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings creates a new instance of this resource
func createAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.server.vulnerabilityassessmentsettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) MqlName() string {
	return "azure.subscription.sqlService.server.vulnerabilityassessmentsettings"
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetStorageContainerPath() *plugin.TValue[string] {
	return &c.StorageContainerPath
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetStorageAccountAccessKey() *plugin.TValue[string] {
	return &c.StorageAccountAccessKey
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetStorageContainerSasKey() *plugin.TValue[string] {
	return &c.StorageContainerSasKey
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetRecurringScanEnabled() *plugin.TValue[bool] {
	return &c.RecurringScanEnabled
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetRecurringScanEmails() *plugin.TValue[[]interface{}] {
	return &c.RecurringScanEmails
}

func (c *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) GetMailSubscriptionAdmins() *plugin.TValue[bool] {
	return &c.MailSubscriptionAdmins
}

// mqlAzureSubscriptionSqlServiceServerAdministrator for the azure.subscription.sqlService.server.administrator resource
type mqlAzureSubscriptionSqlServiceServerAdministrator struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceServerAdministratorInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	AdministratorType plugin.TValue[string]
	Login plugin.TValue[string]
	Sid plugin.TValue[string]
	TenantId plugin.TValue[string]
}

// createAzureSubscriptionSqlServiceServerAdministrator creates a new instance of this resource
func createAzureSubscriptionSqlServiceServerAdministrator(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceServerAdministrator{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.server.administrator", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) MqlName() string {
	return "azure.subscription.sqlService.server.administrator"
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetAdministratorType() *plugin.TValue[string] {
	return &c.AdministratorType
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetLogin() *plugin.TValue[string] {
	return &c.Login
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetSid() *plugin.TValue[string] {
	return &c.Sid
}

func (c *mqlAzureSubscriptionSqlServiceServerAdministrator) GetTenantId() *plugin.TValue[string] {
	return &c.TenantId
}

// mqlAzureSubscriptionSqlServiceDatabase for the azure.subscription.sqlService.database resource
type mqlAzureSubscriptionSqlServiceDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Collation plugin.TValue[string]
	CreationDate plugin.TValue[*time.Time]
	DatabaseId plugin.TValue[string]
	EarliestRestoreDate plugin.TValue[*time.Time]
	CreateMode plugin.TValue[string]
	SourceDatabaseId plugin.TValue[string]
	SourceDatabaseDeletionDate plugin.TValue[*time.Time]
	RestorePointInTime plugin.TValue[*time.Time]
	RecoveryServicesRecoveryPointResourceId plugin.TValue[string]
	Edition plugin.TValue[string]
	MaxSizeBytes plugin.TValue[int64]
	RequestedServiceObjectiveName plugin.TValue[string]
	ServiceLevelObjective plugin.TValue[string]
	Status plugin.TValue[string]
	ElasticPoolName plugin.TValue[string]
	DefaultSecondaryLocation plugin.TValue[string]
	FailoverGroupId plugin.TValue[string]
	ReadScale plugin.TValue[string]
	SampleName plugin.TValue[string]
	ZoneRedundant plugin.TValue[bool]
	TransparentDataEncryption plugin.TValue[interface{}]
	Advisor plugin.TValue[[]interface{}]
	ThreatDetectionPolicy plugin.TValue[interface{}]
	ConnectionPolicy plugin.TValue[interface{}]
	AuditingPolicy plugin.TValue[interface{}]
	Usage plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSqlServiceDatabase creates a new instance of this resource
func createAzureSubscriptionSqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) MqlName() string {
	return "azure.subscription.sqlService.database"
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetCreationDate() *plugin.TValue[*time.Time] {
	return &c.CreationDate
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetDatabaseId() *plugin.TValue[string] {
	return &c.DatabaseId
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetEarliestRestoreDate() *plugin.TValue[*time.Time] {
	return &c.EarliestRestoreDate
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetCreateMode() *plugin.TValue[string] {
	return &c.CreateMode
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetSourceDatabaseId() *plugin.TValue[string] {
	return &c.SourceDatabaseId
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetSourceDatabaseDeletionDate() *plugin.TValue[*time.Time] {
	return &c.SourceDatabaseDeletionDate
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetRestorePointInTime() *plugin.TValue[*time.Time] {
	return &c.RestorePointInTime
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetRecoveryServicesRecoveryPointResourceId() *plugin.TValue[string] {
	return &c.RecoveryServicesRecoveryPointResourceId
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetEdition() *plugin.TValue[string] {
	return &c.Edition
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetMaxSizeBytes() *plugin.TValue[int64] {
	return &c.MaxSizeBytes
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetRequestedServiceObjectiveName() *plugin.TValue[string] {
	return &c.RequestedServiceObjectiveName
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetServiceLevelObjective() *plugin.TValue[string] {
	return &c.ServiceLevelObjective
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetElasticPoolName() *plugin.TValue[string] {
	return &c.ElasticPoolName
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetDefaultSecondaryLocation() *plugin.TValue[string] {
	return &c.DefaultSecondaryLocation
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetFailoverGroupId() *plugin.TValue[string] {
	return &c.FailoverGroupId
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetReadScale() *plugin.TValue[string] {
	return &c.ReadScale
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetSampleName() *plugin.TValue[string] {
	return &c.SampleName
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetZoneRedundant() *plugin.TValue[bool] {
	return &c.ZoneRedundant
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetTransparentDataEncryption() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.TransparentDataEncryption, func() (interface{}, error) {
		return c.transparentDataEncryption()
	})
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetAdvisor() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Advisor, func() ([]interface{}, error) {
		return c.advisor()
	})
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetThreatDetectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ThreatDetectionPolicy, func() (interface{}, error) {
		return c.threatDetectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetConnectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionPolicy, func() (interface{}, error) {
		return c.connectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetAuditingPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.AuditingPolicy, func() (interface{}, error) {
		return c.auditingPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServiceDatabase) GetUsage() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Usage, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sqlService.database", c.__id, "usage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.usage()
	})
}

// mqlAzureSubscriptionSqlServiceDatabaseusage for the azure.subscription.sqlService.databaseusage resource
type mqlAzureSubscriptionSqlServiceDatabaseusage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceDatabaseusageInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ResourceName plugin.TValue[string]
	DisplayName plugin.TValue[string]
	CurrentValue plugin.TValue[float64]
	Limit plugin.TValue[float64]
	Unit plugin.TValue[string]
}

// createAzureSubscriptionSqlServiceDatabaseusage creates a new instance of this resource
func createAzureSubscriptionSqlServiceDatabaseusage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceDatabaseusage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.databaseusage", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) MqlName() string {
	return "azure.subscription.sqlService.databaseusage"
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetResourceName() *plugin.TValue[string] {
	return &c.ResourceName
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetCurrentValue() *plugin.TValue[float64] {
	return &c.CurrentValue
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetLimit() *plugin.TValue[float64] {
	return &c.Limit
}

func (c *mqlAzureSubscriptionSqlServiceDatabaseusage) GetUnit() *plugin.TValue[string] {
	return &c.Unit
}

// mqlAzureSubscriptionPostgreSqlService for the azure.subscription.postgreSqlService resource
type mqlAzureSubscriptionPostgreSqlService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
	FlexibleServers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPostgreSqlService creates a new instance of this resource
func createAzureSubscriptionPostgreSqlService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSqlService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlService) MqlName() string {
	return "azure.subscription.postgreSqlService"
}

func (c *mqlAzureSubscriptionPostgreSqlService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionPostgreSqlService) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlService) GetFlexibleServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlexibleServers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService", c.__id, "flexibleServers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flexibleServers()
	})
}

// mqlAzureSubscriptionPostgreSqlServiceFlexibleServer for the azure.subscription.postgreSqlService.flexibleServer resource
type mqlAzureSubscriptionPostgreSqlServiceFlexibleServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlServiceFlexibleServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPostgreSqlServiceFlexibleServer creates a new instance of this resource
func createAzureSubscriptionPostgreSqlServiceFlexibleServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlServiceFlexibleServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSqlService.flexibleServer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) MqlName() string {
	return "azure.subscription.postgreSqlService.flexibleServer"
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.flexibleServer", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.flexibleServer", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServiceFlexibleServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.flexibleServer", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionPostgreSqlServiceServer for the azure.subscription.postgreSqlService.server resource
type mqlAzureSubscriptionPostgreSqlServiceServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlServiceServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPostgreSqlServiceServer creates a new instance of this resource
func createAzureSubscriptionPostgreSqlServiceServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlServiceServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSqlService.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) MqlName() string {
	return "azure.subscription.postgreSqlService.server"
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServiceServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSqlService.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionPostgreSqlServiceDatabase for the azure.subscription.postgreSqlService.database resource
type mqlAzureSubscriptionPostgreSqlServiceDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlServiceDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionPostgreSqlServiceDatabase creates a new instance of this resource
func createAzureSubscriptionPostgreSqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlServiceDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSqlService.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) MqlName() string {
	return "azure.subscription.postgreSqlService.database"
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionPostgreSqlServiceDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionSqlServiceConfiguration for the azure.subscription.sqlService.configuration resource
type mqlAzureSubscriptionSqlServiceConfiguration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceConfigurationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Value plugin.TValue[string]
	Description plugin.TValue[string]
	DefaultValue plugin.TValue[string]
	DataType plugin.TValue[string]
	AllowedValues plugin.TValue[string]
	Source plugin.TValue[string]
}

// createAzureSubscriptionSqlServiceConfiguration creates a new instance of this resource
func createAzureSubscriptionSqlServiceConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceConfiguration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.configuration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) MqlName() string {
	return "azure.subscription.sqlService.configuration"
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetDefaultValue() *plugin.TValue[string] {
	return &c.DefaultValue
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetDataType() *plugin.TValue[string] {
	return &c.DataType
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetAllowedValues() *plugin.TValue[string] {
	return &c.AllowedValues
}

func (c *mqlAzureSubscriptionSqlServiceConfiguration) GetSource() *plugin.TValue[string] {
	return &c.Source
}

// mqlAzureSubscriptionSqlServiceFirewallrule for the azure.subscription.sqlService.firewallrule resource
type mqlAzureSubscriptionSqlServiceFirewallrule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceFirewallruleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	StartIpAddress plugin.TValue[string]
	EndIpAddress plugin.TValue[string]
}

// createAzureSubscriptionSqlServiceFirewallrule creates a new instance of this resource
func createAzureSubscriptionSqlServiceFirewallrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceFirewallrule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.firewallrule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) MqlName() string {
	return "azure.subscription.sqlService.firewallrule"
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) GetStartIpAddress() *plugin.TValue[string] {
	return &c.StartIpAddress
}

func (c *mqlAzureSubscriptionSqlServiceFirewallrule) GetEndIpAddress() *plugin.TValue[string] {
	return &c.EndIpAddress
}

// mqlAzureSubscriptionSqlServiceVirtualNetworkRule for the azure.subscription.sqlService.virtualNetworkRule resource
type mqlAzureSubscriptionSqlServiceVirtualNetworkRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServiceVirtualNetworkRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	VirtualNetworkSubnetId plugin.TValue[string]
}

// createAzureSubscriptionSqlServiceVirtualNetworkRule creates a new instance of this resource
func createAzureSubscriptionSqlServiceVirtualNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServiceVirtualNetworkRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sqlService.virtualNetworkRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) MqlName() string {
	return "azure.subscription.sqlService.virtualNetworkRule"
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) GetVirtualNetworkSubnetId() *plugin.TValue[string] {
	return &c.VirtualNetworkSubnetId
}

// mqlAzureSubscriptionMySqlService for the azure.subscription.mySqlService resource
type mqlAzureSubscriptionMySqlService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
	FlexibleServers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySqlService creates a new instance of this resource
func createAzureSubscriptionMySqlService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySqlService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlService) MqlName() string {
	return "azure.subscription.mySqlService"
}

func (c *mqlAzureSubscriptionMySqlService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMySqlService) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

func (c *mqlAzureSubscriptionMySqlService) GetFlexibleServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlexibleServers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService", c.__id, "flexibleServers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flexibleServers()
	})
}

// mqlAzureSubscriptionMySqlServiceServer for the azure.subscription.mySqlService.server resource
type mqlAzureSubscriptionMySqlServiceServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlServiceServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySqlServiceServer creates a new instance of this resource
func createAzureSubscriptionMySqlServiceServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlServiceServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySqlService.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlServiceServer) MqlName() string {
	return "azure.subscription.mySqlService.server"
}

func (c *mqlAzureSubscriptionMySqlServiceServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMySqlServiceServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMySqlServiceDatabase for the azure.subscription.mySqlService.database resource
type mqlAzureSubscriptionMySqlServiceDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlServiceDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionMySqlServiceDatabase creates a new instance of this resource
func createAzureSubscriptionMySqlServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlServiceDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySqlService.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) MqlName() string {
	return "azure.subscription.mySqlService.database"
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionMySqlServiceDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionMySqlServiceFlexibleServer for the azure.subscription.mySqlService.flexibleServer resource
type mqlAzureSubscriptionMySqlServiceFlexibleServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlServiceFlexibleServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySqlServiceFlexibleServer creates a new instance of this resource
func createAzureSubscriptionMySqlServiceFlexibleServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlServiceFlexibleServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySqlService.flexibleServer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) MqlName() string {
	return "azure.subscription.mySqlService.flexibleServer"
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.flexibleServer", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.flexibleServer", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMySqlServiceFlexibleServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySqlService.flexibleServer", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMariaDbService for the azure.subscription.mariaDbService resource
type mqlAzureSubscriptionMariaDbService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMariaDbService creates a new instance of this resource
func createAzureSubscriptionMariaDbService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDbService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDbService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDbService) MqlName() string {
	return "azure.subscription.mariaDbService"
}

func (c *mqlAzureSubscriptionMariaDbService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDbService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMariaDbService) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDbService", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

// mqlAzureSubscriptionMariaDbServiceServer for the azure.subscription.mariaDbService.server resource
type mqlAzureSubscriptionMariaDbServiceServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbServiceServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMariaDbServiceServer creates a new instance of this resource
func createAzureSubscriptionMariaDbServiceServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDbServiceServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDbService.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) MqlName() string {
	return "azure.subscription.mariaDbService.server"
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDbService.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDbService.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMariaDbServiceServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDbService.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMariaDbServiceDatabase for the azure.subscription.mariaDbService.database resource
type mqlAzureSubscriptionMariaDbServiceDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbServiceDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionMariaDbServiceDatabase creates a new instance of this resource
func createAzureSubscriptionMariaDbServiceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDbServiceDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDbService.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) MqlName() string {
	return "azure.subscription.mariaDbService.database"
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionMariaDbServiceDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionCosmosDbService for the azure.subscription.cosmosDbService resource
type mqlAzureSubscriptionCosmosDbService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCosmosDbServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Accounts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionCosmosDbService creates a new instance of this resource
func createAzureSubscriptionCosmosDbService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCosmosDbService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cosmosDbService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCosmosDbService) MqlName() string {
	return "azure.subscription.cosmosDbService"
}

func (c *mqlAzureSubscriptionCosmosDbService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCosmosDbService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionCosmosDbService) GetAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Accounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.cosmosDbService", c.__id, "accounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accounts()
	})
}

// mqlAzureSubscriptionCosmosDbServiceAccount for the azure.subscription.cosmosDbService.account resource
type mqlAzureSubscriptionCosmosDbServiceAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCosmosDbServiceAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Kind plugin.TValue[string]
}

// createAzureSubscriptionCosmosDbServiceAccount creates a new instance of this resource
func createAzureSubscriptionCosmosDbServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCosmosDbServiceAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cosmosDbService.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) MqlName() string {
	return "azure.subscription.cosmosDbService.account"
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionCosmosDbServiceAccount) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

// mqlAzureSubscriptionKeyVaultService for the azure.subscription.keyVaultService resource
type mqlAzureSubscriptionKeyVaultService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Vaults plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultService creates a new instance of this resource
func createAzureSubscriptionKeyVaultService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVaultService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultService) MqlName() string {
	return "azure.subscription.keyVaultService"
}

func (c *mqlAzureSubscriptionKeyVaultService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionKeyVaultService) GetVaults() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vaults, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService", c.__id, "vaults")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vaults()
	})
}

// mqlAzureSubscriptionKeyVaultServiceVault for the azure.subscription.keyVaultService.vault resource
type mqlAzureSubscriptionKeyVaultServiceVault struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultServiceVaultInternal it will be used here
	Id plugin.TValue[string]
	VaultName plugin.TValue[string]
	Type plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	VaultUri plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	RbacAuthorizationEnabled plugin.TValue[bool]
	Keys plugin.TValue[[]interface{}]
	Certificates plugin.TValue[[]interface{}]
	Secrets plugin.TValue[[]interface{}]
	DiagnosticSettings plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultServiceVault creates a new instance of this resource
func createAzureSubscriptionKeyVaultServiceVault(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultServiceVault{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVaultService.vault", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) MqlName() string {
	return "azure.subscription.keyVaultService.vault"
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetVaultName() *plugin.TValue[string] {
	return &c.VaultName
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetVaultUri() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.VaultUri, func() (string, error) {
		return c.vaultUri()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetProperties() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Properties, func() (interface{}, error) {
		return c.properties()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetRbacAuthorizationEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.RbacAuthorizationEnabled, func() (bool, error) {
		return c.rbacAuthorizationEnabled()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.vault", c.__id, "keys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keys()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetCertificates() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Certificates, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.vault", c.__id, "certificates")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.certificates()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetSecrets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Secrets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.vault", c.__id, "secrets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.secrets()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceVault) GetDiagnosticSettings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DiagnosticSettings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.vault", c.__id, "diagnosticSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.diagnosticSettings()
	})
}

// mqlAzureSubscriptionKeyVaultServiceKey for the azure.subscription.keyVaultService.key resource
type mqlAzureSubscriptionKeyVaultServiceKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultServiceKeyInternal it will be used here
	Kid plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Managed plugin.TValue[bool]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	RecoveryLevel plugin.TValue[string]
	KeyName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultServiceKey creates a new instance of this resource
func createAzureSubscriptionKeyVaultServiceKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultServiceKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVaultService.key", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) MqlName() string {
	return "azure.subscription.keyVaultService.key"
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetKid() *plugin.TValue[string] {
	return &c.Kid
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetManaged() *plugin.TValue[bool] {
	return &c.Managed
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetRecoveryLevel() *plugin.TValue[string] {
	return &c.RecoveryLevel
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetKeyName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.KeyName, func() (string, error) {
		return c.keyName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceKey) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.key", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionKeyVaultServiceCertificate for the azure.subscription.keyVaultService.certificate resource
type mqlAzureSubscriptionKeyVaultServiceCertificate struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultServiceCertificateInternal it will be used here
	Id plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	X5t plugin.TValue[string]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	RecoveryLevel plugin.TValue[string]
	CertName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultServiceCertificate creates a new instance of this resource
func createAzureSubscriptionKeyVaultServiceCertificate(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultServiceCertificate{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVaultService.certificate", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) MqlName() string {
	return "azure.subscription.keyVaultService.certificate"
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetX5t() *plugin.TValue[string] {
	return &c.X5t
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetRecoveryLevel() *plugin.TValue[string] {
	return &c.RecoveryLevel
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetCertName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.CertName, func() (string, error) {
		return c.certName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceCertificate) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.certificate", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionKeyVaultServiceSecret for the azure.subscription.keyVaultService.secret resource
type mqlAzureSubscriptionKeyVaultServiceSecret struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultServiceSecretInternal it will be used here
	Id plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	ContentType plugin.TValue[string]
	Managed plugin.TValue[bool]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	SecretName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultServiceSecret creates a new instance of this resource
func createAzureSubscriptionKeyVaultServiceSecret(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultServiceSecret{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVaultService.secret", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) MqlName() string {
	return "azure.subscription.keyVaultService.secret"
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetContentType() *plugin.TValue[string] {
	return &c.ContentType
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetManaged() *plugin.TValue[bool] {
	return &c.Managed
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetSecretName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.SecretName, func() (string, error) {
		return c.secretName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultServiceSecret) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVaultService.secret", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionMonitorService for the azure.subscription.monitorService resource
type mqlAzureSubscriptionMonitorService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	LogProfiles plugin.TValue[[]interface{}]
	DiagnosticSettings plugin.TValue[[]interface{}]
	ApplicationInsights plugin.TValue[[]interface{}]
	ActivityLog plugin.TValue[*mqlAzureSubscriptionMonitorServiceActivityLog]
}

// createAzureSubscriptionMonitorService creates a new instance of this resource
func createAzureSubscriptionMonitorService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorService) MqlName() string {
	return "azure.subscription.monitorService"
}

func (c *mqlAzureSubscriptionMonitorService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMonitorService) GetLogProfiles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.LogProfiles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService", c.__id, "logProfiles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.logProfiles()
	})
}

func (c *mqlAzureSubscriptionMonitorService) GetDiagnosticSettings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DiagnosticSettings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService", c.__id, "diagnosticSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.diagnosticSettings()
	})
}

func (c *mqlAzureSubscriptionMonitorService) GetApplicationInsights() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationInsights, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService", c.__id, "applicationInsights")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationInsights()
	})
}

func (c *mqlAzureSubscriptionMonitorService) GetActivityLog() *plugin.TValue[*mqlAzureSubscriptionMonitorServiceActivityLog] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionMonitorServiceActivityLog](&c.ActivityLog, func() (*mqlAzureSubscriptionMonitorServiceActivityLog, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService", c.__id, "activityLog")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionMonitorServiceActivityLog), nil
			}
		}

		return c.activityLog()
	})
}

// mqlAzureSubscriptionMonitorServiceActivityLog for the azure.subscription.monitorService.activityLog resource
type mqlAzureSubscriptionMonitorServiceActivityLog struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceActivityLogInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Alerts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMonitorServiceActivityLog creates a new instance of this resource
func createAzureSubscriptionMonitorServiceActivityLog(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorServiceActivityLog{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService.activityLog", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLog) MqlName() string {
	return "azure.subscription.monitorService.activityLog"
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLog) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLog) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLog) GetAlerts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Alerts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService.activityLog", c.__id, "alerts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.alerts()
	})
}

// mqlAzureSubscriptionMonitorServiceApplicationInsight for the azure.subscription.monitorService.applicationInsight resource
type mqlAzureSubscriptionMonitorServiceApplicationInsight struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceApplicationInsightInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Tags plugin.TValue[map[string]interface{}]
	Location plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAzureSubscriptionMonitorServiceApplicationInsight creates a new instance of this resource
func createAzureSubscriptionMonitorServiceApplicationInsight(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorServiceApplicationInsight{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService.applicationInsight", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) MqlName() string {
	return "azure.subscription.monitorService.applicationInsight"
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionMonitorServiceApplicationInsight) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlAzureSubscriptionMonitorServiceActivityLogAlert for the azure.subscription.monitorService.activityLog.alert resource
type mqlAzureSubscriptionMonitorServiceActivityLogAlert struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceActivityLogAlertInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Conditions plugin.TValue[[]interface{}]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Actions plugin.TValue[[]interface{}]
	Scopes plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMonitorServiceActivityLogAlert creates a new instance of this resource
func createAzureSubscriptionMonitorServiceActivityLogAlert(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorServiceActivityLogAlert{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService.activityLog.alert", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) MqlName() string {
	return "azure.subscription.monitorService.activityLog.alert"
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetConditions() *plugin.TValue[[]interface{}] {
	return &c.Conditions
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetActions() *plugin.TValue[[]interface{}] {
	return &c.Actions
}

func (c *mqlAzureSubscriptionMonitorServiceActivityLogAlert) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

// mqlAzureSubscriptionMonitorServiceLogprofile for the azure.subscription.monitorService.logprofile resource
type mqlAzureSubscriptionMonitorServiceLogprofile struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceLogprofileInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Type plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Properties plugin.TValue[interface{}]
	StorageAccountId plugin.TValue[string]
	StorageAccount plugin.TValue[*mqlAzureSubscriptionStorageServiceAccount]
}

// createAzureSubscriptionMonitorServiceLogprofile creates a new instance of this resource
func createAzureSubscriptionMonitorServiceLogprofile(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorServiceLogprofile{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService.logprofile", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) MqlName() string {
	return "azure.subscription.monitorService.logprofile"
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionMonitorServiceLogprofile) GetStorageAccount() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccount] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccount](&c.StorageAccount, func() (*mqlAzureSubscriptionStorageServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService.logprofile", c.__id, "storageAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccount), nil
			}
		}

		return c.storageAccount()
	})
}

// mqlAzureSubscriptionMonitorServiceDiagnosticsetting for the azure.subscription.monitorService.diagnosticsetting resource
type mqlAzureSubscriptionMonitorServiceDiagnosticsetting struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorServiceDiagnosticsettingInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	StorageAccountId plugin.TValue[string]
	StorageAccount plugin.TValue[*mqlAzureSubscriptionStorageServiceAccount]
}

// createAzureSubscriptionMonitorServiceDiagnosticsetting creates a new instance of this resource
func createAzureSubscriptionMonitorServiceDiagnosticsetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorServiceDiagnosticsetting{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitorService.diagnosticsetting", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) MqlName() string {
	return "azure.subscription.monitorService.diagnosticsetting"
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) GetStorageAccount() *plugin.TValue[*mqlAzureSubscriptionStorageServiceAccount] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageServiceAccount](&c.StorageAccount, func() (*mqlAzureSubscriptionStorageServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitorService.diagnosticsetting", c.__id, "storageAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageServiceAccount), nil
			}
		}

		return c.storageAccount()
	})
}

// mqlAzureSubscriptionCloudDefenderService for the azure.subscription.cloudDefenderService resource
type mqlAzureSubscriptionCloudDefenderService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCloudDefenderServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	MonitoringAgentAutoProvision plugin.TValue[bool]
	DefenderForServers plugin.TValue[interface{}]
	DefenderForAppServices plugin.TValue[interface{}]
	DefenderForSqlServersOnMachines plugin.TValue[interface{}]
	DefenderForSqlDatabases plugin.TValue[interface{}]
	DefenderForOpenSourceDatabases plugin.TValue[interface{}]
	DefenderForCosmosDb plugin.TValue[interface{}]
	DefenderForStorageAccounts plugin.TValue[interface{}]
	DefenderForKeyVaults plugin.TValue[interface{}]
	DefenderForResourceManager plugin.TValue[interface{}]
	DefenderForContainers plugin.TValue[interface{}]
	SecurityContacts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionCloudDefenderService creates a new instance of this resource
func createAzureSubscriptionCloudDefenderService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCloudDefenderService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cloudDefenderService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCloudDefenderService) MqlName() string {
	return "azure.subscription.cloudDefenderService"
}

func (c *mqlAzureSubscriptionCloudDefenderService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetMonitoringAgentAutoProvision() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.MonitoringAgentAutoProvision, func() (bool, error) {
		return c.monitoringAgentAutoProvision()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForServers() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForServers, func() (interface{}, error) {
		return c.defenderForServers()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForAppServices() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForAppServices, func() (interface{}, error) {
		return c.defenderForAppServices()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForSqlServersOnMachines() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForSqlServersOnMachines, func() (interface{}, error) {
		return c.defenderForSqlServersOnMachines()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForSqlDatabases() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForSqlDatabases, func() (interface{}, error) {
		return c.defenderForSqlDatabases()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForOpenSourceDatabases() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForOpenSourceDatabases, func() (interface{}, error) {
		return c.defenderForOpenSourceDatabases()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForCosmosDb() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForCosmosDb, func() (interface{}, error) {
		return c.defenderForCosmosDb()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForStorageAccounts() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForStorageAccounts, func() (interface{}, error) {
		return c.defenderForStorageAccounts()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForKeyVaults() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForKeyVaults, func() (interface{}, error) {
		return c.defenderForKeyVaults()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForResourceManager() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForResourceManager, func() (interface{}, error) {
		return c.defenderForResourceManager()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetDefenderForContainers() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForContainers, func() (interface{}, error) {
		return c.defenderForContainers()
	})
}

func (c *mqlAzureSubscriptionCloudDefenderService) GetSecurityContacts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityContacts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.cloudDefenderService", c.__id, "securityContacts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityContacts()
	})
}

// mqlAzureSubscriptionCloudDefenderServiceSecurityContact for the azure.subscription.cloudDefenderService.securityContact resource
type mqlAzureSubscriptionCloudDefenderServiceSecurityContact struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCloudDefenderServiceSecurityContactInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Emails plugin.TValue[[]interface{}]
	AlertNotifications plugin.TValue[interface{}]
	NotificationsByRole plugin.TValue[interface{}]
}

// createAzureSubscriptionCloudDefenderServiceSecurityContact creates a new instance of this resource
func createAzureSubscriptionCloudDefenderServiceSecurityContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCloudDefenderServiceSecurityContact{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cloudDefenderService.securityContact", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) MqlName() string {
	return "azure.subscription.cloudDefenderService.securityContact"
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) GetEmails() *plugin.TValue[[]interface{}] {
	return &c.Emails
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) GetAlertNotifications() *plugin.TValue[interface{}] {
	return &c.AlertNotifications
}

func (c *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) GetNotificationsByRole() *plugin.TValue[interface{}] {
	return &c.NotificationsByRole
}

// mqlAzureSubscriptionAuthorizationService for the azure.subscription.authorizationService resource
type mqlAzureSubscriptionAuthorizationService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Roles plugin.TValue[[]interface{}]
	RoleDefinitions plugin.TValue[[]interface{}]
	RoleAssignments plugin.TValue[[]interface{}]
	ManagedIdentities plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorizationService creates a new instance of this resource
func createAzureSubscriptionAuthorizationService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorizationService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationService) MqlName() string {
	return "azure.subscription.authorizationService"
}

func (c *mqlAzureSubscriptionAuthorizationService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionAuthorizationService) GetRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Roles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorizationService", c.__id, "roles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roles()
	})
}

func (c *mqlAzureSubscriptionAuthorizationService) GetRoleDefinitions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RoleDefinitions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorizationService", c.__id, "roleDefinitions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roleDefinitions()
	})
}

func (c *mqlAzureSubscriptionAuthorizationService) GetRoleAssignments() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RoleAssignments, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorizationService", c.__id, "roleAssignments")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roleAssignments()
	})
}

func (c *mqlAzureSubscriptionAuthorizationService) GetManagedIdentities() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ManagedIdentities, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorizationService", c.__id, "managedIdentities")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.managedIdentities()
	})
}

// mqlAzureSubscriptionAuthorizationServiceRoleDefinition for the azure.subscription.authorizationService.roleDefinition resource
type mqlAzureSubscriptionAuthorizationServiceRoleDefinition struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationServiceRoleDefinitionInternal it will be used here
	Id plugin.TValue[string]
	Description plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	IsCustom plugin.TValue[bool]
	Scopes plugin.TValue[[]interface{}]
	Permissions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorizationServiceRoleDefinition creates a new instance of this resource
func createAzureSubscriptionAuthorizationServiceRoleDefinition(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationServiceRoleDefinition{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorizationService.roleDefinition", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) MqlName() string {
	return "azure.subscription.authorizationService.roleDefinition"
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetIsCustom() *plugin.TValue[bool] {
	return &c.IsCustom
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) GetPermissions() *plugin.TValue[[]interface{}] {
	return &c.Permissions
}

// mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission for the azure.subscription.authorizationService.roleDefinition.permission resource
type mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermissionInternal it will be used here
	Id plugin.TValue[string]
	AllowedActions plugin.TValue[[]interface{}]
	DeniedActions plugin.TValue[[]interface{}]
	AllowedDataActions plugin.TValue[[]interface{}]
	DeniedDataActions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorizationServiceRoleDefinitionPermission creates a new instance of this resource
func createAzureSubscriptionAuthorizationServiceRoleDefinitionPermission(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorizationService.roleDefinition.permission", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) MqlName() string {
	return "azure.subscription.authorizationService.roleDefinition.permission"
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) GetAllowedActions() *plugin.TValue[[]interface{}] {
	return &c.AllowedActions
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) GetDeniedActions() *plugin.TValue[[]interface{}] {
	return &c.DeniedActions
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) GetAllowedDataActions() *plugin.TValue[[]interface{}] {
	return &c.AllowedDataActions
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) GetDeniedDataActions() *plugin.TValue[[]interface{}] {
	return &c.DeniedDataActions
}

// mqlAzureSubscriptionAuthorizationServiceRoleAssignment for the azure.subscription.authorizationService.roleAssignment resource
type mqlAzureSubscriptionAuthorizationServiceRoleAssignment struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlAzureSubscriptionAuthorizationServiceRoleAssignmentInternal
	Id plugin.TValue[string]
	Description plugin.TValue[string]
	Type plugin.TValue[string]
	Scope plugin.TValue[string]
	PrincipalId plugin.TValue[string]
	Condition plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	UpdatedAt plugin.TValue[*time.Time]
	Role plugin.TValue[*mqlAzureSubscriptionAuthorizationServiceRoleDefinition]
}

// createAzureSubscriptionAuthorizationServiceRoleAssignment creates a new instance of this resource
func createAzureSubscriptionAuthorizationServiceRoleAssignment(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationServiceRoleAssignment{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorizationService.roleAssignment", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) MqlName() string {
	return "azure.subscription.authorizationService.roleAssignment"
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetScope() *plugin.TValue[string] {
	return &c.Scope
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetPrincipalId() *plugin.TValue[string] {
	return &c.PrincipalId
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetCondition() *plugin.TValue[string] {
	return &c.Condition
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetUpdatedAt() *plugin.TValue[*time.Time] {
	return &c.UpdatedAt
}

func (c *mqlAzureSubscriptionAuthorizationServiceRoleAssignment) GetRole() *plugin.TValue[*mqlAzureSubscriptionAuthorizationServiceRoleDefinition] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionAuthorizationServiceRoleDefinition](&c.Role, func() (*mqlAzureSubscriptionAuthorizationServiceRoleDefinition, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorizationService.roleAssignment", c.__id, "role")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionAuthorizationServiceRoleDefinition), nil
			}
		}

		return c.role()
	})
}

// mqlAzureSubscriptionManagedIdentity for the azure.subscription.managedIdentity resource
type mqlAzureSubscriptionManagedIdentity struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionManagedIdentityInternal it will be used here
	Name plugin.TValue[string]
	ClientId plugin.TValue[string]
	PrincipalId plugin.TValue[string]
	TenantId plugin.TValue[string]
	RoleAssignments plugin.TValue[[]interface{}]
}

// createAzureSubscriptionManagedIdentity creates a new instance of this resource
func createAzureSubscriptionManagedIdentity(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionManagedIdentity{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.managedIdentity", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionManagedIdentity) MqlName() string {
	return "azure.subscription.managedIdentity"
}

func (c *mqlAzureSubscriptionManagedIdentity) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionManagedIdentity) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionManagedIdentity) GetClientId() *plugin.TValue[string] {
	return &c.ClientId
}

func (c *mqlAzureSubscriptionManagedIdentity) GetPrincipalId() *plugin.TValue[string] {
	return &c.PrincipalId
}

func (c *mqlAzureSubscriptionManagedIdentity) GetTenantId() *plugin.TValue[string] {
	return &c.TenantId
}

func (c *mqlAzureSubscriptionManagedIdentity) GetRoleAssignments() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RoleAssignments, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.managedIdentity", c.__id, "roleAssignments")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roleAssignments()
	})
}

// mqlAzureSubscriptionAksService for the azure.subscription.aksService resource
type mqlAzureSubscriptionAksService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAksServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Clusters plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAksService creates a new instance of this resource
func createAzureSubscriptionAksService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAksService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.aksService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAksService) MqlName() string {
	return "azure.subscription.aksService"
}

func (c *mqlAzureSubscriptionAksService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAksService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionAksService) GetClusters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Clusters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.aksService", c.__id, "clusters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.clusters()
	})
}

// mqlAzureSubscriptionAksServiceCluster for the azure.subscription.aksService.cluster resource
type mqlAzureSubscriptionAksServiceCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAksServiceClusterInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	KubernetesVersion plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
	PowerState plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	NodeResourceGroup plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	RbacEnabled plugin.TValue[bool]
	Fqdn plugin.TValue[string]
	DnsPrefix plugin.TValue[string]
	StorageProfile plugin.TValue[interface{}]
	WorkloadAutoScalerProfile plugin.TValue[interface{}]
	SecurityProfile plugin.TValue[interface{}]
	PodIdentityProfile plugin.TValue[interface{}]
	NetworkProfile plugin.TValue[interface{}]
	HttpProxyConfig plugin.TValue[interface{}]
	AddonProfiles plugin.TValue[[]interface{}]
	AgentPoolProfiles plugin.TValue[[]interface{}]
	ApiServerAccessProfile plugin.TValue[interface{}]
}

// createAzureSubscriptionAksServiceCluster creates a new instance of this resource
func createAzureSubscriptionAksServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAksServiceCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.aksService.cluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAksServiceCluster) MqlName() string {
	return "azure.subscription.aksService.cluster"
}

func (c *mqlAzureSubscriptionAksServiceCluster) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetKubernetesVersion() *plugin.TValue[string] {
	return &c.KubernetesVersion
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetPowerState() *plugin.TValue[string] {
	return &c.PowerState
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetNodeResourceGroup() *plugin.TValue[string] {
	return &c.NodeResourceGroup
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetRbacEnabled() *plugin.TValue[bool] {
	return &c.RbacEnabled
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetFqdn() *plugin.TValue[string] {
	return &c.Fqdn
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetDnsPrefix() *plugin.TValue[string] {
	return &c.DnsPrefix
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetStorageProfile() *plugin.TValue[interface{}] {
	return &c.StorageProfile
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetWorkloadAutoScalerProfile() *plugin.TValue[interface{}] {
	return &c.WorkloadAutoScalerProfile
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetSecurityProfile() *plugin.TValue[interface{}] {
	return &c.SecurityProfile
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetPodIdentityProfile() *plugin.TValue[interface{}] {
	return &c.PodIdentityProfile
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetNetworkProfile() *plugin.TValue[interface{}] {
	return &c.NetworkProfile
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetHttpProxyConfig() *plugin.TValue[interface{}] {
	return &c.HttpProxyConfig
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetAddonProfiles() *plugin.TValue[[]interface{}] {
	return &c.AddonProfiles
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetAgentPoolProfiles() *plugin.TValue[[]interface{}] {
	return &c.AgentPoolProfiles
}

func (c *mqlAzureSubscriptionAksServiceCluster) GetApiServerAccessProfile() *plugin.TValue[interface{}] {
	return &c.ApiServerAccessProfile
}

// mqlAzureSubscriptionAdvisorService for the azure.subscription.advisorService resource
type mqlAzureSubscriptionAdvisorService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAdvisorServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Recommendations plugin.TValue[[]interface{}]
	Scores plugin.TValue[[]interface{}]
	AverageScore plugin.TValue[float64]
}

// createAzureSubscriptionAdvisorService creates a new instance of this resource
func createAzureSubscriptionAdvisorService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAdvisorService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.advisorService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAdvisorService) MqlName() string {
	return "azure.subscription.advisorService"
}

func (c *mqlAzureSubscriptionAdvisorService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAdvisorService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionAdvisorService) GetRecommendations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Recommendations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.advisorService", c.__id, "recommendations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.recommendations()
	})
}

func (c *mqlAzureSubscriptionAdvisorService) GetScores() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Scores, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.advisorService", c.__id, "scores")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.scores()
	})
}

func (c *mqlAzureSubscriptionAdvisorService) GetAverageScore() *plugin.TValue[float64] {
	return plugin.GetOrCompute[float64](&c.AverageScore, func() (float64, error) {
		return c.averageScore()
	})
}

// mqlAzureSubscriptionAdvisorServiceRecommendation for the azure.subscription.advisorService.recommendation resource
type mqlAzureSubscriptionAdvisorServiceRecommendation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAdvisorServiceRecommendationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Category plugin.TValue[string]
	Risk plugin.TValue[string]
	Impact plugin.TValue[string]
	Description plugin.TValue[string]
	Remediation plugin.TValue[string]
	ImpactedResourceType plugin.TValue[string]
	ImpactedResource plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionAdvisorServiceRecommendation creates a new instance of this resource
func createAzureSubscriptionAdvisorServiceRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAdvisorServiceRecommendation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.advisorService.recommendation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) MqlName() string {
	return "azure.subscription.advisorService.recommendation"
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetCategory() *plugin.TValue[string] {
	return &c.Category
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetRisk() *plugin.TValue[string] {
	return &c.Risk
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetImpact() *plugin.TValue[string] {
	return &c.Impact
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetRemediation() *plugin.TValue[string] {
	return &c.Remediation
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetImpactedResourceType() *plugin.TValue[string] {
	return &c.ImpactedResourceType
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetImpactedResource() *plugin.TValue[string] {
	return &c.ImpactedResource
}

func (c *mqlAzureSubscriptionAdvisorServiceRecommendation) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionAdvisorServiceScore for the azure.subscription.advisorService.score resource
type mqlAzureSubscriptionAdvisorServiceScore struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAdvisorServiceScoreInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	CurrentScore plugin.TValue[*mqlAzureSubscriptionAdvisorServiceSecurityScore]
	TimeSeries plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAdvisorServiceScore creates a new instance of this resource
func createAzureSubscriptionAdvisorServiceScore(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAdvisorServiceScore{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.advisorService.score", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) MqlName() string {
	return "azure.subscription.advisorService.score"
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) GetCurrentScore() *plugin.TValue[*mqlAzureSubscriptionAdvisorServiceSecurityScore] {
	return &c.CurrentScore
}

func (c *mqlAzureSubscriptionAdvisorServiceScore) GetTimeSeries() *plugin.TValue[[]interface{}] {
	return &c.TimeSeries
}

// mqlAzureSubscriptionAdvisorServiceTimeSeries for the azure.subscription.advisorService.timeSeries resource
type mqlAzureSubscriptionAdvisorServiceTimeSeries struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAdvisorServiceTimeSeriesInternal it will be used here
	Id plugin.TValue[string]
	AggregationLevel plugin.TValue[string]
	Scores plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAdvisorServiceTimeSeries creates a new instance of this resource
func createAzureSubscriptionAdvisorServiceTimeSeries(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAdvisorServiceTimeSeries{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.advisorService.timeSeries", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAdvisorServiceTimeSeries) MqlName() string {
	return "azure.subscription.advisorService.timeSeries"
}

func (c *mqlAzureSubscriptionAdvisorServiceTimeSeries) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAdvisorServiceTimeSeries) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAdvisorServiceTimeSeries) GetAggregationLevel() *plugin.TValue[string] {
	return &c.AggregationLevel
}

func (c *mqlAzureSubscriptionAdvisorServiceTimeSeries) GetScores() *plugin.TValue[[]interface{}] {
	return &c.Scores
}

// mqlAzureSubscriptionAdvisorServiceSecurityScore for the azure.subscription.advisorService.securityScore resource
type mqlAzureSubscriptionAdvisorServiceSecurityScore struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAdvisorServiceSecurityScoreInternal it will be used here
	Id plugin.TValue[string]
	Score plugin.TValue[float64]
	Date plugin.TValue[*time.Time]
	PotentialScoreIncrease plugin.TValue[float64]
	ImpactedResourcesCount plugin.TValue[int64]
	CategoryCount plugin.TValue[int64]
	ConsumptionUnits plugin.TValue[float64]
}

// createAzureSubscriptionAdvisorServiceSecurityScore creates a new instance of this resource
func createAzureSubscriptionAdvisorServiceSecurityScore(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAdvisorServiceSecurityScore{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.advisorService.securityScore", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) MqlName() string {
	return "azure.subscription.advisorService.securityScore"
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetScore() *plugin.TValue[float64] {
	return &c.Score
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetDate() *plugin.TValue[*time.Time] {
	return &c.Date
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetPotentialScoreIncrease() *plugin.TValue[float64] {
	return &c.PotentialScoreIncrease
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetImpactedResourcesCount() *plugin.TValue[int64] {
	return &c.ImpactedResourcesCount
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetCategoryCount() *plugin.TValue[int64] {
	return &c.CategoryCount
}

func (c *mqlAzureSubscriptionAdvisorServiceSecurityScore) GetConsumptionUnits() *plugin.TValue[float64] {
	return &c.ConsumptionUnits
}

// mqlAzureSubscriptionPolicy for the azure.subscription.policy resource
type mqlAzureSubscriptionPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPolicyInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Assignments plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPolicy creates a new instance of this resource
func createAzureSubscriptionPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPolicy) MqlName() string {
	return "azure.subscription.policy"
}

func (c *mqlAzureSubscriptionPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPolicy) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionPolicy) GetAssignments() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Assignments, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.policy", c.__id, "assignments")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.assignments()
	})
}

// mqlAzureSubscriptionPolicyAssignment for the azure.subscription.policy.assignment resource
type mqlAzureSubscriptionPolicyAssignment struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPolicyAssignmentInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Scope plugin.TValue[string]
	Description plugin.TValue[string]
	EnforcementMode plugin.TValue[string]
}

// createAzureSubscriptionPolicyAssignment creates a new instance of this resource
func createAzureSubscriptionPolicyAssignment(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPolicyAssignment{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.policy.assignment", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPolicyAssignment) MqlName() string {
	return "azure.subscription.policy.assignment"
}

func (c *mqlAzureSubscriptionPolicyAssignment) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPolicyAssignment) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPolicyAssignment) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPolicyAssignment) GetScope() *plugin.TValue[string] {
	return &c.Scope
}

func (c *mqlAzureSubscriptionPolicyAssignment) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionPolicyAssignment) GetEnforcementMode() *plugin.TValue[string] {
	return &c.EnforcementMode
}

// mqlAzureSubscriptionIotService for the azure.subscription.iotService resource
type mqlAzureSubscriptionIotService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionIotServiceInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Hubs plugin.TValue[[]interface{}]
}

// createAzureSubscriptionIotService creates a new instance of this resource
func createAzureSubscriptionIotService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionIotService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.iotService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionIotService) MqlName() string {
	return "azure.subscription.iotService"
}

func (c *mqlAzureSubscriptionIotService) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionIotService) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionIotService) GetHubs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Hubs, func() ([]interface{}, error) {
		return c.hubs()
	})
}
