// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"azure": {
			// to override args, implement: initAzure(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzure,
		},
		"azure.subscription": {
			Init: initAzureSubscription,
			Create: createAzureSubscription,
		},
		"azure.subscription.resourcegroup": {
			// to override args, implement: initAzureSubscriptionResourcegroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionResourcegroup,
		},
		"azure.subscription.resource": {
			// to override args, implement: initAzureSubscriptionResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionResource,
		},
		"azure.subscription.compute": {
			Init: initAzureSubscriptionCompute,
			Create: createAzureSubscriptionCompute,
		},
		"azure.subscription.compute.vm": {
			Init: initAzureSubscriptionComputeVm,
			Create: createAzureSubscriptionComputeVm,
		},
		"azure.subscription.compute.disk": {
			// to override args, implement: initAzureSubscriptionComputeDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionComputeDisk,
		},
		"azure.subscription.network": {
			Init: initAzureSubscriptionNetwork,
			Create: createAzureSubscriptionNetwork,
		},
		"azure.subscription.network.interface": {
			// to override args, implement: initAzureSubscriptionNetworkInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkInterface,
		},
		"azure.subscription.network.ipAddress": {
			// to override args, implement: initAzureSubscriptionNetworkIpAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkIpAddress,
		},
		"azure.subscription.network.bastionHost": {
			// to override args, implement: initAzureSubscriptionNetworkBastionHost(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkBastionHost,
		},
		"azure.subscription.network.securityGroup": {
			Init: initAzureSubscriptionNetworkSecurityGroup,
			Create: createAzureSubscriptionNetworkSecurityGroup,
		},
		"azure.subscription.network.securityrule": {
			// to override args, implement: initAzureSubscriptionNetworkSecurityrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkSecurityrule,
		},
		"azure.subscription.network.watcher": {
			// to override args, implement: initAzureSubscriptionNetworkWatcher(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkWatcher,
		},
		"azure.subscription.network.watcher.flowlog": {
			// to override args, implement: initAzureSubscriptionNetworkWatcherFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionNetworkWatcherFlowlog,
		},
		"azure.subscription.storage": {
			Init: initAzureSubscriptionStorage,
			Create: createAzureSubscriptionStorage,
		},
		"azure.subscription.storage.account": {
			Init: initAzureSubscriptionStorageAccount,
			Create: createAzureSubscriptionStorageAccount,
		},
		"azure.subscription.storage.account.dataProtection": {
			// to override args, implement: initAzureSubscriptionStorageAccountDataProtection(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageAccountDataProtection,
		},
		"azure.subscription.storage.account.service.properties": {
			// to override args, implement: initAzureSubscriptionStorageAccountServiceProperties(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageAccountServiceProperties,
		},
		"azure.subscription.storage.account.service.properties.metrics": {
			// to override args, implement: initAzureSubscriptionStorageAccountServicePropertiesMetrics(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageAccountServicePropertiesMetrics,
		},
		"azure.subscription.storage.account.service.properties.retentionPolicy": {
			// to override args, implement: initAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy,
		},
		"azure.subscription.storage.account.service.properties.logging": {
			// to override args, implement: initAzureSubscriptionStorageAccountServicePropertiesLogging(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionStorageAccountServicePropertiesLogging,
		},
		"azure.subscription.storage.account.container": {
			Init: initAzureSubscriptionStorageAccountContainer,
			Create: createAzureSubscriptionStorageAccountContainer,
		},
		"azure.subscription.web": {
			Init: initAzureSubscriptionWeb,
			Create: createAzureSubscriptionWeb,
		},
		"azure.subscription.web.appsite": {
			// to override args, implement: initAzureSubscriptionWebAppsite(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebAppsite,
		},
		"azure.subscription.web.appsiteauthsettings": {
			// to override args, implement: initAzureSubscriptionWebAppsiteauthsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebAppsiteauthsettings,
		},
		"azure.subscription.web.appsiteconfig": {
			// to override args, implement: initAzureSubscriptionWebAppsiteconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionWebAppsiteconfig,
		},
		"azure.subscription.sql": {
			Init: initAzureSubscriptionSql,
			Create: createAzureSubscriptionSql,
		},
		"azure.subscription.sql.server": {
			Init: initAzureSubscriptionSqlServer,
			Create: createAzureSubscriptionSqlServer,
		},
		"azure.subscription.sql.server.vulnerabilityassessmentsettings": {
			// to override args, implement: initAzureSubscriptionSqlServerVulnerabilityassessmentsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServerVulnerabilityassessmentsettings,
		},
		"azure.subscription.sql.server.administrator": {
			// to override args, implement: initAzureSubscriptionSqlServerAdministrator(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlServerAdministrator,
		},
		"azure.subscription.sql.database": {
			// to override args, implement: initAzureSubscriptionSqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlDatabase,
		},
		"azure.subscription.sql.databaseusage": {
			// to override args, implement: initAzureSubscriptionSqlDatabaseusage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlDatabaseusage,
		},
		"azure.subscription.postgreSql": {
			Init: initAzureSubscriptionPostgreSql,
			Create: createAzureSubscriptionPostgreSql,
		},
		"azure.subscription.postgreSql.server": {
			Init: initAzureSubscriptionPostgreSqlServer,
			Create: createAzureSubscriptionPostgreSqlServer,
		},
		"azure.subscription.postgreSql.database": {
			// to override args, implement: initAzureSubscriptionPostgreSqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionPostgreSqlDatabase,
		},
		"azure.subscription.sql.configuration": {
			// to override args, implement: initAzureSubscriptionSqlConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlConfiguration,
		},
		"azure.subscription.sql.firewallrule": {
			// to override args, implement: initAzureSubscriptionSqlFirewallrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlFirewallrule,
		},
		"azure.subscription.sql.virtualNetworkRule": {
			// to override args, implement: initAzureSubscriptionSqlVirtualNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionSqlVirtualNetworkRule,
		},
		"azure.subscription.mySql": {
			Init: initAzureSubscriptionMySql,
			Create: createAzureSubscriptionMySql,
		},
		"azure.subscription.mySql.server": {
			Init: initAzureSubscriptionMySqlServer,
			Create: createAzureSubscriptionMySqlServer,
		},
		"azure.subscription.mySql.database": {
			// to override args, implement: initAzureSubscriptionMySqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMySqlDatabase,
		},
		"azure.subscription.mySql.flexibleServer": {
			// to override args, implement: initAzureSubscriptionMySqlFlexibleServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMySqlFlexibleServer,
		},
		"azure.subscription.mariaDb": {
			Init: initAzureSubscriptionMariaDb,
			Create: createAzureSubscriptionMariaDb,
		},
		"azure.subscription.mariaDb.server": {
			Init: initAzureSubscriptionMariaDbServer,
			Create: createAzureSubscriptionMariaDbServer,
		},
		"azure.subscription.mariaDb.database": {
			// to override args, implement: initAzureSubscriptionMariaDbDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMariaDbDatabase,
		},
		"azure.subscription.cosmosDb": {
			Init: initAzureSubscriptionCosmosDb,
			Create: createAzureSubscriptionCosmosDb,
		},
		"azure.subscription.cosmosDb.account": {
			// to override args, implement: initAzureSubscriptionCosmosDbAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionCosmosDbAccount,
		},
		"azure.subscription.keyVault": {
			Init: initAzureSubscriptionKeyVault,
			Create: createAzureSubscriptionKeyVault,
		},
		"azure.subscription.keyVault.vault": {
			Init: initAzureSubscriptionKeyVaultVault,
			Create: createAzureSubscriptionKeyVaultVault,
		},
		"azure.subscription.keyVault.key": {
			// to override args, implement: initAzureSubscriptionKeyVaultKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultKey,
		},
		"azure.subscription.keyVault.certificate": {
			// to override args, implement: initAzureSubscriptionKeyVaultCertificate(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultCertificate,
		},
		"azure.subscription.keyVault.secret": {
			// to override args, implement: initAzureSubscriptionKeyVaultSecret(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionKeyVaultSecret,
		},
		"azure.subscription.monitor": {
			Init: initAzureSubscriptionMonitor,
			Create: createAzureSubscriptionMonitor,
		},
		"azure.subscription.monitor.activityLog": {
			Init: initAzureSubscriptionMonitorActivityLog,
			Create: createAzureSubscriptionMonitorActivityLog,
		},
		"azure.subscription.monitor.applicationInsight": {
			// to override args, implement: initAzureSubscriptionMonitorApplicationInsight(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorApplicationInsight,
		},
		"azure.subscription.monitor.activityLog.alert": {
			// to override args, implement: initAzureSubscriptionMonitorActivityLogAlert(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorActivityLogAlert,
		},
		"azure.subscription.monitor.logprofile": {
			// to override args, implement: initAzureSubscriptionMonitorLogprofile(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorLogprofile,
		},
		"azure.subscription.monitor.diagnosticsetting": {
			// to override args, implement: initAzureSubscriptionMonitorDiagnosticsetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionMonitorDiagnosticsetting,
		},
		"azure.subscription.cloudDefender": {
			Init: initAzureSubscriptionCloudDefender,
			Create: createAzureSubscriptionCloudDefender,
		},
		"azure.subscription.cloudDefender.securityContact": {
			// to override args, implement: initAzureSubscriptionCloudDefenderSecurityContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionCloudDefenderSecurityContact,
		},
		"azure.subscription.authorization": {
			Init: initAzureSubscriptionAuthorization,
			Create: createAzureSubscriptionAuthorization,
		},
		"azure.subscription.authorization.roleDefinition": {
			// to override args, implement: initAzureSubscriptionAuthorizationRoleDefinition(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAuthorizationRoleDefinition,
		},
		"azure.subscription.authorization.roleDefinition.permission": {
			// to override args, implement: initAzureSubscriptionAuthorizationRoleDefinitionPermission(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAuthorizationRoleDefinitionPermission,
		},
		"azure.subscription.aks": {
			Init: initAzureSubscriptionAks,
			Create: createAzureSubscriptionAks,
		},
		"azure.subscription.aks.cluster": {
			// to override args, implement: initAzureSubscriptionAksCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAzureSubscriptionAksCluster,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"azure.subscription.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.tenantId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetTenantId()).ToDataRes(types.String)
	},
	"azure.subscription.managedByTenants": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetManagedByTenants()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetState()).ToDataRes(types.String)
	},
	"azure.subscription.authorizationSource": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetAuthorizationSource()).ToDataRes(types.String)
	},
	"azure.subscription.subscriptionsPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetSubscriptionsPolicies()).ToDataRes(types.Dict)
	},
	"azure.subscription.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetResources()).ToDataRes(types.Array(types.Resource("azure.subscription.resource")))
	},
	"azure.subscription.resourceGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscription).GetResourceGroups()).ToDataRes(types.Array(types.Resource("azure.subscription.resourcegroup")))
	},
	"azure.subscription.resourcegroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.resourcegroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.resourcegroup.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResourcegroup).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.resource.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.resource.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.resource.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.resource.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.resource.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.resource.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.resource.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.resource.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.plan": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetPlan()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.resource.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.resource.createdTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetCreatedTime()).ToDataRes(types.Time)
	},
	"azure.subscription.resource.changedTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionResource).GetChangedTime()).ToDataRes(types.Time)
	},
	"azure.subscription.compute.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCompute).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.compute.vms": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCompute).GetVms()).ToDataRes(types.Array(types.Resource("azure.subscription.compute.vm")))
	},
	"azure.subscription.compute.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCompute).GetDisks()).ToDataRes(types.Array(types.Resource("azure.subscription.compute.disk")))
	},
	"azure.subscription.compute.vm.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.compute.vm.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.compute.vm.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.compute.vm.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.compute.vm.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.compute.vm.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.compute.vm.extensions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetExtensions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.compute.vm.osDisk": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetOsDisk()).ToDataRes(types.Resource("azure.subscription.compute.disk"))
	},
	"azure.subscription.compute.vm.dataDisks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetDataDisks()).ToDataRes(types.Array(types.Resource("azure.subscription.compute.disk")))
	},
	"azure.subscription.compute.vm.publicIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeVm).GetPublicIpAddresses()).ToDataRes(types.Array(types.Resource("azure.subscription.network.ipAddress")))
	},
	"azure.subscription.compute.disk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.compute.disk.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.compute.disk.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.compute.disk.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.compute.disk.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.compute.disk.managedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetManagedBy()).ToDataRes(types.String)
	},
	"azure.subscription.compute.disk.managedByExtended": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetManagedByExtended()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.compute.disk.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetZones()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.compute.disk.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.compute.disk.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionComputeDisk).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.network.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetInterfaces()).ToDataRes(types.Array(types.Resource("azure.subscription.network.interface")))
	},
	"azure.subscription.network.securityGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetSecurityGroups()).ToDataRes(types.Array(types.Resource("azure.subscription.network.securityGroup")))
	},
	"azure.subscription.network.watchers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetWatchers()).ToDataRes(types.Array(types.Resource("azure.subscription.network.watcher")))
	},
	"azure.subscription.network.publicIpAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetPublicIpAddresses()).ToDataRes(types.Array(types.Resource("azure.subscription.network.ipAddress")))
	},
	"azure.subscription.network.bastionHosts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetwork).GetBastionHosts()).ToDataRes(types.Array(types.Resource("azure.subscription.network.bastionHost")))
	},
	"azure.subscription.network.interface.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.interface.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.interface.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.interface.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.interface.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.interface.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.network.interface.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.interface.vm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkInterface).GetVm()).ToDataRes(types.Resource("azure.subscription.compute.vm"))
	},
	"azure.subscription.network.ipAddress.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.ipAddress.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.ipAddress.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.ipAddress.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.ipAddress.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.network.ipAddress.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkIpAddress).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.bastionHost.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.bastionHost.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.bastionHost.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.bastionHost.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.bastionHost.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.bastionHost.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.bastionHost.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkBastionHost).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.securityGroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityGroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityGroup.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityGroup.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.securityGroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityGroup.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityGroup.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.securityGroup.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetInterfaces()).ToDataRes(types.Array(types.Resource("azure.subscription.network.interface")))
	},
	"azure.subscription.network.securityGroup.securityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetSecurityRules()).ToDataRes(types.Array(types.Resource("azure.subscription.network.securityrule")))
	},
	"azure.subscription.network.securityGroup.defaultSecurityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityGroup).GetDefaultSecurityRules()).ToDataRes(types.Array(types.Resource("azure.subscription.network.securityrule")))
	},
	"azure.subscription.network.securityrule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityrule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityrule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityrule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityrule.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityrule).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.network.securityrule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityrule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.securityrule.destinationPortRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkSecurityrule).GetDestinationPortRange()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.network.watcher.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.watcher.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.watcher.flowLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetFlowLogs()).ToDataRes(types.Array(types.Resource("azure.subscription.network.watcher.flowlog")))
	},
	"azure.subscription.network.watcher.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcher).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.network.watcher.flowlog.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.network.watcher.flowlog.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.targetResourceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetTargetResourceId()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.targetResourceGuid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetTargetResourceGuid()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetVersion()).ToDataRes(types.Int)
	},
	"azure.subscription.network.watcher.flowlog.format": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetFormat()).ToDataRes(types.String)
	},
	"azure.subscription.network.watcher.flowlog.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetRetentionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.network.watcher.flowlog.analytics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).GetAnalytics()).ToDataRes(types.Dict)
	},
	"azure.subscription.storage.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorage).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.accounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorage).GetAccounts()).ToDataRes(types.Array(types.Resource("azure.subscription.storage.account")))
	},
	"azure.subscription.storage.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.storage.account.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.storage.account.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.storage.account.sku": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetSku()).ToDataRes(types.Dict)
	},
	"azure.subscription.storage.account.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetContainers()).ToDataRes(types.Array(types.Resource("azure.subscription.storage.account.container")))
	},
	"azure.subscription.storage.account.queueProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetQueueProperties()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties"))
	},
	"azure.subscription.storage.account.tableProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetTableProperties()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties"))
	},
	"azure.subscription.storage.account.blobProperties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetBlobProperties()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties"))
	},
	"azure.subscription.storage.account.dataProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccount).GetDataProtection()).ToDataRes(types.Resource("azure.subscription.storage.account.dataProtection"))
	},
	"azure.subscription.storage.account.dataProtection.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountDataProtection).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.dataProtection.blobSoftDeletionEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountDataProtection).GetBlobSoftDeletionEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.dataProtection.blobRetentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountDataProtection).GetBlobRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storage.account.dataProtection.containerSoftDeletionEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountDataProtection).GetContainerSoftDeletionEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.dataProtection.containerRetentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountDataProtection).GetContainerRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storage.account.service.properties.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServiceProperties).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.hourMetrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServiceProperties).GetHourMetrics()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties.metrics"))
	},
	"azure.subscription.storage.account.service.properties.minuteMetrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServiceProperties).GetMinuteMetrics()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties.metrics"))
	},
	"azure.subscription.storage.account.service.properties.logging": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServiceProperties).GetLogging()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties.logging"))
	},
	"azure.subscription.storage.account.service.properties.metrics.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.metrics.includeAPIs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).GetIncludeAPIs()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.metrics.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).GetRetentionPolicy()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties.retentionPolicy"))
	},
	"azure.subscription.storage.account.service.properties.metrics.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.metrics.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.retentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).GetRetentionDays()).ToDataRes(types.Int)
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.logging.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.logging.delete": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetDelete()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.logging.read": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetRead()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.logging.write": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetWrite()).ToDataRes(types.Bool)
	},
	"azure.subscription.storage.account.service.properties.logging.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.service.properties.logging.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).GetRetentionPolicy()).ToDataRes(types.Resource("azure.subscription.storage.account.service.properties.retentionPolicy"))
	},
	"azure.subscription.storage.account.container.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountContainer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.container.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountContainer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.container.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountContainer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.container.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountContainer).GetEtag()).ToDataRes(types.String)
	},
	"azure.subscription.storage.account.container.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionStorageAccountContainer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWeb).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.web.apps": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWeb).GetApps()).ToDataRes(types.Array(types.Resource("azure.subscription.web.appsite")))
	},
	"azure.subscription.web.availableRuntimes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWeb).GetAvailableRuntimes()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.web.appsite.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsite.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsite.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsite.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsite.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsite.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.web.appsite.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsite.identity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetIdentity()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsite.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetConfiguration()).ToDataRes(types.Resource("azure.subscription.web.appsiteconfig"))
	},
	"azure.subscription.web.appsite.authenticationSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetAuthenticationSettings()).ToDataRes(types.Resource("azure.subscription.web.appsiteauthsettings"))
	},
	"azure.subscription.web.appsite.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetMetadata()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsite.applicationSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetApplicationSettings()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsite.connectionSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetConnectionSettings()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsite.stack": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsite).GetStack()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsiteauthsettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteauthsettings).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteauthsettings.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteauthsettings).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteauthsettings.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteauthsettings).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteauthsettings.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteauthsettings).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteauthsettings.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteauthsettings).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.web.appsiteconfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteconfig).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteconfig.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteconfig).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteconfig.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteconfig).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteconfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteconfig).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.web.appsiteconfig.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionWebAppsiteconfig).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSql).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSql).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.server")))
	},
	"azure.subscription.sql.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.sql.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.database")))
	},
	"azure.subscription.sql.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.firewallrule")))
	},
	"azure.subscription.sql.server.azureAdAdministrators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetAzureAdAdministrators()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.server.administrator")))
	},
	"azure.subscription.sql.server.connectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetConnectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.auditingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetAuditingPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.securityAlertPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetSecurityAlertPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.encryptionProtector": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetEncryptionProtector()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.threatDetectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetThreatDetectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.server.vulnerabilityAssessmentSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetVulnerabilityAssessmentSettings()).ToDataRes(types.Resource("azure.subscription.sql.server.vulnerabilityassessmentsettings"))
	},
	"azure.subscription.sql.server.virtualNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServer).GetVirtualNetworkRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.virtualNetworkRule")))
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageContainerPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetStorageContainerPath()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageAccountAccessKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetStorageAccountAccessKey()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageContainerSasKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetStorageContainerSasKey()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.recurringScanEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetRecurringScanEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.recurringScanEmails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetRecurringScanEmails()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.mailSubscriptionAdmins": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).GetMailSubscriptionAdmins()).ToDataRes(types.Bool)
	},
	"azure.subscription.sql.server.administrator.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.administratorType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetAdministratorType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.login": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetLogin()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.sid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetSid()).ToDataRes(types.String)
	},
	"azure.subscription.sql.server.administrator.tenantId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlServerAdministrator).GetTenantId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.creationDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetCreationDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sql.database.databaseId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetDatabaseId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.earliestRestoreDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetEarliestRestoreDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sql.database.createMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetCreateMode()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.sourceDatabaseId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetSourceDatabaseId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.sourceDatabaseDeletionDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetSourceDatabaseDeletionDate()).ToDataRes(types.Time)
	},
	"azure.subscription.sql.database.restorePointInTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetRestorePointInTime()).ToDataRes(types.Time)
	},
	"azure.subscription.sql.database.recoveryServicesRecoveryPointResourceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetRecoveryServicesRecoveryPointResourceId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.edition": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetEdition()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.maxSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetMaxSizeBytes()).ToDataRes(types.Int)
	},
	"azure.subscription.sql.database.requestedServiceObjectiveName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetRequestedServiceObjectiveName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.serviceLevelObjective": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetServiceLevelObjective()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetStatus()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.elasticPoolName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetElasticPoolName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.defaultSecondaryLocation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetDefaultSecondaryLocation()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.failoverGroupId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetFailoverGroupId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.readScale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetReadScale()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.sampleName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetSampleName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.database.zoneRedundant": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetZoneRedundant()).ToDataRes(types.Bool)
	},
	"azure.subscription.sql.database.transparentDataEncryption": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetTransparentDataEncryption()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.database.advisor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetAdvisor()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.sql.database.threatDetectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetThreatDetectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.database.connectionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetConnectionPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.database.auditingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetAuditingPolicy()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.database.usage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabase).GetUsage()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.databaseusage")))
	},
	"azure.subscription.sql.databaseusage.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.databaseusage.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.databaseusage.resourceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetResourceName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.databaseusage.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetDisplayName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.databaseusage.currentValue": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetCurrentValue()).ToDataRes(types.Float)
	},
	"azure.subscription.sql.databaseusage.limit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetLimit()).ToDataRes(types.Float)
	},
	"azure.subscription.sql.databaseusage.unit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlDatabaseusage).GetUnit()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSql).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSql).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSql.server")))
	},
	"azure.subscription.postgreSql.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.postgreSql.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.postgreSql.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.configuration")))
	},
	"azure.subscription.postgreSql.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.postgreSql.database")))
	},
	"azure.subscription.postgreSql.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.firewallrule")))
	},
	"azure.subscription.postgreSql.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.postgreSql.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionPostgreSqlDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetValue()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.defaultValue": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetDefaultValue()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.dataType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetDataType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.allowedValues": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetAllowedValues()).ToDataRes(types.String)
	},
	"azure.subscription.sql.configuration.source": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlConfiguration).GetSource()).ToDataRes(types.String)
	},
	"azure.subscription.sql.firewallrule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlFirewallrule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.firewallrule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlFirewallrule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.firewallrule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlFirewallrule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.firewallrule.startIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlFirewallrule).GetStartIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.sql.firewallrule.endIpAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlFirewallrule).GetEndIpAddress()).ToDataRes(types.String)
	},
	"azure.subscription.sql.virtualNetworkRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.sql.virtualNetworkRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.sql.virtualNetworkRule.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.sql.virtualNetworkRule.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.sql.virtualNetworkRule.virtualNetworkSubnetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).GetVirtualNetworkSubnetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySql).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySql).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mySql.server")))
	},
	"azure.subscription.mySql.flexibleServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySql).GetFlexibleServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mySql.flexibleServer")))
	},
	"azure.subscription.mySql.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mySql.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mySql.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.configuration")))
	},
	"azure.subscription.mySql.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mySql.database")))
	},
	"azure.subscription.mySql.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.firewallrule")))
	},
	"azure.subscription.mySql.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.flexibleServer.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.flexibleServer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.flexibleServer.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.flexibleServer.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mySql.flexibleServer.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mySql.flexibleServer.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mySql.flexibleServer.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.configuration")))
	},
	"azure.subscription.mySql.flexibleServer.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mySql.database")))
	},
	"azure.subscription.mySql.flexibleServer.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMySqlFlexibleServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.firewallrule")))
	},
	"azure.subscription.mariaDb.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDb).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDb).GetServers()).ToDataRes(types.Array(types.Resource("azure.subscription.mariaDb.server")))
	},
	"azure.subscription.mariaDb.server.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.server.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.server.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.server.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.mariaDb.server.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.server.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.mariaDb.server.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetConfiguration()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.configuration")))
	},
	"azure.subscription.mariaDb.server.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetDatabases()).ToDataRes(types.Array(types.Resource("azure.subscription.mariaDb.database")))
	},
	"azure.subscription.mariaDb.server.firewallRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbServer).GetFirewallRules()).ToDataRes(types.Array(types.Resource("azure.subscription.sql.firewallrule")))
	},
	"azure.subscription.mariaDb.database.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbDatabase).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbDatabase).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.database.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbDatabase).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbDatabase).GetCharset()).ToDataRes(types.String)
	},
	"azure.subscription.mariaDb.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMariaDbDatabase).GetCollation()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDb).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.accounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDb).GetAccounts()).ToDataRes(types.Array(types.Resource("azure.subscription.cosmosDb.account")))
	},
	"azure.subscription.cosmosDb.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.account.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.cosmosDb.account.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.account.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.cosmosDb.account.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.cosmosDb.account.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCosmosDbAccount).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVault).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vaults": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVault).GetVaults()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.vault")))
	},
	"azure.subscription.keyVault.vault.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vault.vaultName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetVaultName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vault.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vault.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vault.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVault.vault.vaultUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetVaultUri()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.vault.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.keyVault.vault.keys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetKeys()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.key")))
	},
	"azure.subscription.keyVault.vault.certificates": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetCertificates()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.certificate")))
	},
	"azure.subscription.keyVault.vault.secrets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetSecrets()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.secret")))
	},
	"azure.subscription.keyVault.vault.diagnosticSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultVault).GetDiagnosticSettings()).ToDataRes(types.Array(types.Resource("azure.subscription.monitor.diagnosticsetting")))
	},
	"azure.subscription.keyVault.key.kid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetKid()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.key.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVault.key.managed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetManaged()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVault.key.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVault.key.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.key.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.key.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.key.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.key.recoveryLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetRecoveryLevel()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.key.keyName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetKeyName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.key.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.key.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultKey).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.key")))
	},
	"azure.subscription.keyVault.certificate.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.certificate.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVault.certificate.x5t": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetX5t()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.certificate.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVault.certificate.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.certificate.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.certificate.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.certificate.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.certificate.recoveryLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetRecoveryLevel()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.certificate.certName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetCertName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.certificate.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.certificate.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultCertificate).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.certificate")))
	},
	"azure.subscription.keyVault.secret.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.secret.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.keyVault.secret.contentType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetContentType()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.secret.managed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetManaged()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVault.secret.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.keyVault.secret.notBefore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetNotBefore()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.secret.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetExpires()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.secret.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetCreated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.secret.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetUpdated()).ToDataRes(types.Time)
	},
	"azure.subscription.keyVault.secret.secretName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetSecretName()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.secret.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetVersion()).ToDataRes(types.String)
	},
	"azure.subscription.keyVault.secret.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionKeyVaultSecret).GetVersions()).ToDataRes(types.Array(types.Resource("azure.subscription.keyVault.secret")))
	},
	"azure.subscription.monitor.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitor).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitor).GetLogProfiles()).ToDataRes(types.Array(types.Resource("azure.subscription.monitor.logprofile")))
	},
	"azure.subscription.monitor.diagnosticSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitor).GetDiagnosticSettings()).ToDataRes(types.Array(types.Resource("azure.subscription.monitor.diagnosticsetting")))
	},
	"azure.subscription.monitor.applicationInsights": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitor).GetApplicationInsights()).ToDataRes(types.Array(types.Resource("azure.subscription.monitor.applicationInsight")))
	},
	"azure.subscription.monitor.activityLog.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLog).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alerts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLog).GetAlerts()).ToDataRes(types.Array(types.Resource("azure.subscription.monitor.activityLog.alert")))
	},
	"azure.subscription.monitor.applicationInsight.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.applicationInsight.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.applicationInsight.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitor.applicationInsight.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitor.applicationInsight.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.applicationInsight.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetKind()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.applicationInsight.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorApplicationInsight).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.conditions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetConditions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.monitor.activityLog.alert.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.activityLog.alert.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitor.activityLog.alert.actions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetActions()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.monitor.activityLog.alert.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorActivityLogAlert).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.monitor.logprofile.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logprofile.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logprofile.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logprofile.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logprofile.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.monitor.logprofile.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitor.logprofile.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.logprofile.storageAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorLogprofile).GetStorageAccount()).ToDataRes(types.Resource("azure.subscription.storage.account"))
	},
	"azure.subscription.monitor.diagnosticsetting.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.diagnosticsetting.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.diagnosticsetting.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetType()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.diagnosticsetting.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetProperties()).ToDataRes(types.Dict)
	},
	"azure.subscription.monitor.diagnosticsetting.storageAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetStorageAccountId()).ToDataRes(types.String)
	},
	"azure.subscription.monitor.diagnosticsetting.storageAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).GetStorageAccount()).ToDataRes(types.Resource("azure.subscription.storage.account"))
	},
	"azure.subscription.cloudDefender.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefender).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefender.monitoringAgentAutoProvision": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefender).GetMonitoringAgentAutoProvision()).ToDataRes(types.Bool)
	},
	"azure.subscription.cloudDefender.defenderForServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefender).GetDefenderForServers()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefender.defenderForContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefender).GetDefenderForContainers()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefender.securityContacts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefender).GetSecurityContacts()).ToDataRes(types.Array(types.Resource("azure.subscription.cloudDefender.securityContact")))
	},
	"azure.subscription.cloudDefender.securityContact.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefender.securityContact.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.cloudDefender.securityContact.emails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).GetEmails()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.cloudDefender.securityContact.alertNotifications": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).GetAlertNotifications()).ToDataRes(types.Dict)
	},
	"azure.subscription.cloudDefender.securityContact.notificationsByRole": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).GetNotificationsByRole()).ToDataRes(types.Dict)
	},
	"azure.subscription.authorization.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorization).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.authorization.roleDefinitions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorization).GetRoleDefinitions()).ToDataRes(types.Array(types.Resource("azure.subscription.authorization.roleDefinition")))
	},
	"azure.subscription.authorization.roleDefinition.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.authorization.roleDefinition.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetDescription()).ToDataRes(types.String)
	},
	"azure.subscription.authorization.roleDefinition.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.authorization.roleDefinition.isCustom": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetIsCustom()).ToDataRes(types.Bool)
	},
	"azure.subscription.authorization.roleDefinition.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorization.roleDefinition.permissions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).GetPermissions()).ToDataRes(types.Array(types.Resource("azure.subscription.authorization.roleDefinition.permission")))
	},
	"azure.subscription.authorization.roleDefinition.permission.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.authorization.roleDefinition.permission.allowedActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).GetAllowedActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorization.roleDefinition.permission.deniedActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).GetDeniedActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorization.roleDefinition.permission.allowedDataActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).GetAllowedDataActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.authorization.roleDefinition.permission.deniedDataActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).GetDeniedDataActions()).ToDataRes(types.Array(types.String))
	},
	"azure.subscription.aks.subscriptionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAks).GetSubscriptionId()).ToDataRes(types.String)
	},
	"azure.subscription.aks.clusters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAks).GetClusters()).ToDataRes(types.Array(types.Resource("azure.subscription.aks.cluster")))
	},
	"azure.subscription.aks.cluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetId()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetName()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetLocation()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.kubernetesVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetKubernetesVersion()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.provisioningState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetProvisioningState()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.powerState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetPowerState()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"azure.subscription.aks.cluster.nodeResourceGroup": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetNodeResourceGroup()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetCreatedAt()).ToDataRes(types.Time)
	},
	"azure.subscription.aks.cluster.rbacEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetRbacEnabled()).ToDataRes(types.Bool)
	},
	"azure.subscription.aks.cluster.fqdn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetFqdn()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.dnsPrefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetDnsPrefix()).ToDataRes(types.String)
	},
	"azure.subscription.aks.cluster.storageProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetStorageProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.workloadAutoScalerProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetWorkloadAutoScalerProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.securityProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetSecurityProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.podIdentityProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetPodIdentityProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.networkProfile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetNetworkProfile()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.httpProxyConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetHttpProxyConfig()).ToDataRes(types.Dict)
	},
	"azure.subscription.aks.cluster.addonProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetAddonProfiles()).ToDataRes(types.Array(types.Dict))
	},
	"azure.subscription.aks.cluster.agentPoolProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAzureSubscriptionAksCluster).GetAgentPoolProfiles()).ToDataRes(types.Array(types.Dict))
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"azure.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzure).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscription).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.tenantId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).TenantId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.managedByTenants": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).ManagedByTenants, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorizationSource": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).AuthorizationSource, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.subscriptionsPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).SubscriptionsPolicies, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resourceGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscription).ResourceGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionResourcegroup).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.resourcegroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resourcegroup.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResourcegroup).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionResource).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.resource.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.plan": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Plan, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.createdTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).CreatedTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.resource.changedTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionResource).ChangedTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCompute).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.compute.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCompute).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vms": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCompute).Vms, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCompute).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionComputeVm).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.compute.vm.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.extensions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).Extensions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.osDisk": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).OsDisk, ok = plugin.RawToTValue[*mqlAzureSubscriptionComputeDisk](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.dataDisks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).DataDisks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.vm.publicIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeVm).PublicIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionComputeDisk).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.compute.disk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.managedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).ManagedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.managedByExtended": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).ManagedByExtended, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.compute.disk.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionComputeDisk).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetwork).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).SecurityGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watchers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).Watchers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.publicIpAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).PublicIpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHosts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetwork).BastionHosts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkInterface).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.interface.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.interface.vm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkInterface).Vm, ok = plugin.RawToTValue[*mqlAzureSubscriptionComputeVm](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkIpAddress).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.ipAddress.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.ipAddress.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkIpAddress).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkBastionHost).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.bastionHost.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.bastionHost.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkBastionHost).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkSecurityGroup).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.securityGroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.securityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).SecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityGroup.defaultSecurityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityGroup).DefaultSecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityrule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkSecurityrule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.securityrule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityrule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityrule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityrule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityrule.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityrule).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityrule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityrule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.securityrule.destinationPortRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkSecurityrule).DestinationPortRange, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkWatcher).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.watcher.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).FlowLogs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcher).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.network.watcher.flowlog.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.targetResourceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).TargetResourceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.targetResourceGuid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).TargetResourceGuid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Version, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.format": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Format, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).RetentionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.network.watcher.flowlog.analytics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionNetworkWatcherFlowlog).Analytics, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorage).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorage).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.accounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorage).Accounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccount).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.sku": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Sku, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.queueProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).QueueProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.tableProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).TableProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.blobProperties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).BlobProperties, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServiceProperties](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccount).DataProtection, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountDataProtection](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountDataProtection).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.dataProtection.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountDataProtection).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection.blobSoftDeletionEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountDataProtection).BlobSoftDeletionEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection.blobRetentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountDataProtection).BlobRetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection.containerSoftDeletionEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountDataProtection).ContainerSoftDeletionEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.dataProtection.containerRetentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountDataProtection).ContainerRetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountServiceProperties).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.service.properties.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServiceProperties).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.hourMetrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServiceProperties).HourMetrics, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.minuteMetrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServiceProperties).MinuteMetrics, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServiceProperties).Logging, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServicePropertiesLogging](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.metrics.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.service.properties.metrics.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.metrics.includeAPIs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).IncludeAPIs, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.metrics.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).RetentionPolicy, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.metrics.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.metrics.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.service.properties.retentionPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.retentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).RetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.retentionPolicy.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.service.properties.logging.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.delete": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).Delete, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.read": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).Read, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.write": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).Write, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.service.properties.logging.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountServicePropertiesLogging).RetentionPolicy, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.container.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionStorageAccountContainer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.storage.account.container.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountContainer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.container.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.container.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountContainer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.container.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountContainer).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.storage.account.container.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionStorageAccountContainer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWeb).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.web.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWeb).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.apps": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWeb).Apps, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.availableRuntimes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWeb).AvailableRuntimes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebAppsite).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.web.appsite.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.identity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Identity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Configuration, ok = plugin.RawToTValue[*mqlAzureSubscriptionWebAppsiteconfig](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.authenticationSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).AuthenticationSettings, ok = plugin.RawToTValue[*mqlAzureSubscriptionWebAppsiteauthsettings](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Metadata, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.applicationSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).ApplicationSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.connectionSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).ConnectionSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsite.stack": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsite).Stack, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteauthsettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebAppsiteauthsettings).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.web.appsiteauthsettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteauthsettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteauthsettings.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteauthsettings).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteauthsettings.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteauthsettings).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteauthsettings.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteauthsettings).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteauthsettings.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteauthsettings).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteconfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionWebAppsiteconfig).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.web.appsiteconfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteconfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteconfig.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteconfig).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteconfig.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteconfig).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteconfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteconfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.web.appsiteconfig.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionWebAppsiteconfig).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSql).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSql).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSql).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.azureAdAdministrators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).AzureAdAdministrators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.connectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).ConnectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.auditingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).AuditingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.securityAlertPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).SecurityAlertPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.encryptionProtector": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).EncryptionProtector, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.threatDetectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).ThreatDetectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityAssessmentSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).VulnerabilityAssessmentSettings, ok = plugin.RawToTValue[*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.virtualNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServer).VirtualNetworkRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageContainerPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).StorageContainerPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageAccountAccessKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).StorageAccountAccessKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.storageContainerSasKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).StorageContainerSasKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.recurringScanEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).RecurringScanEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.recurringScanEmails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).RecurringScanEmails, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.vulnerabilityassessmentsettings.mailSubscriptionAdmins": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings).MailSubscriptionAdmins, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlServerAdministrator).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.server.administrator.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.administratorType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).AdministratorType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.login": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).Login, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.sid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).Sid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.server.administrator.tenantId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlServerAdministrator).TenantId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.creationDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).CreationDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.databaseId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).DatabaseId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.earliestRestoreDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).EarliestRestoreDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.createMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).CreateMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.sourceDatabaseId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).SourceDatabaseId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.sourceDatabaseDeletionDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).SourceDatabaseDeletionDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.restorePointInTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).RestorePointInTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.recoveryServicesRecoveryPointResourceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).RecoveryServicesRecoveryPointResourceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.edition": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Edition, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.maxSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).MaxSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.requestedServiceObjectiveName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).RequestedServiceObjectiveName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.serviceLevelObjective": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ServiceLevelObjective, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.elasticPoolName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ElasticPoolName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.defaultSecondaryLocation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).DefaultSecondaryLocation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.failoverGroupId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).FailoverGroupId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.readScale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ReadScale, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.sampleName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).SampleName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.zoneRedundant": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ZoneRedundant, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.transparentDataEncryption": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).TransparentDataEncryption, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.advisor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Advisor, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.threatDetectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ThreatDetectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.connectionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).ConnectionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.auditingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).AuditingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.database.usage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabase).Usage, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlDatabaseusage).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.databaseusage.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.resourceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).ResourceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.currentValue": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).CurrentValue, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.limit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).Limit, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.databaseusage.unit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlDatabaseusage).Unit, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSql).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSql.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSql).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSql).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSql.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionPostgreSqlDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.postgreSql.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.postgreSql.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionPostgreSqlDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlConfiguration).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.configuration.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.defaultValue": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).DefaultValue, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.dataType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).DataType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.allowedValues": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).AllowedValues, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.configuration.source": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlConfiguration).Source, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.firewallrule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlFirewallrule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.firewallrule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlFirewallrule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.firewallrule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlFirewallrule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.firewallrule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlFirewallrule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.firewallrule.startIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlFirewallrule).StartIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.firewallrule.endIpAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlFirewallrule).EndIpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.virtualNetworkRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.sql.virtualNetworkRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.virtualNetworkRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.virtualNetworkRule.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.virtualNetworkRule.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.sql.virtualNetworkRule.virtualNetworkSubnetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionSqlVirtualNetworkRule).VirtualNetworkSubnetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySql).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySql.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySql).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySql).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySql).FlexibleServers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySql.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySql.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMySqlFlexibleServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mySql.flexibleServer.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mySql.flexibleServer.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMySqlFlexibleServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDb).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDb.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDb).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDb).Servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDbServer).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDb.server.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Configuration, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.server.firewallRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbServer).FirewallRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMariaDbDatabase).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.mariaDb.database.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbDatabase).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.database.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbDatabase).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.mariaDb.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMariaDbDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCosmosDb).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cosmosDb.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDb).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.accounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDb).Accounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCosmosDbAccount).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cosmosDb.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cosmosDb.account.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCosmosDbAccount).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVault).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVault.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVault).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vaults": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVault).Vaults, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultVault).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVault.vault.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.vaultName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).VaultName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.vaultUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).VaultUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.keys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Keys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.certificates": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Certificates, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.secrets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).Secrets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.vault.diagnosticSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultVault).DiagnosticSettings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultKey).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVault.key.kid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Kid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.managed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Managed, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.recoveryLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).RecoveryLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.keyName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).KeyName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.key.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultKey).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultCertificate).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVault.certificate.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.x5t": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).X5t, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.recoveryLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).RecoveryLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.certName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).CertName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.certificate.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultCertificate).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionKeyVaultSecret).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.keyVault.secret.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.contentType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).ContentType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.managed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Managed, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.notBefore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).NotBefore, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.secretName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).SecretName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.keyVault.secret.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionKeyVaultSecret).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitor).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitor).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitor).LogProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitor).DiagnosticSettings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsights": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitor).ApplicationInsights, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorActivityLog).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.activityLog.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLog).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alerts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLog).Alerts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorApplicationInsight).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.applicationInsight.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.applicationInsight.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorApplicationInsight).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorActivityLogAlert).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.activityLog.alert.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.conditions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Conditions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.actions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Actions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.activityLog.alert.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorActivityLogAlert).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorLogprofile).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.logprofile.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.logprofile.storageAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorLogprofile).StorageAccount, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccount](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.monitor.diagnosticsetting.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).Properties, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.storageAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).StorageAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.monitor.diagnosticsetting.storageAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionMonitorDiagnosticsetting).StorageAccount, ok = plugin.RawToTValue[*mqlAzureSubscriptionStorageAccount](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCloudDefender).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cloudDefender.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefender).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.monitoringAgentAutoProvision": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefender).MonitoringAgentAutoProvision, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.defenderForServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefender).DefenderForServers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.defenderForContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefender).DefenderForContainers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContacts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefender).SecurityContacts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContact.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.cloudDefender.securityContact.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContact.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContact.emails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).Emails, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContact.alertNotifications": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).AlertNotifications, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.cloudDefender.securityContact.notificationsByRole": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionCloudDefenderSecurityContact).NotificationsByRole, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorization).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorization.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorization).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinitions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorization).RoleDefinitions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorization.roleDefinition.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.isCustom": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).IsCustom, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permissions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinition).Permissions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permission.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.authorization.roleDefinition.permission.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permission.allowedActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).AllowedActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permission.deniedActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).DeniedActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permission.allowedDataActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).AllowedDataActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.authorization.roleDefinition.permission.deniedDataActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAuthorizationRoleDefinitionPermission).DeniedDataActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAks).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.aks.subscriptionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAks).SubscriptionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.clusters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAks).Clusters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAzureSubscriptionAksCluster).__id, ok = v.Value.(string)
			return
		},
	"azure.subscription.aks.cluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.kubernetesVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).KubernetesVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.provisioningState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).ProvisioningState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.powerState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).PowerState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.nodeResourceGroup": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).NodeResourceGroup, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.rbacEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).RbacEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.fqdn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).Fqdn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.dnsPrefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).DnsPrefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.storageProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).StorageProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.workloadAutoScalerProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).WorkloadAutoScalerProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.securityProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).SecurityProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.podIdentityProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).PodIdentityProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.networkProfile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).NetworkProfile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.httpProxyConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).HttpProxyConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.addonProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).AddonProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"azure.subscription.aks.cluster.agentPoolProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAzureSubscriptionAksCluster).AgentPoolProfiles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[azure] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[azure] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlAzure for the azure resource
type mqlAzure struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureInternal it will be used here
}

// createAzure creates a new instance of this resource
func createAzure(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzure{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzure) MqlName() string {
	return "azure"
}

func (c *mqlAzure) MqlID() string {
	return c.__id
}

// mqlAzureSubscription for the azure.subscription resource
type mqlAzureSubscription struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	SubscriptionId plugin.TValue[string]
	TenantId plugin.TValue[string]
	ManagedByTenants plugin.TValue[[]interface{}]
	Tags plugin.TValue[map[string]interface{}]
	State plugin.TValue[string]
	AuthorizationSource plugin.TValue[string]
	SubscriptionsPolicies plugin.TValue[interface{}]
	Resources plugin.TValue[[]interface{}]
	ResourceGroups plugin.TValue[[]interface{}]
}

// createAzureSubscription creates a new instance of this resource
func createAzureSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscription{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscription) MqlName() string {
	return "azure.subscription"
}

func (c *mqlAzureSubscription) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscription) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscription) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscription) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscription) GetTenantId() *plugin.TValue[string] {
	return &c.TenantId
}

func (c *mqlAzureSubscription) GetManagedByTenants() *plugin.TValue[[]interface{}] {
	return &c.ManagedByTenants
}

func (c *mqlAzureSubscription) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscription) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlAzureSubscription) GetAuthorizationSource() *plugin.TValue[string] {
	return &c.AuthorizationSource
}

func (c *mqlAzureSubscription) GetSubscriptionsPolicies() *plugin.TValue[interface{}] {
	return &c.SubscriptionsPolicies
}

func (c *mqlAzureSubscription) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "resources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resources()
	})
}

func (c *mqlAzureSubscription) GetResourceGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ResourceGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription", c.__id, "resourceGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resourceGroups()
	})
}

// mqlAzureSubscriptionResourcegroup for the azure.subscription.resourcegroup resource
type mqlAzureSubscriptionResourcegroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionResourcegroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
}

// createAzureSubscriptionResourcegroup creates a new instance of this resource
func createAzureSubscriptionResourcegroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionResourcegroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.resourcegroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionResourcegroup) MqlName() string {
	return "azure.subscription.resourcegroup"
}

func (c *mqlAzureSubscriptionResourcegroup) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionResourcegroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionResourcegroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionResourcegroup) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionResourcegroup) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionResourcegroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionResourcegroup) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionResourcegroup) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

// mqlAzureSubscriptionResource for the azure.subscription.resource resource
type mqlAzureSubscriptionResource struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionResourceInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	Sku plugin.TValue[interface{}]
	Plan plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	ProvisioningState plugin.TValue[string]
	CreatedTime plugin.TValue[*time.Time]
	ChangedTime plugin.TValue[*time.Time]
}

// createAzureSubscriptionResource creates a new instance of this resource
func createAzureSubscriptionResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionResource{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.resource", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionResource) MqlName() string {
	return "azure.subscription.resource"
}

func (c *mqlAzureSubscriptionResource) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionResource) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionResource) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionResource) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionResource) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionResource) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionResource) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionResource) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionResource) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionResource) GetPlan() *plugin.TValue[interface{}] {
	return &c.Plan
}

func (c *mqlAzureSubscriptionResource) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionResource) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionResource) GetCreatedTime() *plugin.TValue[*time.Time] {
	return &c.CreatedTime
}

func (c *mqlAzureSubscriptionResource) GetChangedTime() *plugin.TValue[*time.Time] {
	return &c.ChangedTime
}

// mqlAzureSubscriptionCompute for the azure.subscription.compute resource
type mqlAzureSubscriptionCompute struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Vms plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
}

// createAzureSubscriptionCompute creates a new instance of this resource
func createAzureSubscriptionCompute(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCompute{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.compute", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCompute) MqlName() string {
	return "azure.subscription.compute"
}

func (c *mqlAzureSubscriptionCompute) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCompute) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionCompute) GetVms() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vms, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.compute", c.__id, "vms")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vms()
	})
}

func (c *mqlAzureSubscriptionCompute) GetDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Disks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.compute", c.__id, "disks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.disks()
	})
}

// mqlAzureSubscriptionComputeVm for the azure.subscription.compute.vm resource
type mqlAzureSubscriptionComputeVm struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeVmInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Extensions plugin.TValue[[]interface{}]
	OsDisk plugin.TValue[*mqlAzureSubscriptionComputeDisk]
	DataDisks plugin.TValue[[]interface{}]
	PublicIpAddresses plugin.TValue[[]interface{}]
}

// createAzureSubscriptionComputeVm creates a new instance of this resource
func createAzureSubscriptionComputeVm(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionComputeVm{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.compute.vm", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionComputeVm) MqlName() string {
	return "azure.subscription.compute.vm"
}

func (c *mqlAzureSubscriptionComputeVm) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionComputeVm) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionComputeVm) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionComputeVm) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionComputeVm) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionComputeVm) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionComputeVm) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionComputeVm) GetExtensions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Extensions, func() ([]interface{}, error) {
		return c.extensions()
	})
}

func (c *mqlAzureSubscriptionComputeVm) GetOsDisk() *plugin.TValue[*mqlAzureSubscriptionComputeDisk] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionComputeDisk](&c.OsDisk, func() (*mqlAzureSubscriptionComputeDisk, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.compute.vm", c.__id, "osDisk")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionComputeDisk), nil
			}
		}

		return c.osDisk()
	})
}

func (c *mqlAzureSubscriptionComputeVm) GetDataDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DataDisks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.compute.vm", c.__id, "dataDisks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.dataDisks()
	})
}

func (c *mqlAzureSubscriptionComputeVm) GetPublicIpAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PublicIpAddresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.compute.vm", c.__id, "publicIpAddresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.publicIpAddresses()
	})
}

// mqlAzureSubscriptionComputeDisk for the azure.subscription.compute.disk resource
type mqlAzureSubscriptionComputeDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionComputeDiskInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	ManagedBy plugin.TValue[string]
	ManagedByExtended plugin.TValue[[]interface{}]
	Zones plugin.TValue[[]interface{}]
	Sku plugin.TValue[interface{}]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionComputeDisk creates a new instance of this resource
func createAzureSubscriptionComputeDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionComputeDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.compute.disk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionComputeDisk) MqlName() string {
	return "azure.subscription.compute.disk"
}

func (c *mqlAzureSubscriptionComputeDisk) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionComputeDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionComputeDisk) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionComputeDisk) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionComputeDisk) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionComputeDisk) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionComputeDisk) GetManagedBy() *plugin.TValue[string] {
	return &c.ManagedBy
}

func (c *mqlAzureSubscriptionComputeDisk) GetManagedByExtended() *plugin.TValue[[]interface{}] {
	return &c.ManagedByExtended
}

func (c *mqlAzureSubscriptionComputeDisk) GetZones() *plugin.TValue[[]interface{}] {
	return &c.Zones
}

func (c *mqlAzureSubscriptionComputeDisk) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionComputeDisk) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionNetwork for the azure.subscription.network resource
type mqlAzureSubscriptionNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Interfaces plugin.TValue[[]interface{}]
	SecurityGroups plugin.TValue[[]interface{}]
	Watchers plugin.TValue[[]interface{}]
	PublicIpAddresses plugin.TValue[[]interface{}]
	BastionHosts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetwork creates a new instance of this resource
func createAzureSubscriptionNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetwork) MqlName() string {
	return "azure.subscription.network"
}

func (c *mqlAzureSubscriptionNetwork) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetwork) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionNetwork) GetInterfaces() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Interfaces, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network", c.__id, "interfaces")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.interfaces()
	})
}

func (c *mqlAzureSubscriptionNetwork) GetSecurityGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network", c.__id, "securityGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityGroups()
	})
}

func (c *mqlAzureSubscriptionNetwork) GetWatchers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Watchers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network", c.__id, "watchers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.watchers()
	})
}

func (c *mqlAzureSubscriptionNetwork) GetPublicIpAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PublicIpAddresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network", c.__id, "publicIpAddresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.publicIpAddresses()
	})
}

func (c *mqlAzureSubscriptionNetwork) GetBastionHosts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BastionHosts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network", c.__id, "bastionHosts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.bastionHosts()
	})
}

// mqlAzureSubscriptionNetworkInterface for the azure.subscription.network.interface resource
type mqlAzureSubscriptionNetworkInterface struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkInterfaceInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Vm plugin.TValue[*mqlAzureSubscriptionComputeVm]
}

// createAzureSubscriptionNetworkInterface creates a new instance of this resource
func createAzureSubscriptionNetworkInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkInterface{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.interface", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkInterface) MqlName() string {
	return "azure.subscription.network.interface"
}

func (c *mqlAzureSubscriptionNetworkInterface) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkInterface) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkInterface) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkInterface) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkInterface) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkInterface) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkInterface) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkInterface) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkInterface) GetVm() *plugin.TValue[*mqlAzureSubscriptionComputeVm] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionComputeVm](&c.Vm, func() (*mqlAzureSubscriptionComputeVm, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network.interface", c.__id, "vm")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionComputeVm), nil
			}
		}

		return c.vm()
	})
}

// mqlAzureSubscriptionNetworkIpAddress for the azure.subscription.network.ipAddress resource
type mqlAzureSubscriptionNetworkIpAddress struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkIpAddressInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	IpAddress plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAzureSubscriptionNetworkIpAddress creates a new instance of this resource
func createAzureSubscriptionNetworkIpAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkIpAddress{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.ipAddress", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkIpAddress) MqlName() string {
	return "azure.subscription.network.ipAddress"
}

func (c *mqlAzureSubscriptionNetworkIpAddress) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlAzureSubscriptionNetworkIpAddress) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlAzureSubscriptionNetworkBastionHost for the azure.subscription.network.bastionHost resource
type mqlAzureSubscriptionNetworkBastionHost struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkBastionHostInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Sku plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkBastionHost creates a new instance of this resource
func createAzureSubscriptionNetworkBastionHost(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkBastionHost{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.bastionHost", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkBastionHost) MqlName() string {
	return "azure.subscription.network.bastionHost"
}

func (c *mqlAzureSubscriptionNetworkBastionHost) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkBastionHost) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

// mqlAzureSubscriptionNetworkSecurityGroup for the azure.subscription.network.securityGroup resource
type mqlAzureSubscriptionNetworkSecurityGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkSecurityGroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Interfaces plugin.TValue[[]interface{}]
	SecurityRules plugin.TValue[[]interface{}]
	DefaultSecurityRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkSecurityGroup creates a new instance of this resource
func createAzureSubscriptionNetworkSecurityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkSecurityGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.securityGroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) MqlName() string {
	return "azure.subscription.network.securityGroup"
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetInterfaces() *plugin.TValue[[]interface{}] {
	return &c.Interfaces
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.SecurityRules
}

func (c *mqlAzureSubscriptionNetworkSecurityGroup) GetDefaultSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.DefaultSecurityRules
}

// mqlAzureSubscriptionNetworkSecurityrule for the azure.subscription.network.securityrule resource
type mqlAzureSubscriptionNetworkSecurityrule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkSecurityruleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	DestinationPortRange plugin.TValue[[]interface{}]
}

// createAzureSubscriptionNetworkSecurityrule creates a new instance of this resource
func createAzureSubscriptionNetworkSecurityrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkSecurityrule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.securityrule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) MqlName() string {
	return "azure.subscription.network.securityrule"
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkSecurityrule) GetDestinationPortRange() *plugin.TValue[[]interface{}] {
	return &c.DestinationPortRange
}

// mqlAzureSubscriptionNetworkWatcher for the azure.subscription.network.watcher resource
type mqlAzureSubscriptionNetworkWatcher struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkWatcherInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	FlowLogs plugin.TValue[[]interface{}]
	ProvisioningState plugin.TValue[string]
}

// createAzureSubscriptionNetworkWatcher creates a new instance of this resource
func createAzureSubscriptionNetworkWatcher(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkWatcher{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.watcher", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkWatcher) MqlName() string {
	return "azure.subscription.network.watcher"
}

func (c *mqlAzureSubscriptionNetworkWatcher) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetFlowLogs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlowLogs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.network.watcher", c.__id, "flowLogs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flowLogs()
	})
}

func (c *mqlAzureSubscriptionNetworkWatcher) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

// mqlAzureSubscriptionNetworkWatcherFlowlog for the azure.subscription.network.watcher.flowlog resource
type mqlAzureSubscriptionNetworkWatcherFlowlog struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionNetworkWatcherFlowlogInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
	Enabled plugin.TValue[bool]
	StorageAccountId plugin.TValue[string]
	TargetResourceId plugin.TValue[string]
	TargetResourceGuid plugin.TValue[string]
	Version plugin.TValue[int64]
	Format plugin.TValue[string]
	RetentionPolicy plugin.TValue[interface{}]
	Analytics plugin.TValue[interface{}]
}

// createAzureSubscriptionNetworkWatcherFlowlog creates a new instance of this resource
func createAzureSubscriptionNetworkWatcherFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionNetworkWatcherFlowlog{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.network.watcher.flowlog", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) MqlName() string {
	return "azure.subscription.network.watcher.flowlog"
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetTargetResourceId() *plugin.TValue[string] {
	return &c.TargetResourceId
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetTargetResourceGuid() *plugin.TValue[string] {
	return &c.TargetResourceGuid
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetVersion() *plugin.TValue[int64] {
	return &c.Version
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetFormat() *plugin.TValue[string] {
	return &c.Format
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetRetentionPolicy() *plugin.TValue[interface{}] {
	return &c.RetentionPolicy
}

func (c *mqlAzureSubscriptionNetworkWatcherFlowlog) GetAnalytics() *plugin.TValue[interface{}] {
	return &c.Analytics
}

// mqlAzureSubscriptionStorage for the azure.subscription.storage resource
type mqlAzureSubscriptionStorage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Accounts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionStorage creates a new instance of this resource
func createAzureSubscriptionStorage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorage) MqlName() string {
	return "azure.subscription.storage"
}

func (c *mqlAzureSubscriptionStorage) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorage) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionStorage) GetAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Accounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage", c.__id, "accounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accounts()
	})
}

// mqlAzureSubscriptionStorageAccount for the azure.subscription.storage.account resource
type mqlAzureSubscriptionStorageAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	Sku plugin.TValue[interface{}]
	Kind plugin.TValue[string]
	Containers plugin.TValue[[]interface{}]
	QueueProperties plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties]
	TableProperties plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties]
	BlobProperties plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties]
	DataProtection plugin.TValue[*mqlAzureSubscriptionStorageAccountDataProtection]
}

// createAzureSubscriptionStorageAccount creates a new instance of this resource
func createAzureSubscriptionStorageAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccount) MqlName() string {
	return "azure.subscription.storage.account"
}

func (c *mqlAzureSubscriptionStorageAccount) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionStorageAccount) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionStorageAccount) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionStorageAccount) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionStorageAccount) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionStorageAccount) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionStorageAccount) GetSku() *plugin.TValue[interface{}] {
	return &c.Sku
}

func (c *mqlAzureSubscriptionStorageAccount) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionStorageAccount) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage.account", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

func (c *mqlAzureSubscriptionStorageAccount) GetQueueProperties() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccountServiceProperties](&c.QueueProperties, func() (*mqlAzureSubscriptionStorageAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage.account", c.__id, "queueProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccountServiceProperties), nil
			}
		}

		return c.queueProperties()
	})
}

func (c *mqlAzureSubscriptionStorageAccount) GetTableProperties() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccountServiceProperties](&c.TableProperties, func() (*mqlAzureSubscriptionStorageAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage.account", c.__id, "tableProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccountServiceProperties), nil
			}
		}

		return c.tableProperties()
	})
}

func (c *mqlAzureSubscriptionStorageAccount) GetBlobProperties() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServiceProperties] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccountServiceProperties](&c.BlobProperties, func() (*mqlAzureSubscriptionStorageAccountServiceProperties, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage.account", c.__id, "blobProperties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccountServiceProperties), nil
			}
		}

		return c.blobProperties()
	})
}

func (c *mqlAzureSubscriptionStorageAccount) GetDataProtection() *plugin.TValue[*mqlAzureSubscriptionStorageAccountDataProtection] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccountDataProtection](&c.DataProtection, func() (*mqlAzureSubscriptionStorageAccountDataProtection, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.storage.account", c.__id, "dataProtection")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccountDataProtection), nil
			}
		}

		return c.dataProtection()
	})
}

// mqlAzureSubscriptionStorageAccountDataProtection for the azure.subscription.storage.account.dataProtection resource
type mqlAzureSubscriptionStorageAccountDataProtection struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountDataProtectionInternal it will be used here
	StorageAccountId plugin.TValue[string]
	BlobSoftDeletionEnabled plugin.TValue[bool]
	BlobRetentionDays plugin.TValue[int64]
	ContainerSoftDeletionEnabled plugin.TValue[bool]
	ContainerRetentionDays plugin.TValue[int64]
}

// createAzureSubscriptionStorageAccountDataProtection creates a new instance of this resource
func createAzureSubscriptionStorageAccountDataProtection(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountDataProtection{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.dataProtection", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) MqlName() string {
	return "azure.subscription.storage.account.dataProtection"
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) GetBlobSoftDeletionEnabled() *plugin.TValue[bool] {
	return &c.BlobSoftDeletionEnabled
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) GetBlobRetentionDays() *plugin.TValue[int64] {
	return &c.BlobRetentionDays
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) GetContainerSoftDeletionEnabled() *plugin.TValue[bool] {
	return &c.ContainerSoftDeletionEnabled
}

func (c *mqlAzureSubscriptionStorageAccountDataProtection) GetContainerRetentionDays() *plugin.TValue[int64] {
	return &c.ContainerRetentionDays
}

// mqlAzureSubscriptionStorageAccountServiceProperties for the azure.subscription.storage.account.service.properties resource
type mqlAzureSubscriptionStorageAccountServiceProperties struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountServicePropertiesInternal it will be used here
	Id plugin.TValue[string]
	HourMetrics plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics]
	MinuteMetrics plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics]
	Logging plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesLogging]
}

// createAzureSubscriptionStorageAccountServiceProperties creates a new instance of this resource
func createAzureSubscriptionStorageAccountServiceProperties(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountServiceProperties{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.service.properties", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) MqlName() string {
	return "azure.subscription.storage.account.service.properties"
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) GetHourMetrics() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics] {
	return &c.HourMetrics
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) GetMinuteMetrics() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesMetrics] {
	return &c.MinuteMetrics
}

func (c *mqlAzureSubscriptionStorageAccountServiceProperties) GetLogging() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesLogging] {
	return &c.Logging
}

// mqlAzureSubscriptionStorageAccountServicePropertiesMetrics for the azure.subscription.storage.account.service.properties.metrics resource
type mqlAzureSubscriptionStorageAccountServicePropertiesMetrics struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountServicePropertiesMetricsInternal it will be used here
	Id plugin.TValue[string]
	IncludeAPIs plugin.TValue[bool]
	RetentionPolicy plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy]
	Enabled plugin.TValue[bool]
	Version plugin.TValue[string]
}

// createAzureSubscriptionStorageAccountServicePropertiesMetrics creates a new instance of this resource
func createAzureSubscriptionStorageAccountServicePropertiesMetrics(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountServicePropertiesMetrics{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.service.properties.metrics", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) MqlName() string {
	return "azure.subscription.storage.account.service.properties.metrics"
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) GetIncludeAPIs() *plugin.TValue[bool] {
	return &c.IncludeAPIs
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) GetRetentionPolicy() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy] {
	return &c.RetentionPolicy
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

// mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy for the azure.subscription.storage.account.service.properties.retentionPolicy resource
type mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicyInternal it will be used here
	Id plugin.TValue[string]
	RetentionDays plugin.TValue[int64]
	Enabled plugin.TValue[bool]
}

// createAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy creates a new instance of this resource
func createAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.service.properties.retentionPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) MqlName() string {
	return "azure.subscription.storage.account.service.properties.retentionPolicy"
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) GetRetentionDays() *plugin.TValue[int64] {
	return &c.RetentionDays
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlAzureSubscriptionStorageAccountServicePropertiesLogging for the azure.subscription.storage.account.service.properties.logging resource
type mqlAzureSubscriptionStorageAccountServicePropertiesLogging struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountServicePropertiesLoggingInternal it will be used here
	Id plugin.TValue[string]
	Delete plugin.TValue[bool]
	Read plugin.TValue[bool]
	Write plugin.TValue[bool]
	Version plugin.TValue[string]
	RetentionPolicy plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy]
}

// createAzureSubscriptionStorageAccountServicePropertiesLogging creates a new instance of this resource
func createAzureSubscriptionStorageAccountServicePropertiesLogging(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountServicePropertiesLogging{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.service.properties.logging", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) MqlName() string {
	return "azure.subscription.storage.account.service.properties.logging"
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetDelete() *plugin.TValue[bool] {
	return &c.Delete
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetRead() *plugin.TValue[bool] {
	return &c.Read
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetWrite() *plugin.TValue[bool] {
	return &c.Write
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) GetRetentionPolicy() *plugin.TValue[*mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy] {
	return &c.RetentionPolicy
}

// mqlAzureSubscriptionStorageAccountContainer for the azure.subscription.storage.account.container resource
type mqlAzureSubscriptionStorageAccountContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionStorageAccountContainerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Etag plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionStorageAccountContainer creates a new instance of this resource
func createAzureSubscriptionStorageAccountContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionStorageAccountContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.storage.account.container", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionStorageAccountContainer) MqlName() string {
	return "azure.subscription.storage.account.container"
}

func (c *mqlAzureSubscriptionStorageAccountContainer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionStorageAccountContainer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionStorageAccountContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionStorageAccountContainer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionStorageAccountContainer) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlAzureSubscriptionStorageAccountContainer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionWeb for the azure.subscription.web resource
type mqlAzureSubscriptionWeb struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Apps plugin.TValue[[]interface{}]
	AvailableRuntimes plugin.TValue[[]interface{}]
}

// createAzureSubscriptionWeb creates a new instance of this resource
func createAzureSubscriptionWeb(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWeb{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.web", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWeb) MqlName() string {
	return "azure.subscription.web"
}

func (c *mqlAzureSubscriptionWeb) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWeb) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionWeb) GetApps() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Apps, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.web", c.__id, "apps")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.apps()
	})
}

func (c *mqlAzureSubscriptionWeb) GetAvailableRuntimes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AvailableRuntimes, func() ([]interface{}, error) {
		return c.availableRuntimes()
	})
}

// mqlAzureSubscriptionWebAppsite for the azure.subscription.web.appsite resource
type mqlAzureSubscriptionWebAppsite struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebAppsiteInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Location plugin.TValue[string]
	Type plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Properties plugin.TValue[interface{}]
	Identity plugin.TValue[interface{}]
	Configuration plugin.TValue[*mqlAzureSubscriptionWebAppsiteconfig]
	AuthenticationSettings plugin.TValue[*mqlAzureSubscriptionWebAppsiteauthsettings]
	Metadata plugin.TValue[interface{}]
	ApplicationSettings plugin.TValue[interface{}]
	ConnectionSettings plugin.TValue[interface{}]
	Stack plugin.TValue[interface{}]
}

// createAzureSubscriptionWebAppsite creates a new instance of this resource
func createAzureSubscriptionWebAppsite(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebAppsite{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.web.appsite", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebAppsite) MqlName() string {
	return "azure.subscription.web.appsite"
}

func (c *mqlAzureSubscriptionWebAppsite) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebAppsite) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebAppsite) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebAppsite) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebAppsite) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionWebAppsite) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebAppsite) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionWebAppsite) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionWebAppsite) GetIdentity() *plugin.TValue[interface{}] {
	return &c.Identity
}

func (c *mqlAzureSubscriptionWebAppsite) GetConfiguration() *plugin.TValue[*mqlAzureSubscriptionWebAppsiteconfig] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionWebAppsiteconfig](&c.Configuration, func() (*mqlAzureSubscriptionWebAppsiteconfig, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.web.appsite", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionWebAppsiteconfig), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionWebAppsite) GetAuthenticationSettings() *plugin.TValue[*mqlAzureSubscriptionWebAppsiteauthsettings] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionWebAppsiteauthsettings](&c.AuthenticationSettings, func() (*mqlAzureSubscriptionWebAppsiteauthsettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.web.appsite", c.__id, "authenticationSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionWebAppsiteauthsettings), nil
			}
		}

		return c.authenticationSettings()
	})
}

func (c *mqlAzureSubscriptionWebAppsite) GetMetadata() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Metadata, func() (interface{}, error) {
		return c.metadata()
	})
}

func (c *mqlAzureSubscriptionWebAppsite) GetApplicationSettings() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ApplicationSettings, func() (interface{}, error) {
		return c.applicationSettings()
	})
}

func (c *mqlAzureSubscriptionWebAppsite) GetConnectionSettings() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionSettings, func() (interface{}, error) {
		return c.connectionSettings()
	})
}

func (c *mqlAzureSubscriptionWebAppsite) GetStack() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Stack, func() (interface{}, error) {
		return c.stack()
	})
}

// mqlAzureSubscriptionWebAppsiteauthsettings for the azure.subscription.web.appsiteauthsettings resource
type mqlAzureSubscriptionWebAppsiteauthsettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebAppsiteauthsettingsInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionWebAppsiteauthsettings creates a new instance of this resource
func createAzureSubscriptionWebAppsiteauthsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebAppsiteauthsettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.web.appsiteauthsettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) MqlName() string {
	return "azure.subscription.web.appsiteauthsettings"
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebAppsiteauthsettings) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionWebAppsiteconfig for the azure.subscription.web.appsiteconfig resource
type mqlAzureSubscriptionWebAppsiteconfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionWebAppsiteconfigInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
}

// createAzureSubscriptionWebAppsiteconfig creates a new instance of this resource
func createAzureSubscriptionWebAppsiteconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionWebAppsiteconfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.web.appsiteconfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) MqlName() string {
	return "azure.subscription.web.appsiteconfig"
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionWebAppsiteconfig) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

// mqlAzureSubscriptionSql for the azure.subscription.sql resource
type mqlAzureSubscriptionSql struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSql creates a new instance of this resource
func createAzureSubscriptionSql(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSql{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSql) MqlName() string {
	return "azure.subscription.sql"
}

func (c *mqlAzureSubscriptionSql) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSql) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionSql) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

// mqlAzureSubscriptionSqlServer for the azure.subscription.sql.server resource
type mqlAzureSubscriptionSqlServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
	AzureAdAdministrators plugin.TValue[[]interface{}]
	ConnectionPolicy plugin.TValue[interface{}]
	AuditingPolicy plugin.TValue[interface{}]
	SecurityAlertPolicy plugin.TValue[interface{}]
	EncryptionProtector plugin.TValue[interface{}]
	ThreatDetectionPolicy plugin.TValue[interface{}]
	VulnerabilityAssessmentSettings plugin.TValue[*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings]
	VirtualNetworkRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSqlServer creates a new instance of this resource
func createAzureSubscriptionSqlServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServer) MqlName() string {
	return "azure.subscription.sql.server"
}

func (c *mqlAzureSubscriptionSqlServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionSqlServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionSqlServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionSqlServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetAzureAdAdministrators() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AzureAdAdministrators, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.server", c.__id, "azureAdAdministrators")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.azureAdAdministrators()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetConnectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionPolicy, func() (interface{}, error) {
		return c.connectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetAuditingPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.AuditingPolicy, func() (interface{}, error) {
		return c.auditingPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetSecurityAlertPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.SecurityAlertPolicy, func() (interface{}, error) {
		return c.securityAlertPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetEncryptionProtector() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.EncryptionProtector, func() (interface{}, error) {
		return c.encryptionProtector()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetThreatDetectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ThreatDetectionPolicy, func() (interface{}, error) {
		return c.threatDetectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetVulnerabilityAssessmentSettings() *plugin.TValue[*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings](&c.VulnerabilityAssessmentSettings, func() (*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.server", c.__id, "vulnerabilityAssessmentSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings), nil
			}
		}

		return c.vulnerabilityAssessmentSettings()
	})
}

func (c *mqlAzureSubscriptionSqlServer) GetVirtualNetworkRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VirtualNetworkRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.server", c.__id, "virtualNetworkRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.virtualNetworkRules()
	})
}

// mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings for the azure.subscription.sql.server.vulnerabilityassessmentsettings resource
type mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettingsInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	StorageContainerPath plugin.TValue[string]
	StorageAccountAccessKey plugin.TValue[string]
	StorageContainerSasKey plugin.TValue[string]
	RecurringScanEnabled plugin.TValue[bool]
	RecurringScanEmails plugin.TValue[[]interface{}]
	MailSubscriptionAdmins plugin.TValue[bool]
}

// createAzureSubscriptionSqlServerVulnerabilityassessmentsettings creates a new instance of this resource
func createAzureSubscriptionSqlServerVulnerabilityassessmentsettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.server.vulnerabilityassessmentsettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) MqlName() string {
	return "azure.subscription.sql.server.vulnerabilityassessmentsettings"
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetStorageContainerPath() *plugin.TValue[string] {
	return &c.StorageContainerPath
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetStorageAccountAccessKey() *plugin.TValue[string] {
	return &c.StorageAccountAccessKey
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetStorageContainerSasKey() *plugin.TValue[string] {
	return &c.StorageContainerSasKey
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetRecurringScanEnabled() *plugin.TValue[bool] {
	return &c.RecurringScanEnabled
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetRecurringScanEmails() *plugin.TValue[[]interface{}] {
	return &c.RecurringScanEmails
}

func (c *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) GetMailSubscriptionAdmins() *plugin.TValue[bool] {
	return &c.MailSubscriptionAdmins
}

// mqlAzureSubscriptionSqlServerAdministrator for the azure.subscription.sql.server.administrator resource
type mqlAzureSubscriptionSqlServerAdministrator struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlServerAdministratorInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	AdministratorType plugin.TValue[string]
	Login plugin.TValue[string]
	Sid plugin.TValue[string]
	TenantId plugin.TValue[string]
}

// createAzureSubscriptionSqlServerAdministrator creates a new instance of this resource
func createAzureSubscriptionSqlServerAdministrator(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlServerAdministrator{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.server.administrator", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) MqlName() string {
	return "azure.subscription.sql.server.administrator"
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetAdministratorType() *plugin.TValue[string] {
	return &c.AdministratorType
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetLogin() *plugin.TValue[string] {
	return &c.Login
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetSid() *plugin.TValue[string] {
	return &c.Sid
}

func (c *mqlAzureSubscriptionSqlServerAdministrator) GetTenantId() *plugin.TValue[string] {
	return &c.TenantId
}

// mqlAzureSubscriptionSqlDatabase for the azure.subscription.sql.database resource
type mqlAzureSubscriptionSqlDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Collation plugin.TValue[string]
	CreationDate plugin.TValue[*time.Time]
	DatabaseId plugin.TValue[string]
	EarliestRestoreDate plugin.TValue[*time.Time]
	CreateMode plugin.TValue[string]
	SourceDatabaseId plugin.TValue[string]
	SourceDatabaseDeletionDate plugin.TValue[*time.Time]
	RestorePointInTime plugin.TValue[*time.Time]
	RecoveryServicesRecoveryPointResourceId plugin.TValue[string]
	Edition plugin.TValue[string]
	MaxSizeBytes plugin.TValue[int64]
	RequestedServiceObjectiveName plugin.TValue[string]
	ServiceLevelObjective plugin.TValue[string]
	Status plugin.TValue[string]
	ElasticPoolName plugin.TValue[string]
	DefaultSecondaryLocation plugin.TValue[string]
	FailoverGroupId plugin.TValue[string]
	ReadScale plugin.TValue[string]
	SampleName plugin.TValue[string]
	ZoneRedundant plugin.TValue[bool]
	TransparentDataEncryption plugin.TValue[interface{}]
	Advisor plugin.TValue[[]interface{}]
	ThreatDetectionPolicy plugin.TValue[interface{}]
	ConnectionPolicy plugin.TValue[interface{}]
	AuditingPolicy plugin.TValue[interface{}]
	Usage plugin.TValue[[]interface{}]
}

// createAzureSubscriptionSqlDatabase creates a new instance of this resource
func createAzureSubscriptionSqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlDatabase) MqlName() string {
	return "azure.subscription.sql.database"
}

func (c *mqlAzureSubscriptionSqlDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

func (c *mqlAzureSubscriptionSqlDatabase) GetCreationDate() *plugin.TValue[*time.Time] {
	return &c.CreationDate
}

func (c *mqlAzureSubscriptionSqlDatabase) GetDatabaseId() *plugin.TValue[string] {
	return &c.DatabaseId
}

func (c *mqlAzureSubscriptionSqlDatabase) GetEarliestRestoreDate() *plugin.TValue[*time.Time] {
	return &c.EarliestRestoreDate
}

func (c *mqlAzureSubscriptionSqlDatabase) GetCreateMode() *plugin.TValue[string] {
	return &c.CreateMode
}

func (c *mqlAzureSubscriptionSqlDatabase) GetSourceDatabaseId() *plugin.TValue[string] {
	return &c.SourceDatabaseId
}

func (c *mqlAzureSubscriptionSqlDatabase) GetSourceDatabaseDeletionDate() *plugin.TValue[*time.Time] {
	return &c.SourceDatabaseDeletionDate
}

func (c *mqlAzureSubscriptionSqlDatabase) GetRestorePointInTime() *plugin.TValue[*time.Time] {
	return &c.RestorePointInTime
}

func (c *mqlAzureSubscriptionSqlDatabase) GetRecoveryServicesRecoveryPointResourceId() *plugin.TValue[string] {
	return &c.RecoveryServicesRecoveryPointResourceId
}

func (c *mqlAzureSubscriptionSqlDatabase) GetEdition() *plugin.TValue[string] {
	return &c.Edition
}

func (c *mqlAzureSubscriptionSqlDatabase) GetMaxSizeBytes() *plugin.TValue[int64] {
	return &c.MaxSizeBytes
}

func (c *mqlAzureSubscriptionSqlDatabase) GetRequestedServiceObjectiveName() *plugin.TValue[string] {
	return &c.RequestedServiceObjectiveName
}

func (c *mqlAzureSubscriptionSqlDatabase) GetServiceLevelObjective() *plugin.TValue[string] {
	return &c.ServiceLevelObjective
}

func (c *mqlAzureSubscriptionSqlDatabase) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAzureSubscriptionSqlDatabase) GetElasticPoolName() *plugin.TValue[string] {
	return &c.ElasticPoolName
}

func (c *mqlAzureSubscriptionSqlDatabase) GetDefaultSecondaryLocation() *plugin.TValue[string] {
	return &c.DefaultSecondaryLocation
}

func (c *mqlAzureSubscriptionSqlDatabase) GetFailoverGroupId() *plugin.TValue[string] {
	return &c.FailoverGroupId
}

func (c *mqlAzureSubscriptionSqlDatabase) GetReadScale() *plugin.TValue[string] {
	return &c.ReadScale
}

func (c *mqlAzureSubscriptionSqlDatabase) GetSampleName() *plugin.TValue[string] {
	return &c.SampleName
}

func (c *mqlAzureSubscriptionSqlDatabase) GetZoneRedundant() *plugin.TValue[bool] {
	return &c.ZoneRedundant
}

func (c *mqlAzureSubscriptionSqlDatabase) GetTransparentDataEncryption() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.TransparentDataEncryption, func() (interface{}, error) {
		return c.transparentDataEncryption()
	})
}

func (c *mqlAzureSubscriptionSqlDatabase) GetAdvisor() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Advisor, func() ([]interface{}, error) {
		return c.advisor()
	})
}

func (c *mqlAzureSubscriptionSqlDatabase) GetThreatDetectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ThreatDetectionPolicy, func() (interface{}, error) {
		return c.threatDetectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlDatabase) GetConnectionPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.ConnectionPolicy, func() (interface{}, error) {
		return c.connectionPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlDatabase) GetAuditingPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.AuditingPolicy, func() (interface{}, error) {
		return c.auditingPolicy()
	})
}

func (c *mqlAzureSubscriptionSqlDatabase) GetUsage() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Usage, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.sql.database", c.__id, "usage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.usage()
	})
}

// mqlAzureSubscriptionSqlDatabaseusage for the azure.subscription.sql.databaseusage resource
type mqlAzureSubscriptionSqlDatabaseusage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlDatabaseusageInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ResourceName plugin.TValue[string]
	DisplayName plugin.TValue[string]
	CurrentValue plugin.TValue[float64]
	Limit plugin.TValue[float64]
	Unit plugin.TValue[string]
}

// createAzureSubscriptionSqlDatabaseusage creates a new instance of this resource
func createAzureSubscriptionSqlDatabaseusage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlDatabaseusage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.databaseusage", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) MqlName() string {
	return "azure.subscription.sql.databaseusage"
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetResourceName() *plugin.TValue[string] {
	return &c.ResourceName
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetCurrentValue() *plugin.TValue[float64] {
	return &c.CurrentValue
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetLimit() *plugin.TValue[float64] {
	return &c.Limit
}

func (c *mqlAzureSubscriptionSqlDatabaseusage) GetUnit() *plugin.TValue[string] {
	return &c.Unit
}

// mqlAzureSubscriptionPostgreSql for the azure.subscription.postgreSql resource
type mqlAzureSubscriptionPostgreSql struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPostgreSql creates a new instance of this resource
func createAzureSubscriptionPostgreSql(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSql{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSql", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSql) MqlName() string {
	return "azure.subscription.postgreSql"
}

func (c *mqlAzureSubscriptionPostgreSql) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSql) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionPostgreSql) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSql", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

// mqlAzureSubscriptionPostgreSqlServer for the azure.subscription.postgreSql.server resource
type mqlAzureSubscriptionPostgreSqlServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionPostgreSqlServer creates a new instance of this resource
func createAzureSubscriptionPostgreSqlServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSql.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlServer) MqlName() string {
	return "azure.subscription.postgreSql.server"
}

func (c *mqlAzureSubscriptionPostgreSqlServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSql.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSql.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionPostgreSqlServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.postgreSql.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionPostgreSqlDatabase for the azure.subscription.postgreSql.database resource
type mqlAzureSubscriptionPostgreSqlDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionPostgreSqlDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionPostgreSqlDatabase creates a new instance of this resource
func createAzureSubscriptionPostgreSqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionPostgreSqlDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.postgreSql.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) MqlName() string {
	return "azure.subscription.postgreSql.database"
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionPostgreSqlDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionSqlConfiguration for the azure.subscription.sql.configuration resource
type mqlAzureSubscriptionSqlConfiguration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlConfigurationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Value plugin.TValue[string]
	Description plugin.TValue[string]
	DefaultValue plugin.TValue[string]
	DataType plugin.TValue[string]
	AllowedValues plugin.TValue[string]
	Source plugin.TValue[string]
}

// createAzureSubscriptionSqlConfiguration creates a new instance of this resource
func createAzureSubscriptionSqlConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlConfiguration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.configuration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlConfiguration) MqlName() string {
	return "azure.subscription.sql.configuration"
}

func (c *mqlAzureSubscriptionSqlConfiguration) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetDefaultValue() *plugin.TValue[string] {
	return &c.DefaultValue
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetDataType() *plugin.TValue[string] {
	return &c.DataType
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetAllowedValues() *plugin.TValue[string] {
	return &c.AllowedValues
}

func (c *mqlAzureSubscriptionSqlConfiguration) GetSource() *plugin.TValue[string] {
	return &c.Source
}

// mqlAzureSubscriptionSqlFirewallrule for the azure.subscription.sql.firewallrule resource
type mqlAzureSubscriptionSqlFirewallrule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlFirewallruleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	StartIpAddress plugin.TValue[string]
	EndIpAddress plugin.TValue[string]
}

// createAzureSubscriptionSqlFirewallrule creates a new instance of this resource
func createAzureSubscriptionSqlFirewallrule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlFirewallrule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.firewallrule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlFirewallrule) MqlName() string {
	return "azure.subscription.sql.firewallrule"
}

func (c *mqlAzureSubscriptionSqlFirewallrule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlFirewallrule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlFirewallrule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlFirewallrule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlFirewallrule) GetStartIpAddress() *plugin.TValue[string] {
	return &c.StartIpAddress
}

func (c *mqlAzureSubscriptionSqlFirewallrule) GetEndIpAddress() *plugin.TValue[string] {
	return &c.EndIpAddress
}

// mqlAzureSubscriptionSqlVirtualNetworkRule for the azure.subscription.sql.virtualNetworkRule resource
type mqlAzureSubscriptionSqlVirtualNetworkRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionSqlVirtualNetworkRuleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	VirtualNetworkSubnetId plugin.TValue[string]
}

// createAzureSubscriptionSqlVirtualNetworkRule creates a new instance of this resource
func createAzureSubscriptionSqlVirtualNetworkRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionSqlVirtualNetworkRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.sql.virtualNetworkRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) MqlName() string {
	return "azure.subscription.sql.virtualNetworkRule"
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionSqlVirtualNetworkRule) GetVirtualNetworkSubnetId() *plugin.TValue[string] {
	return &c.VirtualNetworkSubnetId
}

// mqlAzureSubscriptionMySql for the azure.subscription.mySql resource
type mqlAzureSubscriptionMySql struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
	FlexibleServers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySql creates a new instance of this resource
func createAzureSubscriptionMySql(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySql{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySql", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySql) MqlName() string {
	return "azure.subscription.mySql"
}

func (c *mqlAzureSubscriptionMySql) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySql) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMySql) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

func (c *mqlAzureSubscriptionMySql) GetFlexibleServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlexibleServers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql", c.__id, "flexibleServers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flexibleServers()
	})
}

// mqlAzureSubscriptionMySqlServer for the azure.subscription.mySql.server resource
type mqlAzureSubscriptionMySqlServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySqlServer creates a new instance of this resource
func createAzureSubscriptionMySqlServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySql.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlServer) MqlName() string {
	return "azure.subscription.mySql.server"
}

func (c *mqlAzureSubscriptionMySqlServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMySqlServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMySqlServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMySqlServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMySqlServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMySqlServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMySqlDatabase for the azure.subscription.mySql.database resource
type mqlAzureSubscriptionMySqlDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionMySqlDatabase creates a new instance of this resource
func createAzureSubscriptionMySqlDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySql.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlDatabase) MqlName() string {
	return "azure.subscription.mySql.database"
}

func (c *mqlAzureSubscriptionMySqlDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionMySqlDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionMySqlFlexibleServer for the azure.subscription.mySql.flexibleServer resource
type mqlAzureSubscriptionMySqlFlexibleServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMySqlFlexibleServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMySqlFlexibleServer creates a new instance of this resource
func createAzureSubscriptionMySqlFlexibleServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMySqlFlexibleServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mySql.flexibleServer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) MqlName() string {
	return "azure.subscription.mySql.flexibleServer"
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.flexibleServer", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.flexibleServer", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMySqlFlexibleServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mySql.flexibleServer", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMariaDb for the azure.subscription.mariaDb resource
type mqlAzureSubscriptionMariaDb struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Servers plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMariaDb creates a new instance of this resource
func createAzureSubscriptionMariaDb(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDb{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDb", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDb) MqlName() string {
	return "azure.subscription.mariaDb"
}

func (c *mqlAzureSubscriptionMariaDb) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDb) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMariaDb) GetServers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Servers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDb", c.__id, "servers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.servers()
	})
}

// mqlAzureSubscriptionMariaDbServer for the azure.subscription.mariaDb.server resource
type mqlAzureSubscriptionMariaDbServer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbServerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Configuration plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	FirewallRules plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMariaDbServer creates a new instance of this resource
func createAzureSubscriptionMariaDbServer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDbServer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDb.server", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDbServer) MqlName() string {
	return "azure.subscription.mariaDb.server"
}

func (c *mqlAzureSubscriptionMariaDbServer) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDbServer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMariaDbServer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMariaDbServer) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMariaDbServer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMariaDbServer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMariaDbServer) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMariaDbServer) GetConfiguration() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Configuration, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDb.server", c.__id, "configuration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.configuration()
	})
}

func (c *mqlAzureSubscriptionMariaDbServer) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDb.server", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlAzureSubscriptionMariaDbServer) GetFirewallRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FirewallRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.mariaDb.server", c.__id, "firewallRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewallRules()
	})
}

// mqlAzureSubscriptionMariaDbDatabase for the azure.subscription.mariaDb.database resource
type mqlAzureSubscriptionMariaDbDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMariaDbDatabaseInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
}

// createAzureSubscriptionMariaDbDatabase creates a new instance of this resource
func createAzureSubscriptionMariaDbDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMariaDbDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.mariaDb.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMariaDbDatabase) MqlName() string {
	return "azure.subscription.mariaDb.database"
}

func (c *mqlAzureSubscriptionMariaDbDatabase) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMariaDbDatabase) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMariaDbDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMariaDbDatabase) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMariaDbDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlAzureSubscriptionMariaDbDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

// mqlAzureSubscriptionCosmosDb for the azure.subscription.cosmosDb resource
type mqlAzureSubscriptionCosmosDb struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCosmosDbInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Accounts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionCosmosDb creates a new instance of this resource
func createAzureSubscriptionCosmosDb(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCosmosDb{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cosmosDb", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCosmosDb) MqlName() string {
	return "azure.subscription.cosmosDb"
}

func (c *mqlAzureSubscriptionCosmosDb) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCosmosDb) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionCosmosDb) GetAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Accounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.cosmosDb", c.__id, "accounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accounts()
	})
}

// mqlAzureSubscriptionCosmosDbAccount for the azure.subscription.cosmosDb.account resource
type mqlAzureSubscriptionCosmosDbAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCosmosDbAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Type plugin.TValue[string]
	Kind plugin.TValue[string]
}

// createAzureSubscriptionCosmosDbAccount creates a new instance of this resource
func createAzureSubscriptionCosmosDbAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCosmosDbAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cosmosDb.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCosmosDbAccount) MqlName() string {
	return "azure.subscription.cosmosDb.account"
}

func (c *mqlAzureSubscriptionCosmosDbAccount) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionCosmosDbAccount) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

// mqlAzureSubscriptionKeyVault for the azure.subscription.keyVault resource
type mqlAzureSubscriptionKeyVault struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Vaults plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVault creates a new instance of this resource
func createAzureSubscriptionKeyVault(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVault{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVault", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVault) MqlName() string {
	return "azure.subscription.keyVault"
}

func (c *mqlAzureSubscriptionKeyVault) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVault) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionKeyVault) GetVaults() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vaults, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault", c.__id, "vaults")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vaults()
	})
}

// mqlAzureSubscriptionKeyVaultVault for the azure.subscription.keyVault.vault resource
type mqlAzureSubscriptionKeyVaultVault struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultVaultInternal it will be used here
	Id plugin.TValue[string]
	VaultName plugin.TValue[string]
	Type plugin.TValue[string]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	VaultUri plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Keys plugin.TValue[[]interface{}]
	Certificates plugin.TValue[[]interface{}]
	Secrets plugin.TValue[[]interface{}]
	DiagnosticSettings plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultVault creates a new instance of this resource
func createAzureSubscriptionKeyVaultVault(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultVault{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVault.vault", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultVault) MqlName() string {
	return "azure.subscription.keyVault.vault"
}

func (c *mqlAzureSubscriptionKeyVaultVault) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetVaultName() *plugin.TValue[string] {
	return &c.VaultName
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetVaultUri() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.VaultUri, func() (string, error) {
		return c.vaultUri()
	})
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetProperties() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Properties, func() (interface{}, error) {
		return c.properties()
	})
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.vault", c.__id, "keys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keys()
	})
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetCertificates() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Certificates, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.vault", c.__id, "certificates")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.certificates()
	})
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetSecrets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Secrets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.vault", c.__id, "secrets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.secrets()
	})
}

func (c *mqlAzureSubscriptionKeyVaultVault) GetDiagnosticSettings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DiagnosticSettings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.vault", c.__id, "diagnosticSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.diagnosticSettings()
	})
}

// mqlAzureSubscriptionKeyVaultKey for the azure.subscription.keyVault.key resource
type mqlAzureSubscriptionKeyVaultKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultKeyInternal it will be used here
	Kid plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Managed plugin.TValue[bool]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	RecoveryLevel plugin.TValue[string]
	KeyName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultKey creates a new instance of this resource
func createAzureSubscriptionKeyVaultKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVault.key", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultKey) MqlName() string {
	return "azure.subscription.keyVault.key"
}

func (c *mqlAzureSubscriptionKeyVaultKey) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetKid() *plugin.TValue[string] {
	return &c.Kid
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetManaged() *plugin.TValue[bool] {
	return &c.Managed
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetRecoveryLevel() *plugin.TValue[string] {
	return &c.RecoveryLevel
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetKeyName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.KeyName, func() (string, error) {
		return c.keyName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultKey) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.key", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionKeyVaultCertificate for the azure.subscription.keyVault.certificate resource
type mqlAzureSubscriptionKeyVaultCertificate struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultCertificateInternal it will be used here
	Id plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	X5t plugin.TValue[string]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	RecoveryLevel plugin.TValue[string]
	CertName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultCertificate creates a new instance of this resource
func createAzureSubscriptionKeyVaultCertificate(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultCertificate{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVault.certificate", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) MqlName() string {
	return "azure.subscription.keyVault.certificate"
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetX5t() *plugin.TValue[string] {
	return &c.X5t
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetRecoveryLevel() *plugin.TValue[string] {
	return &c.RecoveryLevel
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetCertName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.CertName, func() (string, error) {
		return c.certName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultCertificate) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.certificate", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionKeyVaultSecret for the azure.subscription.keyVault.secret resource
type mqlAzureSubscriptionKeyVaultSecret struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionKeyVaultSecretInternal it will be used here
	Id plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	ContentType plugin.TValue[string]
	Managed plugin.TValue[bool]
	Enabled plugin.TValue[bool]
	NotBefore plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	SecretName plugin.TValue[string]
	Version plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionKeyVaultSecret creates a new instance of this resource
func createAzureSubscriptionKeyVaultSecret(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionKeyVaultSecret{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.keyVault.secret", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionKeyVaultSecret) MqlName() string {
	return "azure.subscription.keyVault.secret"
}

func (c *mqlAzureSubscriptionKeyVaultSecret) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetContentType() *plugin.TValue[string] {
	return &c.ContentType
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetManaged() *plugin.TValue[bool] {
	return &c.Managed
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetNotBefore() *plugin.TValue[*time.Time] {
	return &c.NotBefore
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetSecretName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.SecretName, func() (string, error) {
		return c.secretName()
	})
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlAzureSubscriptionKeyVaultSecret) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.keyVault.secret", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

// mqlAzureSubscriptionMonitor for the azure.subscription.monitor resource
type mqlAzureSubscriptionMonitor struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorInternal it will be used here
	SubscriptionId plugin.TValue[string]
	LogProfiles plugin.TValue[[]interface{}]
	DiagnosticSettings plugin.TValue[[]interface{}]
	ApplicationInsights plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMonitor creates a new instance of this resource
func createAzureSubscriptionMonitor(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitor{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitor) MqlName() string {
	return "azure.subscription.monitor"
}

func (c *mqlAzureSubscriptionMonitor) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitor) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMonitor) GetLogProfiles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.LogProfiles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor", c.__id, "logProfiles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.logProfiles()
	})
}

func (c *mqlAzureSubscriptionMonitor) GetDiagnosticSettings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.DiagnosticSettings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor", c.__id, "diagnosticSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.diagnosticSettings()
	})
}

func (c *mqlAzureSubscriptionMonitor) GetApplicationInsights() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationInsights, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor", c.__id, "applicationInsights")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationInsights()
	})
}

// mqlAzureSubscriptionMonitorActivityLog for the azure.subscription.monitor.activityLog resource
type mqlAzureSubscriptionMonitorActivityLog struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorActivityLogInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Alerts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMonitorActivityLog creates a new instance of this resource
func createAzureSubscriptionMonitorActivityLog(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorActivityLog{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor.activityLog", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorActivityLog) MqlName() string {
	return "azure.subscription.monitor.activityLog"
}

func (c *mqlAzureSubscriptionMonitorActivityLog) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorActivityLog) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionMonitorActivityLog) GetAlerts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Alerts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor.activityLog", c.__id, "alerts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.alerts()
	})
}

// mqlAzureSubscriptionMonitorApplicationInsight for the azure.subscription.monitor.applicationInsight resource
type mqlAzureSubscriptionMonitorApplicationInsight struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorApplicationInsightInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	Tags plugin.TValue[map[string]interface{}]
	Location plugin.TValue[string]
	Kind plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAzureSubscriptionMonitorApplicationInsight creates a new instance of this resource
func createAzureSubscriptionMonitorApplicationInsight(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorApplicationInsight{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor.applicationInsight", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) MqlName() string {
	return "azure.subscription.monitor.applicationInsight"
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAzureSubscriptionMonitorApplicationInsight) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlAzureSubscriptionMonitorActivityLogAlert for the azure.subscription.monitor.activityLog.alert resource
type mqlAzureSubscriptionMonitorActivityLogAlert struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorActivityLogAlertInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Conditions plugin.TValue[[]interface{}]
	Location plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Actions plugin.TValue[[]interface{}]
	Scopes plugin.TValue[[]interface{}]
}

// createAzureSubscriptionMonitorActivityLogAlert creates a new instance of this resource
func createAzureSubscriptionMonitorActivityLogAlert(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorActivityLogAlert{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor.activityLog.alert", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) MqlName() string {
	return "azure.subscription.monitor.activityLog.alert"
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetConditions() *plugin.TValue[[]interface{}] {
	return &c.Conditions
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetActions() *plugin.TValue[[]interface{}] {
	return &c.Actions
}

func (c *mqlAzureSubscriptionMonitorActivityLogAlert) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

// mqlAzureSubscriptionMonitorLogprofile for the azure.subscription.monitor.logprofile resource
type mqlAzureSubscriptionMonitorLogprofile struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorLogprofileInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Type plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	Properties plugin.TValue[interface{}]
	StorageAccountId plugin.TValue[string]
	StorageAccount plugin.TValue[*mqlAzureSubscriptionStorageAccount]
}

// createAzureSubscriptionMonitorLogprofile creates a new instance of this resource
func createAzureSubscriptionMonitorLogprofile(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorLogprofile{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor.logprofile", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorLogprofile) MqlName() string {
	return "azure.subscription.monitor.logprofile"
}

func (c *mqlAzureSubscriptionMonitorLogprofile) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionMonitorLogprofile) GetStorageAccount() *plugin.TValue[*mqlAzureSubscriptionStorageAccount] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccount](&c.StorageAccount, func() (*mqlAzureSubscriptionStorageAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor.logprofile", c.__id, "storageAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccount), nil
			}
		}

		return c.storageAccount()
	})
}

// mqlAzureSubscriptionMonitorDiagnosticsetting for the azure.subscription.monitor.diagnosticsetting resource
type mqlAzureSubscriptionMonitorDiagnosticsetting struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionMonitorDiagnosticsettingInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Properties plugin.TValue[interface{}]
	StorageAccountId plugin.TValue[string]
	StorageAccount plugin.TValue[*mqlAzureSubscriptionStorageAccount]
}

// createAzureSubscriptionMonitorDiagnosticsetting creates a new instance of this resource
func createAzureSubscriptionMonitorDiagnosticsetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionMonitorDiagnosticsetting{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.monitor.diagnosticsetting", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) MqlName() string {
	return "azure.subscription.monitor.diagnosticsetting"
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetProperties() *plugin.TValue[interface{}] {
	return &c.Properties
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetStorageAccountId() *plugin.TValue[string] {
	return &c.StorageAccountId
}

func (c *mqlAzureSubscriptionMonitorDiagnosticsetting) GetStorageAccount() *plugin.TValue[*mqlAzureSubscriptionStorageAccount] {
	return plugin.GetOrCompute[*mqlAzureSubscriptionStorageAccount](&c.StorageAccount, func() (*mqlAzureSubscriptionStorageAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.monitor.diagnosticsetting", c.__id, "storageAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAzureSubscriptionStorageAccount), nil
			}
		}

		return c.storageAccount()
	})
}

// mqlAzureSubscriptionCloudDefender for the azure.subscription.cloudDefender resource
type mqlAzureSubscriptionCloudDefender struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCloudDefenderInternal it will be used here
	SubscriptionId plugin.TValue[string]
	MonitoringAgentAutoProvision plugin.TValue[bool]
	DefenderForServers plugin.TValue[interface{}]
	DefenderForContainers plugin.TValue[interface{}]
	SecurityContacts plugin.TValue[[]interface{}]
}

// createAzureSubscriptionCloudDefender creates a new instance of this resource
func createAzureSubscriptionCloudDefender(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCloudDefender{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cloudDefender", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCloudDefender) MqlName() string {
	return "azure.subscription.cloudDefender"
}

func (c *mqlAzureSubscriptionCloudDefender) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCloudDefender) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionCloudDefender) GetMonitoringAgentAutoProvision() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.MonitoringAgentAutoProvision, func() (bool, error) {
		return c.monitoringAgentAutoProvision()
	})
}

func (c *mqlAzureSubscriptionCloudDefender) GetDefenderForServers() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForServers, func() (interface{}, error) {
		return c.defenderForServers()
	})
}

func (c *mqlAzureSubscriptionCloudDefender) GetDefenderForContainers() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DefenderForContainers, func() (interface{}, error) {
		return c.defenderForContainers()
	})
}

func (c *mqlAzureSubscriptionCloudDefender) GetSecurityContacts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityContacts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.cloudDefender", c.__id, "securityContacts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityContacts()
	})
}

// mqlAzureSubscriptionCloudDefenderSecurityContact for the azure.subscription.cloudDefender.securityContact resource
type mqlAzureSubscriptionCloudDefenderSecurityContact struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionCloudDefenderSecurityContactInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Emails plugin.TValue[[]interface{}]
	AlertNotifications plugin.TValue[interface{}]
	NotificationsByRole plugin.TValue[interface{}]
}

// createAzureSubscriptionCloudDefenderSecurityContact creates a new instance of this resource
func createAzureSubscriptionCloudDefenderSecurityContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionCloudDefenderSecurityContact{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.cloudDefender.securityContact", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) MqlName() string {
	return "azure.subscription.cloudDefender.securityContact"
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) GetEmails() *plugin.TValue[[]interface{}] {
	return &c.Emails
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) GetAlertNotifications() *plugin.TValue[interface{}] {
	return &c.AlertNotifications
}

func (c *mqlAzureSubscriptionCloudDefenderSecurityContact) GetNotificationsByRole() *plugin.TValue[interface{}] {
	return &c.NotificationsByRole
}

// mqlAzureSubscriptionAuthorization for the azure.subscription.authorization resource
type mqlAzureSubscriptionAuthorization struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationInternal it will be used here
	SubscriptionId plugin.TValue[string]
	RoleDefinitions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorization creates a new instance of this resource
func createAzureSubscriptionAuthorization(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorization{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorization", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorization) MqlName() string {
	return "azure.subscription.authorization"
}

func (c *mqlAzureSubscriptionAuthorization) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorization) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionAuthorization) GetRoleDefinitions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RoleDefinitions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.authorization", c.__id, "roleDefinitions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roleDefinitions()
	})
}

// mqlAzureSubscriptionAuthorizationRoleDefinition for the azure.subscription.authorization.roleDefinition resource
type mqlAzureSubscriptionAuthorizationRoleDefinition struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationRoleDefinitionInternal it will be used here
	Id plugin.TValue[string]
	Description plugin.TValue[string]
	Name plugin.TValue[string]
	IsCustom plugin.TValue[bool]
	Scopes plugin.TValue[[]interface{}]
	Permissions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorizationRoleDefinition creates a new instance of this resource
func createAzureSubscriptionAuthorizationRoleDefinition(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationRoleDefinition{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorization.roleDefinition", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) MqlName() string {
	return "azure.subscription.authorization.roleDefinition"
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetIsCustom() *plugin.TValue[bool] {
	return &c.IsCustom
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinition) GetPermissions() *plugin.TValue[[]interface{}] {
	return &c.Permissions
}

// mqlAzureSubscriptionAuthorizationRoleDefinitionPermission for the azure.subscription.authorization.roleDefinition.permission resource
type mqlAzureSubscriptionAuthorizationRoleDefinitionPermission struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAuthorizationRoleDefinitionPermissionInternal it will be used here
	Id plugin.TValue[string]
	AllowedActions plugin.TValue[[]interface{}]
	DeniedActions plugin.TValue[[]interface{}]
	AllowedDataActions plugin.TValue[[]interface{}]
	DeniedDataActions plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAuthorizationRoleDefinitionPermission creates a new instance of this resource
func createAzureSubscriptionAuthorizationRoleDefinitionPermission(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAuthorizationRoleDefinitionPermission{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.authorization.roleDefinition.permission", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) MqlName() string {
	return "azure.subscription.authorization.roleDefinition.permission"
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) GetAllowedActions() *plugin.TValue[[]interface{}] {
	return &c.AllowedActions
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) GetDeniedActions() *plugin.TValue[[]interface{}] {
	return &c.DeniedActions
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) GetAllowedDataActions() *plugin.TValue[[]interface{}] {
	return &c.AllowedDataActions
}

func (c *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) GetDeniedDataActions() *plugin.TValue[[]interface{}] {
	return &c.DeniedDataActions
}

// mqlAzureSubscriptionAks for the azure.subscription.aks resource
type mqlAzureSubscriptionAks struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAksInternal it will be used here
	SubscriptionId plugin.TValue[string]
	Clusters plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAks creates a new instance of this resource
func createAzureSubscriptionAks(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAks{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.aks", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAks) MqlName() string {
	return "azure.subscription.aks"
}

func (c *mqlAzureSubscriptionAks) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAks) GetSubscriptionId() *plugin.TValue[string] {
	return &c.SubscriptionId
}

func (c *mqlAzureSubscriptionAks) GetClusters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Clusters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("azure.subscription.aks", c.__id, "clusters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.clusters()
	})
}

// mqlAzureSubscriptionAksCluster for the azure.subscription.aks.cluster resource
type mqlAzureSubscriptionAksCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAzureSubscriptionAksClusterInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	KubernetesVersion plugin.TValue[string]
	ProvisioningState plugin.TValue[string]
	PowerState plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	NodeResourceGroup plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	RbacEnabled plugin.TValue[bool]
	Fqdn plugin.TValue[string]
	DnsPrefix plugin.TValue[string]
	StorageProfile plugin.TValue[interface{}]
	WorkloadAutoScalerProfile plugin.TValue[interface{}]
	SecurityProfile plugin.TValue[interface{}]
	PodIdentityProfile plugin.TValue[interface{}]
	NetworkProfile plugin.TValue[interface{}]
	HttpProxyConfig plugin.TValue[interface{}]
	AddonProfiles plugin.TValue[[]interface{}]
	AgentPoolProfiles plugin.TValue[[]interface{}]
}

// createAzureSubscriptionAksCluster creates a new instance of this resource
func createAzureSubscriptionAksCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAzureSubscriptionAksCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("azure.subscription.aks.cluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAzureSubscriptionAksCluster) MqlName() string {
	return "azure.subscription.aks.cluster"
}

func (c *mqlAzureSubscriptionAksCluster) MqlID() string {
	return c.__id
}

func (c *mqlAzureSubscriptionAksCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAzureSubscriptionAksCluster) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAzureSubscriptionAksCluster) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlAzureSubscriptionAksCluster) GetKubernetesVersion() *plugin.TValue[string] {
	return &c.KubernetesVersion
}

func (c *mqlAzureSubscriptionAksCluster) GetProvisioningState() *plugin.TValue[string] {
	return &c.ProvisioningState
}

func (c *mqlAzureSubscriptionAksCluster) GetPowerState() *plugin.TValue[string] {
	return &c.PowerState
}

func (c *mqlAzureSubscriptionAksCluster) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAzureSubscriptionAksCluster) GetNodeResourceGroup() *plugin.TValue[string] {
	return &c.NodeResourceGroup
}

func (c *mqlAzureSubscriptionAksCluster) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlAzureSubscriptionAksCluster) GetRbacEnabled() *plugin.TValue[bool] {
	return &c.RbacEnabled
}

func (c *mqlAzureSubscriptionAksCluster) GetFqdn() *plugin.TValue[string] {
	return &c.Fqdn
}

func (c *mqlAzureSubscriptionAksCluster) GetDnsPrefix() *plugin.TValue[string] {
	return &c.DnsPrefix
}

func (c *mqlAzureSubscriptionAksCluster) GetStorageProfile() *plugin.TValue[interface{}] {
	return &c.StorageProfile
}

func (c *mqlAzureSubscriptionAksCluster) GetWorkloadAutoScalerProfile() *plugin.TValue[interface{}] {
	return &c.WorkloadAutoScalerProfile
}

func (c *mqlAzureSubscriptionAksCluster) GetSecurityProfile() *plugin.TValue[interface{}] {
	return &c.SecurityProfile
}

func (c *mqlAzureSubscriptionAksCluster) GetPodIdentityProfile() *plugin.TValue[interface{}] {
	return &c.PodIdentityProfile
}

func (c *mqlAzureSubscriptionAksCluster) GetNetworkProfile() *plugin.TValue[interface{}] {
	return &c.NetworkProfile
}

func (c *mqlAzureSubscriptionAksCluster) GetHttpProxyConfig() *plugin.TValue[interface{}] {
	return &c.HttpProxyConfig
}

func (c *mqlAzureSubscriptionAksCluster) GetAddonProfiles() *plugin.TValue[[]interface{}] {
	return &c.AddonProfiles
}

func (c *mqlAzureSubscriptionAksCluster) GetAgentPoolProfiles() *plugin.TValue[[]interface{}] {
	return &c.AgentPoolProfiles
}
