// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

option provider = "go.mondoo.com/cnquery/providers/core"
option go_package = "go.mondoo.com/cnquery/providers/core/resources"

// Provide contextual information about MQL runtime and environment
mondoo @defaults("version") {
  // Version of the client running on the asset
  version() string
  // The build of the client (e.g. production, development)
  build() string
  // The architecture of this client (e.g. linux-amd64)
  arch() string
  // Returns the agent execution environment
  jobEnvironment() dict
  // Connection capabilities
  capabilities() []string
}

// General asset information
asset @defaults("name platform version") {
  // Human readable name of the asset
  name string
  // All identifiers for this asset
  ids []string
  // Platform for this asset (redhat, windows, k8s-pod)
  platform string
  // Kind of platform, for example:
  // api, baremetal, vm, vm-image, container, container-image, network, ...
  kind string
  // Runtime is the specific kind of the platform. Examples include:
  // docker-container, podman-container, aws-ec2-instance, ...
  runtime string
  // Version of the platform
  version string
  // Architecture this OS is running on
  arch string
  // Human-readable title of the platform (e.g. "Red Hat 8, Container")
  title string
  // List of platform families that this platform belongs to
  family []string
  // Fully qualified domain name (optional)
  fqdn string
  // Build version of the platform (optional)
  build string
  // Optional platform information
  labels map[string]string
}

// Date and time functions
time {
  // The current time on the local system
  now() time
  // One second, used for durations
  second() time
  // One minute, used for durations
  minute() time
  // One hour, used for durations
  hour() time
  // One day, used for durations
  day() time
  // The current day starting at midnight
  today() time
  // The next day starting at midnight
  tomorrow() time
}

// Builtin regular expression functions
regex {
  // Matches IPv4 addresses
  ipv4() regex
  // Matches IPv6 addresses
  ipv6() regex
  // Matches URL addresses (HTTP/HTTPS)
  url() regex
  // Matches email addresses
  email() regex
  // Matches MAC addresses
  mac() regex
  // Matches hyphen-deliminated UUIDs
  uuid() regex
  // Matches emojis
  emoji() regex
  // Matches semantic version numbers
  semver() regex
  // Matches credit card numbers
  creditCard() regex
}

// Parse provides common parsers (json, ini, certs, etc)
parse {
  // Builtin functions:
  // date(value, format) time
}

// UUIDs based on RFC 4122 and DCE 1.1
uuid @defaults("value") {
  init(value string)
  // Canonical string representation xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
  value string
  // URN returns the RFC 2141 URN form of uuid
  urn() string
  // Version of uuid
  version() int
  // Variant encoded in uuid
  variant() string
}
