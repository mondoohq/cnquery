// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"mondoo": {
			// to override args, implement: initMondoo(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]interface{}, plugin.Resource, error)
			Create: createMondoo,
		},
		"asset": {
			// to override args, implement: initAsset(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]interface{}, plugin.Resource, error)
			Create: createAsset,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		var err error
		var res plugin.Resource
		args, res, err = f.Init(runtime, args)
		if err != nil || res != nil {
			return res, err
		}
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"mondoo.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlMondoo).GetVersion()).ToDataRes(types.String)
	},
	"mondoo.build": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlMondoo).GetBuild()).ToDataRes(types.String)
	},
	"mondoo.arch": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlMondoo).GetArch()).ToDataRes(types.String)
	},
	"mondoo.jobEnvironment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlMondoo).GetJobEnvironment()).ToDataRes(types.Dict)
	},
	"asset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetName()).ToDataRes(types.String)
	},
	"asset.ids": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetIds()).ToDataRes(types.Array(types.String))
	},
	"asset.platform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetPlatform()).ToDataRes(types.String)
	},
	"asset.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetKind()).ToDataRes(types.String)
	},
	"asset.runtime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetRuntime()).ToDataRes(types.String)
	},
	"asset.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetVersion()).ToDataRes(types.String)
	},
	"asset.arch": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetArch()).ToDataRes(types.String)
	},
	"asset.title": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetTitle()).ToDataRes(types.String)
	},
	"asset.family": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetFamily()).ToDataRes(types.Array(types.String))
	},
	"asset.fqdn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetFqdn()).ToDataRes(types.String)
	},
	"asset.build": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetBuild()).ToDataRes(types.String)
	},
	"asset.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAsset).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"mondoo.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlMondoo).__id, ok = v.Value.(string)
			return
		},
	"mondoo.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlMondoo).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"mondoo.build": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlMondoo).Build, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"mondoo.arch": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlMondoo).Arch, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"mondoo.jobEnvironment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlMondoo).JobEnvironment, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"asset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAsset).__id, ok = v.Value.(string)
			return
		},
	"asset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.ids": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Ids, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"asset.platform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Platform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.runtime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Runtime, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.arch": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Arch, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.title": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Title, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.family": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Family, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"asset.fqdn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Fqdn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.build": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Build, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"asset.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAsset).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[core] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[core] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlMondoo for the mondoo resource
type mqlMondoo struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlMondooInternal it will be used here

	Version plugin.TValue[string]
	Build plugin.TValue[string]
	Arch plugin.TValue[string]
	JobEnvironment plugin.TValue[interface{}]
}

// createMondoo creates a new instance of this resource
func createMondoo(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlMondoo{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("mondoo", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlMondoo) MqlName() string {
	return "mondoo"
}

func (c *mqlMondoo) MqlID() string {
	return c.__id
}

func (c *mqlMondoo) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlMondoo) GetBuild() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Build, func() (string, error) {
		return c.build()
	})
}

func (c *mqlMondoo) GetArch() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Arch, func() (string, error) {
		return c.arch()
	})
}

func (c *mqlMondoo) GetJobEnvironment() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.JobEnvironment, func() (interface{}, error) {
		return c.jobEnvironment()
	})
}

// mqlAsset for the asset resource
type mqlAsset struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAssetInternal it will be used here

	Name plugin.TValue[string]
	Ids plugin.TValue[[]interface{}]
	Platform plugin.TValue[string]
	Kind plugin.TValue[string]
	Runtime plugin.TValue[string]
	Version plugin.TValue[string]
	Arch plugin.TValue[string]
	Title plugin.TValue[string]
	Family plugin.TValue[[]interface{}]
	Fqdn plugin.TValue[string]
	Build plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
}

// createAsset creates a new instance of this resource
func createAsset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAsset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("asset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAsset) MqlName() string {
	return "asset"
}

func (c *mqlAsset) MqlID() string {
	return c.__id
}

func (c *mqlAsset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAsset) GetIds() *plugin.TValue[[]interface{}] {
	return &c.Ids
}

func (c *mqlAsset) GetPlatform() *plugin.TValue[string] {
	return &c.Platform
}

func (c *mqlAsset) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlAsset) GetRuntime() *plugin.TValue[string] {
	return &c.Runtime
}

func (c *mqlAsset) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlAsset) GetArch() *plugin.TValue[string] {
	return &c.Arch
}

func (c *mqlAsset) GetTitle() *plugin.TValue[string] {
	return &c.Title
}

func (c *mqlAsset) GetFamily() *plugin.TValue[[]interface{}] {
	return &c.Family
}

func (c *mqlAsset) GetFqdn() *plugin.TValue[string] {
	return &c.Fqdn
}

func (c *mqlAsset) GetBuild() *plugin.TValue[string] {
	return &c.Build
}

func (c *mqlAsset) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}
