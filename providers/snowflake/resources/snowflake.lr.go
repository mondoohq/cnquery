// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"snowflake": {
			// to override args, implement: initSnowflake(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflake,
		},
		"snowflake.account": {
			// to override args, implement: initSnowflakeAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeAccount,
		},
		"snowflake.user": {
			// to override args, implement: initSnowflakeUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeUser,
		},
		"snowflake.role": {
			// to override args, implement: initSnowflakeRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeRole,
		},
		"snowflake.securityIntegration": {
			// to override args, implement: initSnowflakeSecurityIntegration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeSecurityIntegration,
		},
		"snowflake.passwordPolicy": {
			// to override args, implement: initSnowflakePasswordPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakePasswordPolicy,
		},
		"snowflake.networkPolicy": {
			// to override args, implement: initSnowflakeNetworkPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeNetworkPolicy,
		},
		"snowflake.procedure": {
			// to override args, implement: initSnowflakeProcedure(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeProcedure,
		},
		"snowflake.parameter": {
			// to override args, implement: initSnowflakeParameter(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeParameter,
		},
		"snowflake.stage": {
			// to override args, implement: initSnowflakeStage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeStage,
		},
		"snowflake.database": {
			// to override args, implement: initSnowflakeDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeDatabase,
		},
		"snowflake.warehouse": {
			// to override args, implement: initSnowflakeWarehouse(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeWarehouse,
		},
		"snowflake.view": {
			// to override args, implement: initSnowflakeView(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSnowflakeView,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"snowflake.currentRole": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflake).GetCurrentRole()).ToDataRes(types.String)
	},
	"snowflake.account.accountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetAccountId()).ToDataRes(types.String)
	},
	"snowflake.account.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetRegion()).ToDataRes(types.String)
	},
	"snowflake.account.url": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetUrl()).ToDataRes(types.String)
	},
	"snowflake.account.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetUsers()).ToDataRes(types.Array(types.Resource("snowflake.user")))
	},
	"snowflake.account.roles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetRoles()).ToDataRes(types.Array(types.Resource("snowflake.role")))
	},
	"snowflake.account.securityIntegrations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetSecurityIntegrations()).ToDataRes(types.Array(types.Resource("snowflake.securityIntegration")))
	},
	"snowflake.account.passwordPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetPasswordPolicies()).ToDataRes(types.Array(types.Resource("snowflake.passwordPolicy")))
	},
	"snowflake.account.networkPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetNetworkPolicies()).ToDataRes(types.Array(types.Resource("snowflake.networkPolicy")))
	},
	"snowflake.account.procedures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetProcedures()).ToDataRes(types.Array(types.Resource("snowflake.procedure")))
	},
	"snowflake.account.parameters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetParameters()).ToDataRes(types.Array(types.Resource("snowflake.parameter")))
	},
	"snowflake.account.stages": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetStages()).ToDataRes(types.Array(types.Resource("snowflake.stage")))
	},
	"snowflake.account.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetDatabases()).ToDataRes(types.Array(types.Resource("snowflake.database")))
	},
	"snowflake.account.warehouses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeAccount).GetWarehouses()).ToDataRes(types.Array(types.Resource("snowflake.warehouse")))
	},
	"snowflake.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetName()).ToDataRes(types.String)
	},
	"snowflake.user.login": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetLogin()).ToDataRes(types.String)
	},
	"snowflake.user.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetDisplayName()).ToDataRes(types.String)
	},
	"snowflake.user.firstName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetFirstName()).ToDataRes(types.String)
	},
	"snowflake.user.lastName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetLastName()).ToDataRes(types.String)
	},
	"snowflake.user.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetEmail()).ToDataRes(types.String)
	},
	"snowflake.user.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetComment()).ToDataRes(types.String)
	},
	"snowflake.user.defaultWarehouse": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetDefaultWarehouse()).ToDataRes(types.String)
	},
	"snowflake.user.defaultNamespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetDefaultNamespace()).ToDataRes(types.String)
	},
	"snowflake.user.defaultRole": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetDefaultRole()).ToDataRes(types.String)
	},
	"snowflake.user.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetDisabled()).ToDataRes(types.Bool)
	},
	"snowflake.user.hasPassword": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetHasPassword()).ToDataRes(types.Bool)
	},
	"snowflake.user.hasRsaPublicKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetHasRsaPublicKey()).ToDataRes(types.Bool)
	},
	"snowflake.user.mustChangePassword": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetMustChangePassword()).ToDataRes(types.Bool)
	},
	"snowflake.user.lastSuccessLogin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetLastSuccessLogin()).ToDataRes(types.Time)
	},
	"snowflake.user.lockedUntil": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetLockedUntil()).ToDataRes(types.Time)
	},
	"snowflake.user.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.user.expiresAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetExpiresAt()).ToDataRes(types.Time)
	},
	"snowflake.user.extAuthnDuo": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetExtAuthnDuo()).ToDataRes(types.Bool)
	},
	"snowflake.user.extAuthnUid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetExtAuthnUid()).ToDataRes(types.String)
	},
	"snowflake.user.parameters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeUser).GetParameters()).ToDataRes(types.Array(types.Resource("snowflake.parameter")))
	},
	"snowflake.role.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetName()).ToDataRes(types.String)
	},
	"snowflake.role.isDefault": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetIsDefault()).ToDataRes(types.Bool)
	},
	"snowflake.role.isCurrent": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetIsCurrent()).ToDataRes(types.Bool)
	},
	"snowflake.role.isInherited": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetIsInherited()).ToDataRes(types.Bool)
	},
	"snowflake.role.assignedToUsers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetAssignedToUsers()).ToDataRes(types.Int)
	},
	"snowflake.role.grantedToRoles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetGrantedToRoles()).ToDataRes(types.Int)
	},
	"snowflake.role.grantedRoles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetGrantedRoles()).ToDataRes(types.Int)
	},
	"snowflake.role.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.role.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeRole).GetComment()).ToDataRes(types.String)
	},
	"snowflake.securityIntegration.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetName()).ToDataRes(types.String)
	},
	"snowflake.securityIntegration.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetType()).ToDataRes(types.String)
	},
	"snowflake.securityIntegration.category": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetCategory()).ToDataRes(types.String)
	},
	"snowflake.securityIntegration.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetComment()).ToDataRes(types.String)
	},
	"snowflake.securityIntegration.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetEnabled()).ToDataRes(types.Bool)
	},
	"snowflake.securityIntegration.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeSecurityIntegration).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.passwordPolicy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetName()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.databaseName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetDatabaseName()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.schemaName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetSchemaName()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetKind()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetComment()).ToDataRes(types.String)
	},
	"snowflake.passwordPolicy.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.passwordPolicy.passwordMinLength": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinLength()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMaxLength": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMaxLength()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMinUpperCaseChars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinUpperCaseChars()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMinLowerCaseChars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinLowerCaseChars()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMinNumericChars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinNumericChars()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMinSpecialChars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinSpecialChars()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMinAgeDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMinAgeDays()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMaxAgeDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMaxAgeDays()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordMaxRetries": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordMaxRetries()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordLockoutTimeMins": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordLockoutTimeMins()).ToDataRes(types.Int)
	},
	"snowflake.passwordPolicy.passwordHistory": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakePasswordPolicy).GetPasswordHistory()).ToDataRes(types.Int)
	},
	"snowflake.networkPolicy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetName()).ToDataRes(types.String)
	},
	"snowflake.networkPolicy.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetComment()).ToDataRes(types.String)
	},
	"snowflake.networkPolicy.entriesInAllowedIpList": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetEntriesInAllowedIpList()).ToDataRes(types.Int)
	},
	"snowflake.networkPolicy.entriesInBlockedIpList": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetEntriesInBlockedIpList()).ToDataRes(types.Int)
	},
	"snowflake.networkPolicy.entriesInAllowedNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetEntriesInAllowedNetworkRules()).ToDataRes(types.Int)
	},
	"snowflake.networkPolicy.entriesInBlockedNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetEntriesInBlockedNetworkRules()).ToDataRes(types.Int)
	},
	"snowflake.networkPolicy.allowedIpList": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetAllowedIpList()).ToDataRes(types.Array(types.String))
	},
	"snowflake.networkPolicy.blockedIpList": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetBlockedIpList()).ToDataRes(types.Array(types.String))
	},
	"snowflake.networkPolicy.allowedNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetAllowedNetworkRules()).ToDataRes(types.Array(types.String))
	},
	"snowflake.networkPolicy.blockedNetworkRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetBlockedNetworkRules()).ToDataRes(types.Array(types.String))
	},
	"snowflake.networkPolicy.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeNetworkPolicy).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.procedure.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetName()).ToDataRes(types.String)
	},
	"snowflake.procedure.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetDescription()).ToDataRes(types.String)
	},
	"snowflake.procedure.schemaName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetSchemaName()).ToDataRes(types.String)
	},
	"snowflake.procedure.isBuiltin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetIsBuiltin()).ToDataRes(types.Bool)
	},
	"snowflake.procedure.isAggregate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetIsAggregate()).ToDataRes(types.Bool)
	},
	"snowflake.procedure.isAnsi": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetIsAnsi()).ToDataRes(types.Bool)
	},
	"snowflake.procedure.minNumberOfArguments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetMinNumberOfArguments()).ToDataRes(types.Int)
	},
	"snowflake.procedure.maxNumberOfArguments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetMaxNumberOfArguments()).ToDataRes(types.Int)
	},
	"snowflake.procedure.arguments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetArguments()).ToDataRes(types.String)
	},
	"snowflake.procedure.catalogName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetCatalogName()).ToDataRes(types.String)
	},
	"snowflake.procedure.isTableFunction": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetIsTableFunction()).ToDataRes(types.Bool)
	},
	"snowflake.procedure.validForClustering": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetValidForClustering()).ToDataRes(types.Bool)
	},
	"snowflake.procedure.isSecure": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeProcedure).GetIsSecure()).ToDataRes(types.Bool)
	},
	"snowflake.parameter.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeParameter).GetKey()).ToDataRes(types.String)
	},
	"snowflake.parameter.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeParameter).GetValue()).ToDataRes(types.String)
	},
	"snowflake.parameter.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeParameter).GetDescription()).ToDataRes(types.String)
	},
	"snowflake.parameter.defaultValue": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeParameter).GetDefaultValue()).ToDataRes(types.String)
	},
	"snowflake.parameter.level": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeParameter).GetLevel()).ToDataRes(types.String)
	},
	"snowflake.stage.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetName()).ToDataRes(types.String)
	},
	"snowflake.stage.databaseName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetDatabaseName()).ToDataRes(types.String)
	},
	"snowflake.stage.schemaName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetSchemaName()).ToDataRes(types.String)
	},
	"snowflake.stage.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.stage.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetComment()).ToDataRes(types.String)
	},
	"snowflake.stage.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.stage.hasCredentials": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetHasCredentials()).ToDataRes(types.Bool)
	},
	"snowflake.stage.hasEncryptionKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetHasEncryptionKey()).ToDataRes(types.Bool)
	},
	"snowflake.stage.url": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetUrl()).ToDataRes(types.String)
	},
	"snowflake.stage.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetType()).ToDataRes(types.String)
	},
	"snowflake.stage.cloud": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetCloud()).ToDataRes(types.String)
	},
	"snowflake.stage.storeIntegration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetStoreIntegration()).ToDataRes(types.String)
	},
	"snowflake.stage.endpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetEndpoint()).ToDataRes(types.String)
	},
	"snowflake.stage.ownerRoleType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetOwnerRoleType()).ToDataRes(types.String)
	},
	"snowflake.stage.directoryEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeStage).GetDirectoryEnabled()).ToDataRes(types.Bool)
	},
	"snowflake.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetName()).ToDataRes(types.String)
	},
	"snowflake.database.isDefault": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetIsDefault()).ToDataRes(types.Bool)
	},
	"snowflake.database.isCurrent": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetIsCurrent()).ToDataRes(types.Bool)
	},
	"snowflake.database.origin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetOrigin()).ToDataRes(types.String)
	},
	"snowflake.database.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.database.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetComment()).ToDataRes(types.String)
	},
	"snowflake.database.options": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetOptions()).ToDataRes(types.String)
	},
	"snowflake.database.retentionTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetRetentionTime()).ToDataRes(types.Int)
	},
	"snowflake.database.resourceGroup": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetResourceGroup()).ToDataRes(types.String)
	},
	"snowflake.database.transient": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetTransient()).ToDataRes(types.Bool)
	},
	"snowflake.database.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.database.droppedAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeDatabase).GetDroppedAt()).ToDataRes(types.Time)
	},
	"snowflake.warehouse.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetName()).ToDataRes(types.String)
	},
	"snowflake.warehouse.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetState()).ToDataRes(types.String)
	},
	"snowflake.warehouse.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetType()).ToDataRes(types.String)
	},
	"snowflake.warehouse.size": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetSize()).ToDataRes(types.String)
	},
	"snowflake.warehouse.minClusterCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetMinClusterCount()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.maxClusterCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetMaxClusterCount()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.startedClusterCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetStartedClusterCount()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.running": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetRunning()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.queued": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetQueued()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.isDefault": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetIsDefault()).ToDataRes(types.Bool)
	},
	"snowflake.warehouse.isCurrent": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetIsCurrent()).ToDataRes(types.Bool)
	},
	"snowflake.warehouse.autoSuspend": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetAutoSuspend()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.autoResume": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetAutoResume()).ToDataRes(types.Bool)
	},
	"snowflake.warehouse.available": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetAvailable()).ToDataRes(types.Float)
	},
	"snowflake.warehouse.provisioning": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetProvisioning()).ToDataRes(types.Float)
	},
	"snowflake.warehouse.quiescing": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetQuiescing()).ToDataRes(types.Float)
	},
	"snowflake.warehouse.other": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetOther()).ToDataRes(types.Float)
	},
	"snowflake.warehouse.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.warehouse.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetComment()).ToDataRes(types.String)
	},
	"snowflake.warehouse.enableQueryAcceleration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetEnableQueryAcceleration()).ToDataRes(types.Bool)
	},
	"snowflake.warehouse.queryAccelerationMaxScaleFactor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetQueryAccelerationMaxScaleFactor()).ToDataRes(types.Int)
	},
	"snowflake.warehouse.resourceMonitor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetResourceMonitor()).ToDataRes(types.String)
	},
	"snowflake.warehouse.scalingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetScalingPolicy()).ToDataRes(types.String)
	},
	"snowflake.warehouse.ownerRoleType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetOwnerRoleType()).ToDataRes(types.String)
	},
	"snowflake.warehouse.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetCreatedAt()).ToDataRes(types.Time)
	},
	"snowflake.warehouse.resumedAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetResumedAt()).ToDataRes(types.Time)
	},
	"snowflake.warehouse.updatedAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeWarehouse).GetUpdatedAt()).ToDataRes(types.Time)
	},
	"snowflake.view.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetName()).ToDataRes(types.String)
	},
	"snowflake.view.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetKind()).ToDataRes(types.String)
	},
	"snowflake.view.reserved": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetReserved()).ToDataRes(types.String)
	},
	"snowflake.view.databaseName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetDatabaseName()).ToDataRes(types.String)
	},
	"snowflake.view.schemaName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetSchemaName()).ToDataRes(types.String)
	},
	"snowflake.view.owner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetOwner()).ToDataRes(types.String)
	},
	"snowflake.view.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetComment()).ToDataRes(types.String)
	},
	"snowflake.view.text": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetText()).ToDataRes(types.String)
	},
	"snowflake.view.isSecure": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetIsSecure()).ToDataRes(types.Bool)
	},
	"snowflake.view.isMaterialized": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetIsMaterialized()).ToDataRes(types.Bool)
	},
	"snowflake.view.ownerRoleType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetOwnerRoleType()).ToDataRes(types.String)
	},
	"snowflake.view.changeTracking": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSnowflakeView).GetChangeTracking()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"snowflake.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflake).__id, ok = v.Value.(string)
			return
		},
	"snowflake.currentRole": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflake).CurrentRole, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeAccount).__id, ok = v.Value.(string)
			return
		},
	"snowflake.account.accountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).AccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.account.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.account.url": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Url, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.account.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.roles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Roles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.securityIntegrations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).SecurityIntegrations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.passwordPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).PasswordPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.networkPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).NetworkPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.procedures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Procedures, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.parameters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Parameters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.stages": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Stages, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.account.warehouses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeAccount).Warehouses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeUser).__id, ok = v.Value.(string)
			return
		},
	"snowflake.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.login": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Login, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.firstName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).FirstName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.lastName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).LastName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.defaultWarehouse": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).DefaultWarehouse, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.defaultNamespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).DefaultNamespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.defaultRole": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).DefaultRole, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.user.hasPassword": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).HasPassword, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.user.hasRsaPublicKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).HasRsaPublicKey, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.user.mustChangePassword": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).MustChangePassword, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.user.lastSuccessLogin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).LastSuccessLogin, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.user.lockedUntil": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).LockedUntil, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.user.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.user.expiresAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).ExpiresAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.user.extAuthnDuo": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).ExtAuthnDuo, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.user.extAuthnUid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).ExtAuthnUid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.user.parameters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeUser).Parameters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.role.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeRole).__id, ok = v.Value.(string)
			return
		},
	"snowflake.role.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.role.isDefault": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).IsDefault, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.role.isCurrent": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).IsCurrent, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.role.isInherited": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).IsInherited, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.role.assignedToUsers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).AssignedToUsers, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.role.grantedToRoles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).GrantedToRoles, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.role.grantedRoles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).GrantedRoles, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.role.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.role.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeRole).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeSecurityIntegration).__id, ok = v.Value.(string)
			return
		},
	"snowflake.securityIntegration.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.category": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).Category, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.securityIntegration.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeSecurityIntegration).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakePasswordPolicy).__id, ok = v.Value.(string)
			return
		},
	"snowflake.passwordPolicy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.databaseName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).DatabaseName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.schemaName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).SchemaName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinLength": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinLength, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMaxLength": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMaxLength, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinUpperCaseChars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinUpperCaseChars, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinLowerCaseChars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinLowerCaseChars, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinNumericChars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinNumericChars, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinSpecialChars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinSpecialChars, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMinAgeDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMinAgeDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMaxAgeDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMaxAgeDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordMaxRetries": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordMaxRetries, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordLockoutTimeMins": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordLockoutTimeMins, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.passwordPolicy.passwordHistory": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakePasswordPolicy).PasswordHistory, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeNetworkPolicy).__id, ok = v.Value.(string)
			return
		},
	"snowflake.networkPolicy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.entriesInAllowedIpList": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).EntriesInAllowedIpList, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.entriesInBlockedIpList": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).EntriesInBlockedIpList, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.entriesInAllowedNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).EntriesInAllowedNetworkRules, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.entriesInBlockedNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).EntriesInBlockedNetworkRules, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.allowedIpList": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).AllowedIpList, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.blockedIpList": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).BlockedIpList, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.allowedNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).AllowedNetworkRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.blockedNetworkRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).BlockedNetworkRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"snowflake.networkPolicy.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeNetworkPolicy).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.procedure.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeProcedure).__id, ok = v.Value.(string)
			return
		},
	"snowflake.procedure.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.procedure.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.procedure.schemaName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).SchemaName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.procedure.isBuiltin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).IsBuiltin, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.procedure.isAggregate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).IsAggregate, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.procedure.isAnsi": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).IsAnsi, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.procedure.minNumberOfArguments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).MinNumberOfArguments, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.procedure.maxNumberOfArguments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).MaxNumberOfArguments, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.procedure.arguments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).Arguments, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.procedure.catalogName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).CatalogName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.procedure.isTableFunction": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).IsTableFunction, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.procedure.validForClustering": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).ValidForClustering, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.procedure.isSecure": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeProcedure).IsSecure, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.parameter.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeParameter).__id, ok = v.Value.(string)
			return
		},
	"snowflake.parameter.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeParameter).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.parameter.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeParameter).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.parameter.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeParameter).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.parameter.defaultValue": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeParameter).DefaultValue, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.parameter.level": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeParameter).Level, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeStage).__id, ok = v.Value.(string)
			return
		},
	"snowflake.stage.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.databaseName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).DatabaseName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.schemaName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).SchemaName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.stage.hasCredentials": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).HasCredentials, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.stage.hasEncryptionKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).HasEncryptionKey, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.stage.url": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Url, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.cloud": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Cloud, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.storeIntegration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).StoreIntegration, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.endpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).Endpoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.ownerRoleType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).OwnerRoleType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.stage.directoryEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeStage).DirectoryEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeDatabase).__id, ok = v.Value.(string)
			return
		},
	"snowflake.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.isDefault": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).IsDefault, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.database.isCurrent": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).IsCurrent, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.database.origin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Origin, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.options": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Options, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.retentionTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).RetentionTime, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.database.resourceGroup": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).ResourceGroup, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.database.transient": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).Transient, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.database.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.database.droppedAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeDatabase).DroppedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeWarehouse).__id, ok = v.Value.(string)
			return
		},
	"snowflake.warehouse.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.size": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Size, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.minClusterCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).MinClusterCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.maxClusterCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).MaxClusterCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.startedClusterCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).StartedClusterCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.running": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Running, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.queued": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Queued, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.isDefault": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).IsDefault, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.isCurrent": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).IsCurrent, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.autoSuspend": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).AutoSuspend, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.autoResume": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).AutoResume, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.available": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Available, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.provisioning": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Provisioning, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.quiescing": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Quiescing, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.other": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Other, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.enableQueryAcceleration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).EnableQueryAcceleration, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.queryAccelerationMaxScaleFactor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).QueryAccelerationMaxScaleFactor, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.resourceMonitor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).ResourceMonitor, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.scalingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).ScalingPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.ownerRoleType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).OwnerRoleType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.resumedAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).ResumedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.warehouse.updatedAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeWarehouse).UpdatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"snowflake.view.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSnowflakeView).__id, ok = v.Value.(string)
			return
		},
	"snowflake.view.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.reserved": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Reserved, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.databaseName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).DatabaseName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.schemaName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).SchemaName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.owner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Owner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.text": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).Text, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.isSecure": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).IsSecure, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.view.isMaterialized": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).IsMaterialized, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"snowflake.view.ownerRoleType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).OwnerRoleType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"snowflake.view.changeTracking": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSnowflakeView).ChangeTracking, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[snowflake] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[snowflake] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlSnowflake for the snowflake resource
type mqlSnowflake struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeInternal it will be used here
	CurrentRole plugin.TValue[string]
}

// createSnowflake creates a new instance of this resource
func createSnowflake(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflake{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflake) MqlName() string {
	return "snowflake"
}

func (c *mqlSnowflake) MqlID() string {
	return c.__id
}

func (c *mqlSnowflake) GetCurrentRole() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.CurrentRole, func() (string, error) {
		return c.currentRole()
	})
}

// mqlSnowflakeAccount for the snowflake.account resource
type mqlSnowflakeAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeAccountInternal it will be used here
	AccountId plugin.TValue[string]
	Region plugin.TValue[string]
	Url plugin.TValue[string]
	Users plugin.TValue[[]interface{}]
	Roles plugin.TValue[[]interface{}]
	SecurityIntegrations plugin.TValue[[]interface{}]
	PasswordPolicies plugin.TValue[[]interface{}]
	NetworkPolicies plugin.TValue[[]interface{}]
	Procedures plugin.TValue[[]interface{}]
	Parameters plugin.TValue[[]interface{}]
	Stages plugin.TValue[[]interface{}]
	Databases plugin.TValue[[]interface{}]
	Warehouses plugin.TValue[[]interface{}]
}

// createSnowflakeAccount creates a new instance of this resource
func createSnowflakeAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeAccount) MqlName() string {
	return "snowflake.account"
}

func (c *mqlSnowflakeAccount) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeAccount) GetAccountId() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AccountId, func() (string, error) {
		return c.accountId()
	})
}

func (c *mqlSnowflakeAccount) GetRegion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Region, func() (string, error) {
		return c.region()
	})
}

func (c *mqlSnowflakeAccount) GetUrl() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Url, func() (string, error) {
		return c.url()
	})
}

func (c *mqlSnowflakeAccount) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlSnowflakeAccount) GetRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Roles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "roles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roles()
	})
}

func (c *mqlSnowflakeAccount) GetSecurityIntegrations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityIntegrations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "securityIntegrations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityIntegrations()
	})
}

func (c *mqlSnowflakeAccount) GetPasswordPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.PasswordPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "passwordPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.passwordPolicies()
	})
}

func (c *mqlSnowflakeAccount) GetNetworkPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.NetworkPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "networkPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.networkPolicies()
	})
}

func (c *mqlSnowflakeAccount) GetProcedures() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Procedures, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "procedures")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.procedures()
	})
}

func (c *mqlSnowflakeAccount) GetParameters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Parameters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "parameters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.parameters()
	})
}

func (c *mqlSnowflakeAccount) GetStages() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Stages, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "stages")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.stages()
	})
}

func (c *mqlSnowflakeAccount) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

func (c *mqlSnowflakeAccount) GetWarehouses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Warehouses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.account", c.__id, "warehouses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.warehouses()
	})
}

// mqlSnowflakeUser for the snowflake.user resource
type mqlSnowflakeUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeUserInternal it will be used here
	Name plugin.TValue[string]
	Login plugin.TValue[string]
	DisplayName plugin.TValue[string]
	FirstName plugin.TValue[string]
	LastName plugin.TValue[string]
	Email plugin.TValue[string]
	Comment plugin.TValue[string]
	DefaultWarehouse plugin.TValue[string]
	DefaultNamespace plugin.TValue[string]
	DefaultRole plugin.TValue[string]
	Disabled plugin.TValue[bool]
	HasPassword plugin.TValue[bool]
	HasRsaPublicKey plugin.TValue[bool]
	MustChangePassword plugin.TValue[bool]
	LastSuccessLogin plugin.TValue[*time.Time]
	LockedUntil plugin.TValue[*time.Time]
	CreatedAt plugin.TValue[*time.Time]
	ExpiresAt plugin.TValue[*time.Time]
	ExtAuthnDuo plugin.TValue[bool]
	ExtAuthnUid plugin.TValue[string]
	Parameters plugin.TValue[[]interface{}]
}

// createSnowflakeUser creates a new instance of this resource
func createSnowflakeUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeUser) MqlName() string {
	return "snowflake.user"
}

func (c *mqlSnowflakeUser) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeUser) GetLogin() *plugin.TValue[string] {
	return &c.Login
}

func (c *mqlSnowflakeUser) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlSnowflakeUser) GetFirstName() *plugin.TValue[string] {
	return &c.FirstName
}

func (c *mqlSnowflakeUser) GetLastName() *plugin.TValue[string] {
	return &c.LastName
}

func (c *mqlSnowflakeUser) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlSnowflakeUser) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeUser) GetDefaultWarehouse() *plugin.TValue[string] {
	return &c.DefaultWarehouse
}

func (c *mqlSnowflakeUser) GetDefaultNamespace() *plugin.TValue[string] {
	return &c.DefaultNamespace
}

func (c *mqlSnowflakeUser) GetDefaultRole() *plugin.TValue[string] {
	return &c.DefaultRole
}

func (c *mqlSnowflakeUser) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

func (c *mqlSnowflakeUser) GetHasPassword() *plugin.TValue[bool] {
	return &c.HasPassword
}

func (c *mqlSnowflakeUser) GetHasRsaPublicKey() *plugin.TValue[bool] {
	return &c.HasRsaPublicKey
}

func (c *mqlSnowflakeUser) GetMustChangePassword() *plugin.TValue[bool] {
	return &c.MustChangePassword
}

func (c *mqlSnowflakeUser) GetLastSuccessLogin() *plugin.TValue[*time.Time] {
	return &c.LastSuccessLogin
}

func (c *mqlSnowflakeUser) GetLockedUntil() *plugin.TValue[*time.Time] {
	return &c.LockedUntil
}

func (c *mqlSnowflakeUser) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlSnowflakeUser) GetExpiresAt() *plugin.TValue[*time.Time] {
	return &c.ExpiresAt
}

func (c *mqlSnowflakeUser) GetExtAuthnDuo() *plugin.TValue[bool] {
	return &c.ExtAuthnDuo
}

func (c *mqlSnowflakeUser) GetExtAuthnUid() *plugin.TValue[string] {
	return &c.ExtAuthnUid
}

func (c *mqlSnowflakeUser) GetParameters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Parameters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("snowflake.user", c.__id, "parameters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.parameters()
	})
}

// mqlSnowflakeRole for the snowflake.role resource
type mqlSnowflakeRole struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeRoleInternal it will be used here
	Name plugin.TValue[string]
	IsDefault plugin.TValue[bool]
	IsCurrent plugin.TValue[bool]
	IsInherited plugin.TValue[bool]
	AssignedToUsers plugin.TValue[int64]
	GrantedToRoles plugin.TValue[int64]
	GrantedRoles plugin.TValue[int64]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
}

// createSnowflakeRole creates a new instance of this resource
func createSnowflakeRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeRole{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.role", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeRole) MqlName() string {
	return "snowflake.role"
}

func (c *mqlSnowflakeRole) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeRole) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeRole) GetIsDefault() *plugin.TValue[bool] {
	return &c.IsDefault
}

func (c *mqlSnowflakeRole) GetIsCurrent() *plugin.TValue[bool] {
	return &c.IsCurrent
}

func (c *mqlSnowflakeRole) GetIsInherited() *plugin.TValue[bool] {
	return &c.IsInherited
}

func (c *mqlSnowflakeRole) GetAssignedToUsers() *plugin.TValue[int64] {
	return &c.AssignedToUsers
}

func (c *mqlSnowflakeRole) GetGrantedToRoles() *plugin.TValue[int64] {
	return &c.GrantedToRoles
}

func (c *mqlSnowflakeRole) GetGrantedRoles() *plugin.TValue[int64] {
	return &c.GrantedRoles
}

func (c *mqlSnowflakeRole) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakeRole) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

// mqlSnowflakeSecurityIntegration for the snowflake.securityIntegration resource
type mqlSnowflakeSecurityIntegration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeSecurityIntegrationInternal it will be used here
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Category plugin.TValue[string]
	Comment plugin.TValue[string]
	Enabled plugin.TValue[bool]
	CreatedAt plugin.TValue[*time.Time]
}

// createSnowflakeSecurityIntegration creates a new instance of this resource
func createSnowflakeSecurityIntegration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeSecurityIntegration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.securityIntegration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeSecurityIntegration) MqlName() string {
	return "snowflake.securityIntegration"
}

func (c *mqlSnowflakeSecurityIntegration) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeSecurityIntegration) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeSecurityIntegration) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlSnowflakeSecurityIntegration) GetCategory() *plugin.TValue[string] {
	return &c.Category
}

func (c *mqlSnowflakeSecurityIntegration) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeSecurityIntegration) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlSnowflakeSecurityIntegration) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

// mqlSnowflakePasswordPolicy for the snowflake.passwordPolicy resource
type mqlSnowflakePasswordPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakePasswordPolicyInternal it will be used here
	Name plugin.TValue[string]
	DatabaseName plugin.TValue[string]
	SchemaName plugin.TValue[string]
	Kind plugin.TValue[string]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	PasswordMinLength plugin.TValue[int64]
	PasswordMaxLength plugin.TValue[int64]
	PasswordMinUpperCaseChars plugin.TValue[int64]
	PasswordMinLowerCaseChars plugin.TValue[int64]
	PasswordMinNumericChars plugin.TValue[int64]
	PasswordMinSpecialChars plugin.TValue[int64]
	PasswordMinAgeDays plugin.TValue[int64]
	PasswordMaxAgeDays plugin.TValue[int64]
	PasswordMaxRetries plugin.TValue[int64]
	PasswordLockoutTimeMins plugin.TValue[int64]
	PasswordHistory plugin.TValue[int64]
}

// createSnowflakePasswordPolicy creates a new instance of this resource
func createSnowflakePasswordPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakePasswordPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.passwordPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakePasswordPolicy) MqlName() string {
	return "snowflake.passwordPolicy"
}

func (c *mqlSnowflakePasswordPolicy) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakePasswordPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakePasswordPolicy) GetDatabaseName() *plugin.TValue[string] {
	return &c.DatabaseName
}

func (c *mqlSnowflakePasswordPolicy) GetSchemaName() *plugin.TValue[string] {
	return &c.SchemaName
}

func (c *mqlSnowflakePasswordPolicy) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlSnowflakePasswordPolicy) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakePasswordPolicy) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakePasswordPolicy) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinLength() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinLength, func() (int64, error) {
		return c.passwordMinLength()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMaxLength() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMaxLength, func() (int64, error) {
		return c.passwordMaxLength()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinUpperCaseChars() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinUpperCaseChars, func() (int64, error) {
		return c.passwordMinUpperCaseChars()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinLowerCaseChars() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinLowerCaseChars, func() (int64, error) {
		return c.passwordMinLowerCaseChars()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinNumericChars() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinNumericChars, func() (int64, error) {
		return c.passwordMinNumericChars()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinSpecialChars() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinSpecialChars, func() (int64, error) {
		return c.passwordMinSpecialChars()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMinAgeDays() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMinAgeDays, func() (int64, error) {
		return c.passwordMinAgeDays()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMaxAgeDays() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMaxAgeDays, func() (int64, error) {
		return c.passwordMaxAgeDays()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordMaxRetries() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordMaxRetries, func() (int64, error) {
		return c.passwordMaxRetries()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordLockoutTimeMins() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordLockoutTimeMins, func() (int64, error) {
		return c.passwordLockoutTimeMins()
	})
}

func (c *mqlSnowflakePasswordPolicy) GetPasswordHistory() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.PasswordHistory, func() (int64, error) {
		return c.passwordHistory()
	})
}

// mqlSnowflakeNetworkPolicy for the snowflake.networkPolicy resource
type mqlSnowflakeNetworkPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlSnowflakeNetworkPolicyInternal
	Name plugin.TValue[string]
	Comment plugin.TValue[string]
	EntriesInAllowedIpList plugin.TValue[int64]
	EntriesInBlockedIpList plugin.TValue[int64]
	EntriesInAllowedNetworkRules plugin.TValue[int64]
	EntriesInBlockedNetworkRules plugin.TValue[int64]
	AllowedIpList plugin.TValue[[]interface{}]
	BlockedIpList plugin.TValue[[]interface{}]
	AllowedNetworkRules plugin.TValue[[]interface{}]
	BlockedNetworkRules plugin.TValue[[]interface{}]
	CreatedAt plugin.TValue[*time.Time]
}

// createSnowflakeNetworkPolicy creates a new instance of this resource
func createSnowflakeNetworkPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeNetworkPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.networkPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeNetworkPolicy) MqlName() string {
	return "snowflake.networkPolicy"
}

func (c *mqlSnowflakeNetworkPolicy) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeNetworkPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeNetworkPolicy) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeNetworkPolicy) GetEntriesInAllowedIpList() *plugin.TValue[int64] {
	return &c.EntriesInAllowedIpList
}

func (c *mqlSnowflakeNetworkPolicy) GetEntriesInBlockedIpList() *plugin.TValue[int64] {
	return &c.EntriesInBlockedIpList
}

func (c *mqlSnowflakeNetworkPolicy) GetEntriesInAllowedNetworkRules() *plugin.TValue[int64] {
	return &c.EntriesInAllowedNetworkRules
}

func (c *mqlSnowflakeNetworkPolicy) GetEntriesInBlockedNetworkRules() *plugin.TValue[int64] {
	return &c.EntriesInBlockedNetworkRules
}

func (c *mqlSnowflakeNetworkPolicy) GetAllowedIpList() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AllowedIpList, func() ([]interface{}, error) {
		return c.allowedIpList()
	})
}

func (c *mqlSnowflakeNetworkPolicy) GetBlockedIpList() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BlockedIpList, func() ([]interface{}, error) {
		return c.blockedIpList()
	})
}

func (c *mqlSnowflakeNetworkPolicy) GetAllowedNetworkRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AllowedNetworkRules, func() ([]interface{}, error) {
		return c.allowedNetworkRules()
	})
}

func (c *mqlSnowflakeNetworkPolicy) GetBlockedNetworkRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BlockedNetworkRules, func() ([]interface{}, error) {
		return c.blockedNetworkRules()
	})
}

func (c *mqlSnowflakeNetworkPolicy) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

// mqlSnowflakeProcedure for the snowflake.procedure resource
type mqlSnowflakeProcedure struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeProcedureInternal it will be used here
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	SchemaName plugin.TValue[string]
	IsBuiltin plugin.TValue[bool]
	IsAggregate plugin.TValue[bool]
	IsAnsi plugin.TValue[bool]
	MinNumberOfArguments plugin.TValue[int64]
	MaxNumberOfArguments plugin.TValue[int64]
	Arguments plugin.TValue[string]
	CatalogName plugin.TValue[string]
	IsTableFunction plugin.TValue[bool]
	ValidForClustering plugin.TValue[bool]
	IsSecure plugin.TValue[bool]
}

// createSnowflakeProcedure creates a new instance of this resource
func createSnowflakeProcedure(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeProcedure{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.procedure", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeProcedure) MqlName() string {
	return "snowflake.procedure"
}

func (c *mqlSnowflakeProcedure) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeProcedure) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeProcedure) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlSnowflakeProcedure) GetSchemaName() *plugin.TValue[string] {
	return &c.SchemaName
}

func (c *mqlSnowflakeProcedure) GetIsBuiltin() *plugin.TValue[bool] {
	return &c.IsBuiltin
}

func (c *mqlSnowflakeProcedure) GetIsAggregate() *plugin.TValue[bool] {
	return &c.IsAggregate
}

func (c *mqlSnowflakeProcedure) GetIsAnsi() *plugin.TValue[bool] {
	return &c.IsAnsi
}

func (c *mqlSnowflakeProcedure) GetMinNumberOfArguments() *plugin.TValue[int64] {
	return &c.MinNumberOfArguments
}

func (c *mqlSnowflakeProcedure) GetMaxNumberOfArguments() *plugin.TValue[int64] {
	return &c.MaxNumberOfArguments
}

func (c *mqlSnowflakeProcedure) GetArguments() *plugin.TValue[string] {
	return &c.Arguments
}

func (c *mqlSnowflakeProcedure) GetCatalogName() *plugin.TValue[string] {
	return &c.CatalogName
}

func (c *mqlSnowflakeProcedure) GetIsTableFunction() *plugin.TValue[bool] {
	return &c.IsTableFunction
}

func (c *mqlSnowflakeProcedure) GetValidForClustering() *plugin.TValue[bool] {
	return &c.ValidForClustering
}

func (c *mqlSnowflakeProcedure) GetIsSecure() *plugin.TValue[bool] {
	return &c.IsSecure
}

// mqlSnowflakeParameter for the snowflake.parameter resource
type mqlSnowflakeParameter struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeParameterInternal it will be used here
	Key plugin.TValue[string]
	Value plugin.TValue[string]
	Description plugin.TValue[string]
	DefaultValue plugin.TValue[string]
	Level plugin.TValue[string]
}

// createSnowflakeParameter creates a new instance of this resource
func createSnowflakeParameter(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeParameter{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.parameter", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeParameter) MqlName() string {
	return "snowflake.parameter"
}

func (c *mqlSnowflakeParameter) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeParameter) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlSnowflakeParameter) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlSnowflakeParameter) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlSnowflakeParameter) GetDefaultValue() *plugin.TValue[string] {
	return &c.DefaultValue
}

func (c *mqlSnowflakeParameter) GetLevel() *plugin.TValue[string] {
	return &c.Level
}

// mqlSnowflakeStage for the snowflake.stage resource
type mqlSnowflakeStage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeStageInternal it will be used here
	Name plugin.TValue[string]
	DatabaseName plugin.TValue[string]
	SchemaName plugin.TValue[string]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	HasCredentials plugin.TValue[bool]
	HasEncryptionKey plugin.TValue[bool]
	Url plugin.TValue[string]
	Type plugin.TValue[string]
	Cloud plugin.TValue[string]
	StoreIntegration plugin.TValue[string]
	Endpoint plugin.TValue[string]
	OwnerRoleType plugin.TValue[string]
	DirectoryEnabled plugin.TValue[bool]
}

// createSnowflakeStage creates a new instance of this resource
func createSnowflakeStage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeStage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.stage", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeStage) MqlName() string {
	return "snowflake.stage"
}

func (c *mqlSnowflakeStage) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeStage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeStage) GetDatabaseName() *plugin.TValue[string] {
	return &c.DatabaseName
}

func (c *mqlSnowflakeStage) GetSchemaName() *plugin.TValue[string] {
	return &c.SchemaName
}

func (c *mqlSnowflakeStage) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakeStage) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeStage) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlSnowflakeStage) GetHasCredentials() *plugin.TValue[bool] {
	return &c.HasCredentials
}

func (c *mqlSnowflakeStage) GetHasEncryptionKey() *plugin.TValue[bool] {
	return &c.HasEncryptionKey
}

func (c *mqlSnowflakeStage) GetUrl() *plugin.TValue[string] {
	return &c.Url
}

func (c *mqlSnowflakeStage) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlSnowflakeStage) GetCloud() *plugin.TValue[string] {
	return &c.Cloud
}

func (c *mqlSnowflakeStage) GetStoreIntegration() *plugin.TValue[string] {
	return &c.StoreIntegration
}

func (c *mqlSnowflakeStage) GetEndpoint() *plugin.TValue[string] {
	return &c.Endpoint
}

func (c *mqlSnowflakeStage) GetOwnerRoleType() *plugin.TValue[string] {
	return &c.OwnerRoleType
}

func (c *mqlSnowflakeStage) GetDirectoryEnabled() *plugin.TValue[bool] {
	return &c.DirectoryEnabled
}

// mqlSnowflakeDatabase for the snowflake.database resource
type mqlSnowflakeDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeDatabaseInternal it will be used here
	Name plugin.TValue[string]
	IsDefault plugin.TValue[bool]
	IsCurrent plugin.TValue[bool]
	Origin plugin.TValue[string]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
	Options plugin.TValue[string]
	RetentionTime plugin.TValue[int64]
	ResourceGroup plugin.TValue[string]
	Transient plugin.TValue[bool]
	CreatedAt plugin.TValue[*time.Time]
	DroppedAt plugin.TValue[*time.Time]
}

// createSnowflakeDatabase creates a new instance of this resource
func createSnowflakeDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeDatabase) MqlName() string {
	return "snowflake.database"
}

func (c *mqlSnowflakeDatabase) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeDatabase) GetIsDefault() *plugin.TValue[bool] {
	return &c.IsDefault
}

func (c *mqlSnowflakeDatabase) GetIsCurrent() *plugin.TValue[bool] {
	return &c.IsCurrent
}

func (c *mqlSnowflakeDatabase) GetOrigin() *plugin.TValue[string] {
	return &c.Origin
}

func (c *mqlSnowflakeDatabase) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakeDatabase) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeDatabase) GetOptions() *plugin.TValue[string] {
	return &c.Options
}

func (c *mqlSnowflakeDatabase) GetRetentionTime() *plugin.TValue[int64] {
	return &c.RetentionTime
}

func (c *mqlSnowflakeDatabase) GetResourceGroup() *plugin.TValue[string] {
	return &c.ResourceGroup
}

func (c *mqlSnowflakeDatabase) GetTransient() *plugin.TValue[bool] {
	return &c.Transient
}

func (c *mqlSnowflakeDatabase) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlSnowflakeDatabase) GetDroppedAt() *plugin.TValue[*time.Time] {
	return &c.DroppedAt
}

// mqlSnowflakeWarehouse for the snowflake.warehouse resource
type mqlSnowflakeWarehouse struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeWarehouseInternal it will be used here
	Name plugin.TValue[string]
	State plugin.TValue[string]
	Type plugin.TValue[string]
	Size plugin.TValue[string]
	MinClusterCount plugin.TValue[int64]
	MaxClusterCount plugin.TValue[int64]
	StartedClusterCount plugin.TValue[int64]
	Running plugin.TValue[int64]
	Queued plugin.TValue[int64]
	IsDefault plugin.TValue[bool]
	IsCurrent plugin.TValue[bool]
	AutoSuspend plugin.TValue[int64]
	AutoResume plugin.TValue[bool]
	Available plugin.TValue[float64]
	Provisioning plugin.TValue[float64]
	Quiescing plugin.TValue[float64]
	Other plugin.TValue[float64]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
	EnableQueryAcceleration plugin.TValue[bool]
	QueryAccelerationMaxScaleFactor plugin.TValue[int64]
	ResourceMonitor plugin.TValue[string]
	ScalingPolicy plugin.TValue[string]
	OwnerRoleType plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	ResumedAt plugin.TValue[*time.Time]
	UpdatedAt plugin.TValue[*time.Time]
}

// createSnowflakeWarehouse creates a new instance of this resource
func createSnowflakeWarehouse(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeWarehouse{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.warehouse", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeWarehouse) MqlName() string {
	return "snowflake.warehouse"
}

func (c *mqlSnowflakeWarehouse) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeWarehouse) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeWarehouse) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlSnowflakeWarehouse) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlSnowflakeWarehouse) GetSize() *plugin.TValue[string] {
	return &c.Size
}

func (c *mqlSnowflakeWarehouse) GetMinClusterCount() *plugin.TValue[int64] {
	return &c.MinClusterCount
}

func (c *mqlSnowflakeWarehouse) GetMaxClusterCount() *plugin.TValue[int64] {
	return &c.MaxClusterCount
}

func (c *mqlSnowflakeWarehouse) GetStartedClusterCount() *plugin.TValue[int64] {
	return &c.StartedClusterCount
}

func (c *mqlSnowflakeWarehouse) GetRunning() *plugin.TValue[int64] {
	return &c.Running
}

func (c *mqlSnowflakeWarehouse) GetQueued() *plugin.TValue[int64] {
	return &c.Queued
}

func (c *mqlSnowflakeWarehouse) GetIsDefault() *plugin.TValue[bool] {
	return &c.IsDefault
}

func (c *mqlSnowflakeWarehouse) GetIsCurrent() *plugin.TValue[bool] {
	return &c.IsCurrent
}

func (c *mqlSnowflakeWarehouse) GetAutoSuspend() *plugin.TValue[int64] {
	return &c.AutoSuspend
}

func (c *mqlSnowflakeWarehouse) GetAutoResume() *plugin.TValue[bool] {
	return &c.AutoResume
}

func (c *mqlSnowflakeWarehouse) GetAvailable() *plugin.TValue[float64] {
	return &c.Available
}

func (c *mqlSnowflakeWarehouse) GetProvisioning() *plugin.TValue[float64] {
	return &c.Provisioning
}

func (c *mqlSnowflakeWarehouse) GetQuiescing() *plugin.TValue[float64] {
	return &c.Quiescing
}

func (c *mqlSnowflakeWarehouse) GetOther() *plugin.TValue[float64] {
	return &c.Other
}

func (c *mqlSnowflakeWarehouse) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakeWarehouse) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeWarehouse) GetEnableQueryAcceleration() *plugin.TValue[bool] {
	return &c.EnableQueryAcceleration
}

func (c *mqlSnowflakeWarehouse) GetQueryAccelerationMaxScaleFactor() *plugin.TValue[int64] {
	return &c.QueryAccelerationMaxScaleFactor
}

func (c *mqlSnowflakeWarehouse) GetResourceMonitor() *plugin.TValue[string] {
	return &c.ResourceMonitor
}

func (c *mqlSnowflakeWarehouse) GetScalingPolicy() *plugin.TValue[string] {
	return &c.ScalingPolicy
}

func (c *mqlSnowflakeWarehouse) GetOwnerRoleType() *plugin.TValue[string] {
	return &c.OwnerRoleType
}

func (c *mqlSnowflakeWarehouse) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlSnowflakeWarehouse) GetResumedAt() *plugin.TValue[*time.Time] {
	return &c.ResumedAt
}

func (c *mqlSnowflakeWarehouse) GetUpdatedAt() *plugin.TValue[*time.Time] {
	return &c.UpdatedAt
}

// mqlSnowflakeView for the snowflake.view resource
type mqlSnowflakeView struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSnowflakeViewInternal it will be used here
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
	Reserved plugin.TValue[string]
	DatabaseName plugin.TValue[string]
	SchemaName plugin.TValue[string]
	Owner plugin.TValue[string]
	Comment plugin.TValue[string]
	Text plugin.TValue[string]
	IsSecure plugin.TValue[bool]
	IsMaterialized plugin.TValue[bool]
	OwnerRoleType plugin.TValue[string]
	ChangeTracking plugin.TValue[string]
}

// createSnowflakeView creates a new instance of this resource
func createSnowflakeView(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSnowflakeView{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("snowflake.view", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSnowflakeView) MqlName() string {
	return "snowflake.view"
}

func (c *mqlSnowflakeView) MqlID() string {
	return c.__id
}

func (c *mqlSnowflakeView) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSnowflakeView) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlSnowflakeView) GetReserved() *plugin.TValue[string] {
	return &c.Reserved
}

func (c *mqlSnowflakeView) GetDatabaseName() *plugin.TValue[string] {
	return &c.DatabaseName
}

func (c *mqlSnowflakeView) GetSchemaName() *plugin.TValue[string] {
	return &c.SchemaName
}

func (c *mqlSnowflakeView) GetOwner() *plugin.TValue[string] {
	return &c.Owner
}

func (c *mqlSnowflakeView) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlSnowflakeView) GetText() *plugin.TValue[string] {
	return &c.Text
}

func (c *mqlSnowflakeView) GetIsSecure() *plugin.TValue[bool] {
	return &c.IsSecure
}

func (c *mqlSnowflakeView) GetIsMaterialized() *plugin.TValue[bool] {
	return &c.IsMaterialized
}

func (c *mqlSnowflakeView) GetOwnerRoleType() *plugin.TValue[string] {
	return &c.OwnerRoleType
}

func (c *mqlSnowflakeView) GetChangeTracking() *plugin.TValue[string] {
	return &c.ChangeTracking
}
