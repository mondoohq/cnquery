// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"atlassian.scim": {
			// to override args, implement: initAtlassianScim(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianScim,
		},
		"atlassian.scim.user": {
			// to override args, implement: initAtlassianScimUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianScimUser,
		},
		"atlassian.scim.group": {
			// to override args, implement: initAtlassianScimGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianScimGroup,
		},
		"atlassian.admin.organization": {
			Init: initAtlassianAdminOrganization,
			Create: createAtlassianAdminOrganization,
		},
		"atlassian.admin.organization.managedUser": {
			// to override args, implement: initAtlassianAdminOrganizationManagedUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianAdminOrganizationManagedUser,
		},
		"atlassian.admin.organization.policy": {
			// to override args, implement: initAtlassianAdminOrganizationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianAdminOrganizationPolicy,
		},
		"atlassian.admin.organization.domain": {
			// to override args, implement: initAtlassianAdminOrganizationDomain(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianAdminOrganizationDomain,
		},
		"atlassian.jira": {
			// to override args, implement: initAtlassianJira(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJira,
		},
		"atlassian.jira.issue": {
			// to override args, implement: initAtlassianJiraIssue(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraIssue,
		},
		"atlassian.jira.serverInfo": {
			// to override args, implement: initAtlassianJiraServerInfo(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraServerInfo,
		},
		"atlassian.jira.user": {
			// to override args, implement: initAtlassianJiraUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraUser,
		},
		"atlassian.jira.applicationRole": {
			// to override args, implement: initAtlassianJiraApplicationRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraApplicationRole,
		},
		"atlassian.jira.project": {
			// to override args, implement: initAtlassianJiraProject(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraProject,
		},
		"atlassian.jira.project.property": {
			// to override args, implement: initAtlassianJiraProjectProperty(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraProjectProperty,
		},
		"atlassian.jira.group": {
			// to override args, implement: initAtlassianJiraGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianJiraGroup,
		},
		"atlassian.confluence": {
			// to override args, implement: initAtlassianConfluence(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianConfluence,
		},
		"atlassian.confluence.user": {
			// to override args, implement: initAtlassianConfluenceUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAtlassianConfluenceUser,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"atlassian.scim.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScim).GetUsers()).ToDataRes(types.Array(types.Resource("atlassian.scim.user")))
	},
	"atlassian.scim.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScim).GetGroups()).ToDataRes(types.Array(types.Resource("atlassian.scim.group")))
	},
	"atlassian.scim.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimUser).GetId()).ToDataRes(types.String)
	},
	"atlassian.scim.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimUser).GetName()).ToDataRes(types.String)
	},
	"atlassian.scim.user.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimUser).GetDisplayName()).ToDataRes(types.String)
	},
	"atlassian.scim.user.organization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimUser).GetOrganization()).ToDataRes(types.String)
	},
	"atlassian.scim.user.title": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimUser).GetTitle()).ToDataRes(types.String)
	},
	"atlassian.scim.group.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimGroup).GetId()).ToDataRes(types.String)
	},
	"atlassian.scim.group.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianScimGroup).GetName()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetId()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetName()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetType()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.policies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetPolicies()).ToDataRes(types.Array(types.Resource("atlassian.admin.organization.policy")))
	},
	"atlassian.admin.organization.domains": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetDomains()).ToDataRes(types.Array(types.Resource("atlassian.admin.organization.domain")))
	},
	"atlassian.admin.organization.managedUsers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganization).GetManagedUsers()).ToDataRes(types.Array(types.Resource("atlassian.admin.organization.managedUser")))
	},
	"atlassian.admin.organization.managedUser.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetId()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.managedUser.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetName()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.managedUser.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetType()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.managedUser.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetEmail()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.managedUser.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetStatus()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.managedUser.lastActive": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetLastActive()).ToDataRes(types.Time)
	},
	"atlassian.admin.organization.managedUser.productAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationManagedUser).GetProductAccess()).ToDataRes(types.Array(types.Dict))
	},
	"atlassian.admin.organization.policy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationPolicy).GetId()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.policy.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationPolicy).GetType()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.policy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationPolicy).GetName()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.policy.policyType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationPolicy).GetPolicyType()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.policy.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationPolicy).GetStatus()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.domain.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationDomain).GetId()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.domain.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationDomain).GetName()).ToDataRes(types.String)
	},
	"atlassian.admin.organization.domain.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianAdminOrganizationDomain).GetType()).ToDataRes(types.String)
	},
	"atlassian.jira.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJira).GetUsers()).ToDataRes(types.Array(types.Resource("atlassian.jira.user")))
	},
	"atlassian.jira.projects": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJira).GetProjects()).ToDataRes(types.Array(types.Resource("atlassian.jira.project")))
	},
	"atlassian.jira.issues": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJira).GetIssues()).ToDataRes(types.Array(types.Resource("atlassian.jira.issue")))
	},
	"atlassian.jira.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJira).GetGroups()).ToDataRes(types.Array(types.Resource("atlassian.jira.group")))
	},
	"atlassian.jira.serverInfos": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJira).GetServerInfos()).ToDataRes(types.Resource("atlassian.jira.serverInfo"))
	},
	"atlassian.jira.issue.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.issue.project": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetProject()).ToDataRes(types.String)
	},
	"atlassian.jira.issue.projectKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetProjectKey()).ToDataRes(types.String)
	},
	"atlassian.jira.issue.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetStatus()).ToDataRes(types.String)
	},
	"atlassian.jira.issue.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetDescription()).ToDataRes(types.String)
	},
	"atlassian.jira.issue.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetCreatedAt()).ToDataRes(types.Time)
	},
	"atlassian.jira.issue.creator": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetCreator()).ToDataRes(types.Resource("atlassian.jira.user"))
	},
	"atlassian.jira.issue.typeName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraIssue).GetTypeName()).ToDataRes(types.String)
	},
	"atlassian.jira.serverInfo.baseUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraServerInfo).GetBaseUrl()).ToDataRes(types.String)
	},
	"atlassian.jira.serverInfo.buildNumber": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraServerInfo).GetBuildNumber()).ToDataRes(types.Int)
	},
	"atlassian.jira.serverInfo.serverTitle": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraServerInfo).GetServerTitle()).ToDataRes(types.String)
	},
	"atlassian.jira.serverInfo.deploymentType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraServerInfo).GetDeploymentType()).ToDataRes(types.String)
	},
	"atlassian.jira.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetName()).ToDataRes(types.String)
	},
	"atlassian.jira.user.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetType()).ToDataRes(types.String)
	},
	"atlassian.jira.user.picture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetPicture()).ToDataRes(types.String)
	},
	"atlassian.jira.user.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetGroups()).ToDataRes(types.Array(types.Resource("atlassian.jira.group")))
	},
	"atlassian.jira.user.applicationRoles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraUser).GetApplicationRoles()).ToDataRes(types.Array(types.Resource("atlassian.jira.applicationRole")))
	},
	"atlassian.jira.applicationRole.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraApplicationRole).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.applicationRole.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraApplicationRole).GetName()).ToDataRes(types.String)
	},
	"atlassian.jira.project.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.project.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetName()).ToDataRes(types.String)
	},
	"atlassian.jira.project.uuid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetUuid()).ToDataRes(types.String)
	},
	"atlassian.jira.project.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetKey()).ToDataRes(types.String)
	},
	"atlassian.jira.project.url": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetUrl()).ToDataRes(types.String)
	},
	"atlassian.jira.project.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetEmail()).ToDataRes(types.String)
	},
	"atlassian.jira.project.private": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetPrivate()).ToDataRes(types.Bool)
	},
	"atlassian.jira.project.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetDeleted()).ToDataRes(types.Bool)
	},
	"atlassian.jira.project.archived": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetArchived()).ToDataRes(types.Bool)
	},
	"atlassian.jira.project.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProject).GetProperties()).ToDataRes(types.Array(types.Resource("atlassian.jira.project.property")))
	},
	"atlassian.jira.project.property.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraProjectProperty).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.group.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraGroup).GetId()).ToDataRes(types.String)
	},
	"atlassian.jira.group.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianJiraGroup).GetName()).ToDataRes(types.String)
	},
	"atlassian.confluence.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianConfluence).GetUsers()).ToDataRes(types.Array(types.Resource("atlassian.confluence.user")))
	},
	"atlassian.confluence.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianConfluenceUser).GetId()).ToDataRes(types.String)
	},
	"atlassian.confluence.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianConfluenceUser).GetName()).ToDataRes(types.String)
	},
	"atlassian.confluence.user.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAtlassianConfluenceUser).GetType()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"atlassian.scim.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianScim).__id, ok = v.Value.(string)
			return
		},
	"atlassian.scim.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScim).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.scim.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScim).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.scim.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianScimUser).__id, ok = v.Value.(string)
			return
		},
	"atlassian.scim.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.user.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimUser).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.user.organization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimUser).Organization, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.user.title": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimUser).Title, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.group.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianScimGroup).__id, ok = v.Value.(string)
			return
		},
	"atlassian.scim.group.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.scim.group.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianScimGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianAdminOrganization).__id, ok = v.Value.(string)
			return
		},
	"atlassian.admin.organization.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).Policies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.domains": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).Domains, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUsers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganization).ManagedUsers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianAdminOrganizationManagedUser).__id, ok = v.Value.(string)
			return
		},
	"atlassian.admin.organization.managedUser.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.lastActive": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).LastActive, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.managedUser.productAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationManagedUser).ProductAccess, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianAdminOrganizationPolicy).__id, ok = v.Value.(string)
			return
		},
	"atlassian.admin.organization.policy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policy.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationPolicy).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policy.policyType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationPolicy).PolicyType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.policy.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationPolicy).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.domain.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianAdminOrganizationDomain).__id, ok = v.Value.(string)
			return
		},
	"atlassian.admin.organization.domain.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationDomain).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.domain.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationDomain).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.admin.organization.domain.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianAdminOrganizationDomain).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJira).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJira).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.projects": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJira).Projects, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.issues": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJira).Issues, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJira).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.serverInfos": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJira).ServerInfos, ok = plugin.RawToTValue[*mqlAtlassianJiraServerInfo](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraIssue).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.issue.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.project": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).Project, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.projectKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).ProjectKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.creator": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).Creator, ok = plugin.RawToTValue[*mqlAtlassianJiraUser](v.Value, v.Error)
		return
	},
	"atlassian.jira.issue.typeName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraIssue).TypeName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.serverInfo.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraServerInfo).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.serverInfo.baseUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraServerInfo).BaseUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.serverInfo.buildNumber": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraServerInfo).BuildNumber, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"atlassian.jira.serverInfo.serverTitle": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraServerInfo).ServerTitle, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.serverInfo.deploymentType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraServerInfo).DeploymentType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraUser).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.picture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).Picture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.user.applicationRoles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraUser).ApplicationRoles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.applicationRole.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraApplicationRole).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.applicationRole.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraApplicationRole).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.applicationRole.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraApplicationRole).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraProject).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.project.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.uuid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Uuid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.url": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Url, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.private": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Private, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Deleted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.archived": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Archived, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProject).Properties, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.jira.project.property.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraProjectProperty).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.project.property.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraProjectProperty).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.group.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianJiraGroup).__id, ok = v.Value.(string)
			return
		},
	"atlassian.jira.group.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.jira.group.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianJiraGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.confluence.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianConfluence).__id, ok = v.Value.(string)
			return
		},
	"atlassian.confluence.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianConfluence).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"atlassian.confluence.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAtlassianConfluenceUser).__id, ok = v.Value.(string)
			return
		},
	"atlassian.confluence.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianConfluenceUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.confluence.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianConfluenceUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"atlassian.confluence.user.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAtlassianConfluenceUser).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[atlassian] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[atlassian] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlAtlassianScim for the atlassian.scim resource
type mqlAtlassianScim struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianScimInternal it will be used here
	Users plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
}

// createAtlassianScim creates a new instance of this resource
func createAtlassianScim(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianScim{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.scim", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianScim) MqlName() string {
	return "atlassian.scim"
}

func (c *mqlAtlassianScim) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianScim) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.scim", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlAtlassianScim) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.scim", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

// mqlAtlassianScimUser for the atlassian.scim.user resource
type mqlAtlassianScimUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianScimUserInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	DisplayName plugin.TValue[string]
	Organization plugin.TValue[string]
	Title plugin.TValue[string]
}

// createAtlassianScimUser creates a new instance of this resource
func createAtlassianScimUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianScimUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.scim.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianScimUser) MqlName() string {
	return "atlassian.scim.user"
}

func (c *mqlAtlassianScimUser) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianScimUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianScimUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianScimUser) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlAtlassianScimUser) GetOrganization() *plugin.TValue[string] {
	return &c.Organization
}

func (c *mqlAtlassianScimUser) GetTitle() *plugin.TValue[string] {
	return &c.Title
}

// mqlAtlassianScimGroup for the atlassian.scim.group resource
type mqlAtlassianScimGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianScimGroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
}

// createAtlassianScimGroup creates a new instance of this resource
func createAtlassianScimGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianScimGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.scim.group", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianScimGroup) MqlName() string {
	return "atlassian.scim.group"
}

func (c *mqlAtlassianScimGroup) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianScimGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianScimGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

// mqlAtlassianAdminOrganization for the atlassian.admin.organization resource
type mqlAtlassianAdminOrganization struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianAdminOrganizationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Policies plugin.TValue[[]interface{}]
	Domains plugin.TValue[[]interface{}]
	ManagedUsers plugin.TValue[[]interface{}]
}

// createAtlassianAdminOrganization creates a new instance of this resource
func createAtlassianAdminOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianAdminOrganization{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.admin.organization", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianAdminOrganization) MqlName() string {
	return "atlassian.admin.organization"
}

func (c *mqlAtlassianAdminOrganization) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianAdminOrganization) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianAdminOrganization) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianAdminOrganization) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAtlassianAdminOrganization) GetPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Policies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.admin.organization", c.__id, "policies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.policies()
	})
}

func (c *mqlAtlassianAdminOrganization) GetDomains() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Domains, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.admin.organization", c.__id, "domains")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.domains()
	})
}

func (c *mqlAtlassianAdminOrganization) GetManagedUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ManagedUsers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.admin.organization", c.__id, "managedUsers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.managedUsers()
	})
}

// mqlAtlassianAdminOrganizationManagedUser for the atlassian.admin.organization.managedUser resource
type mqlAtlassianAdminOrganizationManagedUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianAdminOrganizationManagedUserInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Email plugin.TValue[string]
	Status plugin.TValue[string]
	LastActive plugin.TValue[*time.Time]
	ProductAccess plugin.TValue[[]interface{}]
}

// createAtlassianAdminOrganizationManagedUser creates a new instance of this resource
func createAtlassianAdminOrganizationManagedUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianAdminOrganizationManagedUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.admin.organization.managedUser", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianAdminOrganizationManagedUser) MqlName() string {
	return "atlassian.admin.organization.managedUser"
}

func (c *mqlAtlassianAdminOrganizationManagedUser) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetLastActive() *plugin.TValue[*time.Time] {
	return &c.LastActive
}

func (c *mqlAtlassianAdminOrganizationManagedUser) GetProductAccess() *plugin.TValue[[]interface{}] {
	return &c.ProductAccess
}

// mqlAtlassianAdminOrganizationPolicy for the atlassian.admin.organization.policy resource
type mqlAtlassianAdminOrganizationPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianAdminOrganizationPolicyInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
	Name plugin.TValue[string]
	PolicyType plugin.TValue[string]
	Status plugin.TValue[string]
}

// createAtlassianAdminOrganizationPolicy creates a new instance of this resource
func createAtlassianAdminOrganizationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianAdminOrganizationPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.admin.organization.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianAdminOrganizationPolicy) MqlName() string {
	return "atlassian.admin.organization.policy"
}

func (c *mqlAtlassianAdminOrganizationPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianAdminOrganizationPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianAdminOrganizationPolicy) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAtlassianAdminOrganizationPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianAdminOrganizationPolicy) GetPolicyType() *plugin.TValue[string] {
	return &c.PolicyType
}

func (c *mqlAtlassianAdminOrganizationPolicy) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlAtlassianAdminOrganizationDomain for the atlassian.admin.organization.domain resource
type mqlAtlassianAdminOrganizationDomain struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianAdminOrganizationDomainInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAtlassianAdminOrganizationDomain creates a new instance of this resource
func createAtlassianAdminOrganizationDomain(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianAdminOrganizationDomain{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.admin.organization.domain", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianAdminOrganizationDomain) MqlName() string {
	return "atlassian.admin.organization.domain"
}

func (c *mqlAtlassianAdminOrganizationDomain) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianAdminOrganizationDomain) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianAdminOrganizationDomain) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianAdminOrganizationDomain) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlAtlassianJira for the atlassian.jira resource
type mqlAtlassianJira struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraInternal it will be used here
	Users plugin.TValue[[]interface{}]
	Projects plugin.TValue[[]interface{}]
	Issues plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
	ServerInfos plugin.TValue[*mqlAtlassianJiraServerInfo]
}

// createAtlassianJira creates a new instance of this resource
func createAtlassianJira(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJira{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJira) MqlName() string {
	return "atlassian.jira"
}

func (c *mqlAtlassianJira) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJira) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlAtlassianJira) GetProjects() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Projects, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira", c.__id, "projects")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.projects()
	})
}

func (c *mqlAtlassianJira) GetIssues() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Issues, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira", c.__id, "issues")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.issues()
	})
}

func (c *mqlAtlassianJira) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

func (c *mqlAtlassianJira) GetServerInfos() *plugin.TValue[*mqlAtlassianJiraServerInfo] {
	return plugin.GetOrCompute[*mqlAtlassianJiraServerInfo](&c.ServerInfos, func() (*mqlAtlassianJiraServerInfo, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira", c.__id, "serverInfos")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAtlassianJiraServerInfo), nil
			}
		}

		return c.serverInfos()
	})
}

// mqlAtlassianJiraIssue for the atlassian.jira.issue resource
type mqlAtlassianJiraIssue struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraIssueInternal it will be used here
	Id plugin.TValue[string]
	Project plugin.TValue[string]
	ProjectKey plugin.TValue[string]
	Status plugin.TValue[string]
	Description plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
	Creator plugin.TValue[*mqlAtlassianJiraUser]
	TypeName plugin.TValue[string]
}

// createAtlassianJiraIssue creates a new instance of this resource
func createAtlassianJiraIssue(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraIssue{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.issue", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraIssue) MqlName() string {
	return "atlassian.jira.issue"
}

func (c *mqlAtlassianJiraIssue) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraIssue) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianJiraIssue) GetProject() *plugin.TValue[string] {
	return &c.Project
}

func (c *mqlAtlassianJiraIssue) GetProjectKey() *plugin.TValue[string] {
	return &c.ProjectKey
}

func (c *mqlAtlassianJiraIssue) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAtlassianJiraIssue) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAtlassianJiraIssue) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

func (c *mqlAtlassianJiraIssue) GetCreator() *plugin.TValue[*mqlAtlassianJiraUser] {
	return &c.Creator
}

func (c *mqlAtlassianJiraIssue) GetTypeName() *plugin.TValue[string] {
	return &c.TypeName
}

// mqlAtlassianJiraServerInfo for the atlassian.jira.serverInfo resource
type mqlAtlassianJiraServerInfo struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraServerInfoInternal it will be used here
	BaseUrl plugin.TValue[string]
	BuildNumber plugin.TValue[int64]
	ServerTitle plugin.TValue[string]
	DeploymentType plugin.TValue[string]
}

// createAtlassianJiraServerInfo creates a new instance of this resource
func createAtlassianJiraServerInfo(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraServerInfo{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.serverInfo", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraServerInfo) MqlName() string {
	return "atlassian.jira.serverInfo"
}

func (c *mqlAtlassianJiraServerInfo) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraServerInfo) GetBaseUrl() *plugin.TValue[string] {
	return &c.BaseUrl
}

func (c *mqlAtlassianJiraServerInfo) GetBuildNumber() *plugin.TValue[int64] {
	return &c.BuildNumber
}

func (c *mqlAtlassianJiraServerInfo) GetServerTitle() *plugin.TValue[string] {
	return &c.ServerTitle
}

func (c *mqlAtlassianJiraServerInfo) GetDeploymentType() *plugin.TValue[string] {
	return &c.DeploymentType
}

// mqlAtlassianJiraUser for the atlassian.jira.user resource
type mqlAtlassianJiraUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraUserInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
	Picture plugin.TValue[string]
	Groups plugin.TValue[[]interface{}]
	ApplicationRoles plugin.TValue[[]interface{}]
}

// createAtlassianJiraUser creates a new instance of this resource
func createAtlassianJiraUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraUser) MqlName() string {
	return "atlassian.jira.user"
}

func (c *mqlAtlassianJiraUser) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianJiraUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianJiraUser) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAtlassianJiraUser) GetPicture() *plugin.TValue[string] {
	return &c.Picture
}

func (c *mqlAtlassianJiraUser) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira.user", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

func (c *mqlAtlassianJiraUser) GetApplicationRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApplicationRoles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira.user", c.__id, "applicationRoles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.applicationRoles()
	})
}

// mqlAtlassianJiraApplicationRole for the atlassian.jira.applicationRole resource
type mqlAtlassianJiraApplicationRole struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraApplicationRoleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
}

// createAtlassianJiraApplicationRole creates a new instance of this resource
func createAtlassianJiraApplicationRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraApplicationRole{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.applicationRole", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraApplicationRole) MqlName() string {
	return "atlassian.jira.applicationRole"
}

func (c *mqlAtlassianJiraApplicationRole) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraApplicationRole) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianJiraApplicationRole) GetName() *plugin.TValue[string] {
	return &c.Name
}

// mqlAtlassianJiraProject for the atlassian.jira.project resource
type mqlAtlassianJiraProject struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraProjectInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Uuid plugin.TValue[string]
	Key plugin.TValue[string]
	Url plugin.TValue[string]
	Email plugin.TValue[string]
	Private plugin.TValue[bool]
	Deleted plugin.TValue[bool]
	Archived plugin.TValue[bool]
	Properties plugin.TValue[[]interface{}]
}

// createAtlassianJiraProject creates a new instance of this resource
func createAtlassianJiraProject(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraProject{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.project", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraProject) MqlName() string {
	return "atlassian.jira.project"
}

func (c *mqlAtlassianJiraProject) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraProject) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianJiraProject) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianJiraProject) GetUuid() *plugin.TValue[string] {
	return &c.Uuid
}

func (c *mqlAtlassianJiraProject) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlAtlassianJiraProject) GetUrl() *plugin.TValue[string] {
	return &c.Url
}

func (c *mqlAtlassianJiraProject) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlAtlassianJiraProject) GetPrivate() *plugin.TValue[bool] {
	return &c.Private
}

func (c *mqlAtlassianJiraProject) GetDeleted() *plugin.TValue[bool] {
	return &c.Deleted
}

func (c *mqlAtlassianJiraProject) GetArchived() *plugin.TValue[bool] {
	return &c.Archived
}

func (c *mqlAtlassianJiraProject) GetProperties() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Properties, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.jira.project", c.__id, "properties")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.properties()
	})
}

// mqlAtlassianJiraProjectProperty for the atlassian.jira.project.property resource
type mqlAtlassianJiraProjectProperty struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraProjectPropertyInternal it will be used here
	Id plugin.TValue[string]
}

// createAtlassianJiraProjectProperty creates a new instance of this resource
func createAtlassianJiraProjectProperty(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraProjectProperty{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.project.property", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraProjectProperty) MqlName() string {
	return "atlassian.jira.project.property"
}

func (c *mqlAtlassianJiraProjectProperty) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraProjectProperty) GetId() *plugin.TValue[string] {
	return &c.Id
}

// mqlAtlassianJiraGroup for the atlassian.jira.group resource
type mqlAtlassianJiraGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianJiraGroupInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
}

// createAtlassianJiraGroup creates a new instance of this resource
func createAtlassianJiraGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianJiraGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.jira.group", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianJiraGroup) MqlName() string {
	return "atlassian.jira.group"
}

func (c *mqlAtlassianJiraGroup) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianJiraGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianJiraGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

// mqlAtlassianConfluence for the atlassian.confluence resource
type mqlAtlassianConfluence struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianConfluenceInternal it will be used here
	Users plugin.TValue[[]interface{}]
}

// createAtlassianConfluence creates a new instance of this resource
func createAtlassianConfluence(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianConfluence{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.confluence", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianConfluence) MqlName() string {
	return "atlassian.confluence"
}

func (c *mqlAtlassianConfluence) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianConfluence) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("atlassian.confluence", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

// mqlAtlassianConfluenceUser for the atlassian.confluence.user resource
type mqlAtlassianConfluenceUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAtlassianConfluenceUserInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
}

// createAtlassianConfluenceUser creates a new instance of this resource
func createAtlassianConfluenceUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAtlassianConfluenceUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("atlassian.confluence.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAtlassianConfluenceUser) MqlName() string {
	return "atlassian.confluence.user"
}

func (c *mqlAtlassianConfluenceUser) MqlID() string {
	return c.__id
}

func (c *mqlAtlassianConfluenceUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAtlassianConfluenceUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAtlassianConfluenceUser) GetType() *plugin.TValue[string] {
	return &c.Type
}
