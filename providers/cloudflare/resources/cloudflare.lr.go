// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"cloudflare": {
			// to override args, implement: initCloudflare(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflare,
		},
		"cloudflare.zone": {
			// to override args, implement: initCloudflareZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareZone,
		},
		"cloudflare.zone.account": {
			// to override args, implement: initCloudflareZoneAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareZoneAccount,
		},
		"cloudflare.dns": {
			// to override args, implement: initCloudflareDns(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareDns,
		},
		"cloudflare.dns.record": {
			// to override args, implement: initCloudflareDnsRecord(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareDnsRecord,
		},
		"cloudflare.account": {
			// to override args, implement: initCloudflareAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareAccount,
		},
		"cloudflare.account.settings": {
			// to override args, implement: initCloudflareAccountSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareAccountSettings,
		},
		"cloudflare.streams": {
			// to override args, implement: initCloudflareStreams(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareStreams,
		},
		"cloudflare.streams.live_input": {
			// to override args, implement: initCloudflareStreamsLive_input(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareStreamsLive_input,
		},
		"cloudflare.streams.video": {
			// to override args, implement: initCloudflareStreamsVideo(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareStreamsVideo,
		},
		"cloudflare.r2": {
			// to override args, implement: initCloudflareR2(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareR2,
		},
		"cloudflare.r2.bucket": {
			// to override args, implement: initCloudflareR2Bucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareR2Bucket,
		},
		"cloudflare.workers": {
			// to override args, implement: initCloudflareWorkers(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareWorkers,
		},
		"cloudflare.workers.worker": {
			// to override args, implement: initCloudflareWorkersWorker(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareWorkersWorker,
		},
		"cloudflare.workers.page": {
			// to override args, implement: initCloudflareWorkersPage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createCloudflareWorkersPage,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"cloudflare.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflare).GetZones()).ToDataRes(types.Array(types.Resource("cloudflare.zone")))
	},
	"cloudflare.accounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflare).GetAccounts()).ToDataRes(types.Array(types.Resource("cloudflare.account")))
	},
	"cloudflare.zone.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetId()).ToDataRes(types.String)
	},
	"cloudflare.zone.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetName()).ToDataRes(types.String)
	},
	"cloudflare.zone.name_servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetName_servers()).ToDataRes(types.Array(types.String))
	},
	"cloudflare.zone.original_name_servers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetOriginal_name_servers()).ToDataRes(types.Array(types.String))
	},
	"cloudflare.zone.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetStatus()).ToDataRes(types.String)
	},
	"cloudflare.zone.paused": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetPaused()).ToDataRes(types.Bool)
	},
	"cloudflare.zone.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetType()).ToDataRes(types.String)
	},
	"cloudflare.zone.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.zone.modified_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetModified_on()).ToDataRes(types.Time)
	},
	"cloudflare.zone.account": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetAccount()).ToDataRes(types.Resource("cloudflare.zone.account"))
	},
	"cloudflare.zone.dns": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetDns()).ToDataRes(types.Resource("cloudflare.dns"))
	},
	"cloudflare.zone.live_inputs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetLive_inputs()).ToDataRes(types.Array(types.Resource("cloudflare.streams.live_input")))
	},
	"cloudflare.zone.videos": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetVideos()).ToDataRes(types.Array(types.Resource("cloudflare.streams.video")))
	},
	"cloudflare.zone.r2": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetR2()).ToDataRes(types.Resource("cloudflare.r2"))
	},
	"cloudflare.zone.workers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZone).GetWorkers()).ToDataRes(types.Resource("cloudflare.workers"))
	},
	"cloudflare.zone.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZoneAccount).GetId()).ToDataRes(types.String)
	},
	"cloudflare.zone.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZoneAccount).GetName()).ToDataRes(types.String)
	},
	"cloudflare.zone.account.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareZoneAccount).GetType()).ToDataRes(types.String)
	},
	"cloudflare.dns.records": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDns).GetRecords()).ToDataRes(types.Array(types.Resource("cloudflare.dns.record")))
	},
	"cloudflare.dns.record.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetId()).ToDataRes(types.String)
	},
	"cloudflare.dns.record.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetName()).ToDataRes(types.String)
	},
	"cloudflare.dns.record.comment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetComment()).ToDataRes(types.String)
	},
	"cloudflare.dns.record.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetTags()).ToDataRes(types.Array(types.String))
	},
	"cloudflare.dns.record.proxied": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetProxied()).ToDataRes(types.Bool)
	},
	"cloudflare.dns.record.proxiable": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetProxiable()).ToDataRes(types.Bool)
	},
	"cloudflare.dns.record.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetType()).ToDataRes(types.String)
	},
	"cloudflare.dns.record.content": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetContent()).ToDataRes(types.String)
	},
	"cloudflare.dns.record.ttl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetTtl()).ToDataRes(types.Int)
	},
	"cloudflare.dns.record.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.dns.record.modified_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareDnsRecord).GetModified_on()).ToDataRes(types.Time)
	},
	"cloudflare.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetId()).ToDataRes(types.String)
	},
	"cloudflare.account.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetName()).ToDataRes(types.String)
	},
	"cloudflare.account.settings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetSettings()).ToDataRes(types.Resource("cloudflare.account.settings"))
	},
	"cloudflare.account.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.account.live_inputs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetLive_inputs()).ToDataRes(types.Array(types.Resource("cloudflare.streams.live_input")))
	},
	"cloudflare.account.videos": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccount).GetVideos()).ToDataRes(types.Array(types.Resource("cloudflare.streams.video")))
	},
	"cloudflare.account.settings.enforce_two_factor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareAccountSettings).GetEnforce_two_factor()).ToDataRes(types.Bool)
	},
	"cloudflare.streams.live_input.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsLive_input).GetId()).ToDataRes(types.String)
	},
	"cloudflare.streams.live_input.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsLive_input).GetUid()).ToDataRes(types.String)
	},
	"cloudflare.streams.live_input.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsLive_input).GetName()).ToDataRes(types.String)
	},
	"cloudflare.streams.live_input.delete_recording_after_days": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsLive_input).GetDelete_recording_after_days()).ToDataRes(types.Int)
	},
	"cloudflare.streams.video.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetId()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetUid()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetName()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.creator": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetCreator()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.duration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetDuration()).ToDataRes(types.Float)
	},
	"cloudflare.streams.video.height": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetHeight()).ToDataRes(types.Int)
	},
	"cloudflare.streams.video.width": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetWidth()).ToDataRes(types.Int)
	},
	"cloudflare.streams.video.live_input": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetLive_input()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.dash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetDash()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.hls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetHls()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.preview": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetPreview()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.ready": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetReady()).ToDataRes(types.Bool)
	},
	"cloudflare.streams.video.require_signed_urls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetRequire_signed_urls()).ToDataRes(types.Bool)
	},
	"cloudflare.streams.video.scheduled_deletion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetScheduled_deletion()).ToDataRes(types.Time)
	},
	"cloudflare.streams.video.size": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetSize()).ToDataRes(types.Int)
	},
	"cloudflare.streams.video.thumbnail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetThumbnail()).ToDataRes(types.String)
	},
	"cloudflare.streams.video.thumbnail_timestamp_pct": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetThumbnail_timestamp_pct()).ToDataRes(types.Float)
	},
	"cloudflare.streams.video.uploaded": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareStreamsVideo).GetUploaded()).ToDataRes(types.Time)
	},
	"cloudflare.r2.buckets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareR2).GetBuckets()).ToDataRes(types.Array(types.Resource("cloudflare.r2.bucket")))
	},
	"cloudflare.r2.bucket.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareR2Bucket).GetName()).ToDataRes(types.String)
	},
	"cloudflare.r2.bucket.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareR2Bucket).GetLocation()).ToDataRes(types.String)
	},
	"cloudflare.r2.bucket.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareR2Bucket).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.workers.workers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkers).GetWorkers()).ToDataRes(types.Array(types.Resource("cloudflare.workers.worker")))
	},
	"cloudflare.workers.pages": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkers).GetPages()).ToDataRes(types.Array(types.Resource("cloudflare.workers.page")))
	},
	"cloudflare.workers.worker.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetId()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.etag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetEtag()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.size": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetSize()).ToDataRes(types.Int)
	},
	"cloudflare.workers.worker.deployment_id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetDeployment_id()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.pipeline_hash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetPipeline_hash()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.placement_mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetPlacement_mode()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.last_deployed_from": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetLast_deployed_from()).ToDataRes(types.String)
	},
	"cloudflare.workers.worker.log_push": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetLog_push()).ToDataRes(types.Bool)
	},
	"cloudflare.workers.worker.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.workers.worker.modified_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersWorker).GetModified_on()).ToDataRes(types.Time)
	},
	"cloudflare.workers.page.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetId()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.short_id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetShort_id()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.project_id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetProject_id()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.project_name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetProject_name()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.environment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetEnvironment()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.url": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetUrl()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.aliases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetAliases()).ToDataRes(types.Array(types.String))
	},
	"cloudflare.workers.page.production_branch": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetProduction_branch()).ToDataRes(types.String)
	},
	"cloudflare.workers.page.created_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetCreated_on()).ToDataRes(types.Time)
	},
	"cloudflare.workers.page.modified_on": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlCloudflareWorkersPage).GetModified_on()).ToDataRes(types.Time)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"cloudflare.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflare).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflare).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.accounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflare).Accounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.zone.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareZone).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.zone.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.name_servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Name_servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.zone.original_name_servers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Original_name_servers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.zone.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.paused": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Paused, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.zone.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.zone.modified_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Modified_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.zone.account": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Account, ok = plugin.RawToTValue[*mqlCloudflareZoneAccount](v.Value, v.Error)
		return
	},
	"cloudflare.zone.dns": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Dns, ok = plugin.RawToTValue[*mqlCloudflareDns](v.Value, v.Error)
		return
	},
	"cloudflare.zone.live_inputs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Live_inputs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.zone.videos": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Videos, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.zone.r2": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).R2, ok = plugin.RawToTValue[*mqlCloudflareR2](v.Value, v.Error)
		return
	},
	"cloudflare.zone.workers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZone).Workers, ok = plugin.RawToTValue[*mqlCloudflareWorkers](v.Value, v.Error)
		return
	},
	"cloudflare.zone.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareZoneAccount).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.zone.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZoneAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZoneAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.zone.account.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareZoneAccount).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareDns).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.dns.records": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDns).Records, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareDnsRecord).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.dns.record.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.comment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Comment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.proxied": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Proxied, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.proxiable": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Proxiable, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.content": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Content, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.ttl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Ttl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.dns.record.modified_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareDnsRecord).Modified_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareAccount).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.account.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.account.settings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Settings, ok = plugin.RawToTValue[*mqlCloudflareAccountSettings](v.Value, v.Error)
		return
	},
	"cloudflare.account.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.account.live_inputs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Live_inputs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.account.videos": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccount).Videos, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.account.settings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareAccountSettings).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.account.settings.enforce_two_factor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareAccountSettings).Enforce_two_factor, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.streams.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareStreams).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.streams.live_input.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareStreamsLive_input).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.streams.live_input.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsLive_input).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.live_input.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsLive_input).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.live_input.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsLive_input).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.live_input.delete_recording_after_days": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsLive_input).Delete_recording_after_days, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareStreamsVideo).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.streams.video.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.creator": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Creator, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.duration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Duration, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.height": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Height, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.width": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Width, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.live_input": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Live_input, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.dash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Dash, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.hls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Hls, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.preview": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Preview, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.ready": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Ready, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.require_signed_urls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Require_signed_urls, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.scheduled_deletion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Scheduled_deletion, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.size": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Size, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.thumbnail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Thumbnail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.thumbnail_timestamp_pct": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Thumbnail_timestamp_pct, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"cloudflare.streams.video.uploaded": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareStreamsVideo).Uploaded, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.r2.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareR2).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.r2.buckets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareR2).Buckets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.r2.bucket.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareR2Bucket).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.r2.bucket.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareR2Bucket).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.r2.bucket.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareR2Bucket).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.r2.bucket.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareR2Bucket).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.workers.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareWorkers).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.workers.workers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkers).Workers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.workers.pages": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkers).Pages, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareWorkersWorker).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.workers.worker.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.etag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Etag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.size": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Size, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.deployment_id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Deployment_id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.pipeline_hash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Pipeline_hash, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.placement_mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Placement_mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.last_deployed_from": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Last_deployed_from, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.log_push": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Log_push, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.workers.worker.modified_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersWorker).Modified_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlCloudflareWorkersPage).__id, ok = v.Value.(string)
			return
		},
	"cloudflare.workers.page.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.short_id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Short_id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.project_id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Project_id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.project_name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Project_name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.environment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Environment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.url": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Url, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.aliases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Aliases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.production_branch": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Production_branch, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.created_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Created_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"cloudflare.workers.page.modified_on": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlCloudflareWorkersPage).Modified_on, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[cloudflare] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[cloudflare] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlCloudflare for the cloudflare resource
type mqlCloudflare struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareInternal it will be used here
	Zones plugin.TValue[[]interface{}]
	Accounts plugin.TValue[[]interface{}]
}

// createCloudflare creates a new instance of this resource
func createCloudflare(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflare{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflare) MqlName() string {
	return "cloudflare"
}

func (c *mqlCloudflare) MqlID() string {
	return c.__id
}

func (c *mqlCloudflare) GetZones() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Zones, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare", c.__id, "zones")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.zones()
	})
}

func (c *mqlCloudflare) GetAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Accounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare", c.__id, "accounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accounts()
	})
}

// mqlCloudflareZone for the cloudflare.zone resource
type mqlCloudflareZone struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareZoneInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Name_servers plugin.TValue[[]interface{}]
	Original_name_servers plugin.TValue[[]interface{}]
	Status plugin.TValue[string]
	Paused plugin.TValue[bool]
	Type plugin.TValue[string]
	Created_on plugin.TValue[*time.Time]
	Modified_on plugin.TValue[*time.Time]
	Account plugin.TValue[*mqlCloudflareZoneAccount]
	Dns plugin.TValue[*mqlCloudflareDns]
	Live_inputs plugin.TValue[[]interface{}]
	Videos plugin.TValue[[]interface{}]
	R2 plugin.TValue[*mqlCloudflareR2]
	Workers plugin.TValue[*mqlCloudflareWorkers]
}

// createCloudflareZone creates a new instance of this resource
func createCloudflareZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareZone{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.zone", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareZone) MqlName() string {
	return "cloudflare.zone"
}

func (c *mqlCloudflareZone) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareZone) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareZone) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareZone) GetName_servers() *plugin.TValue[[]interface{}] {
	return &c.Name_servers
}

func (c *mqlCloudflareZone) GetOriginal_name_servers() *plugin.TValue[[]interface{}] {
	return &c.Original_name_servers
}

func (c *mqlCloudflareZone) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlCloudflareZone) GetPaused() *plugin.TValue[bool] {
	return &c.Paused
}

func (c *mqlCloudflareZone) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlCloudflareZone) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

func (c *mqlCloudflareZone) GetModified_on() *plugin.TValue[*time.Time] {
	return &c.Modified_on
}

func (c *mqlCloudflareZone) GetAccount() *plugin.TValue[*mqlCloudflareZoneAccount] {
	return &c.Account
}

func (c *mqlCloudflareZone) GetDns() *plugin.TValue[*mqlCloudflareDns] {
	return plugin.GetOrCompute[*mqlCloudflareDns](&c.Dns, func() (*mqlCloudflareDns, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.zone", c.__id, "dns")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlCloudflareDns), nil
			}
		}

		return c.dns()
	})
}

func (c *mqlCloudflareZone) GetLive_inputs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Live_inputs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.zone", c.__id, "live_inputs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.live_inputs()
	})
}

func (c *mqlCloudflareZone) GetVideos() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Videos, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.zone", c.__id, "videos")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.videos()
	})
}

func (c *mqlCloudflareZone) GetR2() *plugin.TValue[*mqlCloudflareR2] {
	return plugin.GetOrCompute[*mqlCloudflareR2](&c.R2, func() (*mqlCloudflareR2, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.zone", c.__id, "r2")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlCloudflareR2), nil
			}
		}

		return c.r2()
	})
}

func (c *mqlCloudflareZone) GetWorkers() *plugin.TValue[*mqlCloudflareWorkers] {
	return plugin.GetOrCompute[*mqlCloudflareWorkers](&c.Workers, func() (*mqlCloudflareWorkers, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.zone", c.__id, "workers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlCloudflareWorkers), nil
			}
		}

		return c.workers()
	})
}

// mqlCloudflareZoneAccount for the cloudflare.zone.account resource
type mqlCloudflareZoneAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareZoneAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Type plugin.TValue[string]
}

// createCloudflareZoneAccount creates a new instance of this resource
func createCloudflareZoneAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareZoneAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.zone.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareZoneAccount) MqlName() string {
	return "cloudflare.zone.account"
}

func (c *mqlCloudflareZoneAccount) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareZoneAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareZoneAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareZoneAccount) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlCloudflareDns for the cloudflare.dns resource
type mqlCloudflareDns struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlCloudflareDnsInternal
	Records plugin.TValue[[]interface{}]
}

// createCloudflareDns creates a new instance of this resource
func createCloudflareDns(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareDns{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.dns", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareDns) MqlName() string {
	return "cloudflare.dns"
}

func (c *mqlCloudflareDns) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareDns) GetRecords() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Records, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.dns", c.__id, "records")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.records()
	})
}

// mqlCloudflareDnsRecord for the cloudflare.dns.record resource
type mqlCloudflareDnsRecord struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareDnsRecordInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Comment plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	Proxied plugin.TValue[bool]
	Proxiable plugin.TValue[bool]
	Type plugin.TValue[string]
	Content plugin.TValue[string]
	Ttl plugin.TValue[int64]
	Created_on plugin.TValue[*time.Time]
	Modified_on plugin.TValue[*time.Time]
}

// createCloudflareDnsRecord creates a new instance of this resource
func createCloudflareDnsRecord(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareDnsRecord{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.dns.record", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareDnsRecord) MqlName() string {
	return "cloudflare.dns.record"
}

func (c *mqlCloudflareDnsRecord) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareDnsRecord) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareDnsRecord) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareDnsRecord) GetComment() *plugin.TValue[string] {
	return &c.Comment
}

func (c *mqlCloudflareDnsRecord) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlCloudflareDnsRecord) GetProxied() *plugin.TValue[bool] {
	return &c.Proxied
}

func (c *mqlCloudflareDnsRecord) GetProxiable() *plugin.TValue[bool] {
	return &c.Proxiable
}

func (c *mqlCloudflareDnsRecord) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlCloudflareDnsRecord) GetContent() *plugin.TValue[string] {
	return &c.Content
}

func (c *mqlCloudflareDnsRecord) GetTtl() *plugin.TValue[int64] {
	return &c.Ttl
}

func (c *mqlCloudflareDnsRecord) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

func (c *mqlCloudflareDnsRecord) GetModified_on() *plugin.TValue[*time.Time] {
	return &c.Modified_on
}

// mqlCloudflareAccount for the cloudflare.account resource
type mqlCloudflareAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareAccountInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Settings plugin.TValue[*mqlCloudflareAccountSettings]
	Created_on plugin.TValue[*time.Time]
	Live_inputs plugin.TValue[[]interface{}]
	Videos plugin.TValue[[]interface{}]
}

// createCloudflareAccount creates a new instance of this resource
func createCloudflareAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareAccount) MqlName() string {
	return "cloudflare.account"
}

func (c *mqlCloudflareAccount) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareAccount) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareAccount) GetSettings() *plugin.TValue[*mqlCloudflareAccountSettings] {
	return &c.Settings
}

func (c *mqlCloudflareAccount) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

func (c *mqlCloudflareAccount) GetLive_inputs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Live_inputs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.account", c.__id, "live_inputs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.live_inputs()
	})
}

func (c *mqlCloudflareAccount) GetVideos() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Videos, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.account", c.__id, "videos")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.videos()
	})
}

// mqlCloudflareAccountSettings for the cloudflare.account.settings resource
type mqlCloudflareAccountSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareAccountSettingsInternal it will be used here
	Enforce_two_factor plugin.TValue[bool]
}

// createCloudflareAccountSettings creates a new instance of this resource
func createCloudflareAccountSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareAccountSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.account.settings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareAccountSettings) MqlName() string {
	return "cloudflare.account.settings"
}

func (c *mqlCloudflareAccountSettings) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareAccountSettings) GetEnforce_two_factor() *plugin.TValue[bool] {
	return &c.Enforce_two_factor
}

// mqlCloudflareStreams for the cloudflare.streams resource
type mqlCloudflareStreams struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareStreamsInternal it will be used here
}

// createCloudflareStreams creates a new instance of this resource
func createCloudflareStreams(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareStreams{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.streams", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareStreams) MqlName() string {
	return "cloudflare.streams"
}

func (c *mqlCloudflareStreams) MqlID() string {
	return c.__id
}

// mqlCloudflareStreamsLive_input for the cloudflare.streams.live_input resource
type mqlCloudflareStreamsLive_input struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareStreamsLive_inputInternal it will be used here
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	Delete_recording_after_days plugin.TValue[int64]
}

// createCloudflareStreamsLive_input creates a new instance of this resource
func createCloudflareStreamsLive_input(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareStreamsLive_input{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.streams.live_input", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareStreamsLive_input) MqlName() string {
	return "cloudflare.streams.live_input"
}

func (c *mqlCloudflareStreamsLive_input) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareStreamsLive_input) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareStreamsLive_input) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlCloudflareStreamsLive_input) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareStreamsLive_input) GetDelete_recording_after_days() *plugin.TValue[int64] {
	return &c.Delete_recording_after_days
}

// mqlCloudflareStreamsVideo for the cloudflare.streams.video resource
type mqlCloudflareStreamsVideo struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareStreamsVideoInternal it will be used here
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	Creator plugin.TValue[string]
	Duration plugin.TValue[float64]
	Height plugin.TValue[int64]
	Width plugin.TValue[int64]
	Live_input plugin.TValue[string]
	Dash plugin.TValue[string]
	Hls plugin.TValue[string]
	Preview plugin.TValue[string]
	Ready plugin.TValue[bool]
	Require_signed_urls plugin.TValue[bool]
	Scheduled_deletion plugin.TValue[*time.Time]
	Size plugin.TValue[int64]
	Thumbnail plugin.TValue[string]
	Thumbnail_timestamp_pct plugin.TValue[float64]
	Uploaded plugin.TValue[*time.Time]
}

// createCloudflareStreamsVideo creates a new instance of this resource
func createCloudflareStreamsVideo(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareStreamsVideo{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.streams.video", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareStreamsVideo) MqlName() string {
	return "cloudflare.streams.video"
}

func (c *mqlCloudflareStreamsVideo) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareStreamsVideo) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareStreamsVideo) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlCloudflareStreamsVideo) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareStreamsVideo) GetCreator() *plugin.TValue[string] {
	return &c.Creator
}

func (c *mqlCloudflareStreamsVideo) GetDuration() *plugin.TValue[float64] {
	return &c.Duration
}

func (c *mqlCloudflareStreamsVideo) GetHeight() *plugin.TValue[int64] {
	return &c.Height
}

func (c *mqlCloudflareStreamsVideo) GetWidth() *plugin.TValue[int64] {
	return &c.Width
}

func (c *mqlCloudflareStreamsVideo) GetLive_input() *plugin.TValue[string] {
	return &c.Live_input
}

func (c *mqlCloudflareStreamsVideo) GetDash() *plugin.TValue[string] {
	return &c.Dash
}

func (c *mqlCloudflareStreamsVideo) GetHls() *plugin.TValue[string] {
	return &c.Hls
}

func (c *mqlCloudflareStreamsVideo) GetPreview() *plugin.TValue[string] {
	return &c.Preview
}

func (c *mqlCloudflareStreamsVideo) GetReady() *plugin.TValue[bool] {
	return &c.Ready
}

func (c *mqlCloudflareStreamsVideo) GetRequire_signed_urls() *plugin.TValue[bool] {
	return &c.Require_signed_urls
}

func (c *mqlCloudflareStreamsVideo) GetScheduled_deletion() *plugin.TValue[*time.Time] {
	return &c.Scheduled_deletion
}

func (c *mqlCloudflareStreamsVideo) GetSize() *plugin.TValue[int64] {
	return &c.Size
}

func (c *mqlCloudflareStreamsVideo) GetThumbnail() *plugin.TValue[string] {
	return &c.Thumbnail
}

func (c *mqlCloudflareStreamsVideo) GetThumbnail_timestamp_pct() *plugin.TValue[float64] {
	return &c.Thumbnail_timestamp_pct
}

func (c *mqlCloudflareStreamsVideo) GetUploaded() *plugin.TValue[*time.Time] {
	return &c.Uploaded
}

// mqlCloudflareR2 for the cloudflare.r2 resource
type mqlCloudflareR2 struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlCloudflareR2Internal
	Buckets plugin.TValue[[]interface{}]
}

// createCloudflareR2 creates a new instance of this resource
func createCloudflareR2(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareR2{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.r2", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareR2) MqlName() string {
	return "cloudflare.r2"
}

func (c *mqlCloudflareR2) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareR2) GetBuckets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Buckets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.r2", c.__id, "buckets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.buckets()
	})
}

// mqlCloudflareR2Bucket for the cloudflare.r2.bucket resource
type mqlCloudflareR2Bucket struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareR2BucketInternal it will be used here
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Created_on plugin.TValue[*time.Time]
}

// createCloudflareR2Bucket creates a new instance of this resource
func createCloudflareR2Bucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareR2Bucket{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.r2.bucket", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareR2Bucket) MqlName() string {
	return "cloudflare.r2.bucket"
}

func (c *mqlCloudflareR2Bucket) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareR2Bucket) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlCloudflareR2Bucket) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlCloudflareR2Bucket) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

// mqlCloudflareWorkers for the cloudflare.workers resource
type mqlCloudflareWorkers struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlCloudflareWorkersInternal
	Workers plugin.TValue[[]interface{}]
	Pages plugin.TValue[[]interface{}]
}

// createCloudflareWorkers creates a new instance of this resource
func createCloudflareWorkers(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareWorkers{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.workers", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareWorkers) MqlName() string {
	return "cloudflare.workers"
}

func (c *mqlCloudflareWorkers) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareWorkers) GetWorkers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Workers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.workers", c.__id, "workers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.workers()
	})
}

func (c *mqlCloudflareWorkers) GetPages() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Pages, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("cloudflare.workers", c.__id, "pages")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.pages()
	})
}

// mqlCloudflareWorkersWorker for the cloudflare.workers.worker resource
type mqlCloudflareWorkersWorker struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareWorkersWorkerInternal it will be used here
	Id plugin.TValue[string]
	Etag plugin.TValue[string]
	Size plugin.TValue[int64]
	Deployment_id plugin.TValue[string]
	Pipeline_hash plugin.TValue[string]
	Placement_mode plugin.TValue[string]
	Last_deployed_from plugin.TValue[string]
	Log_push plugin.TValue[bool]
	Created_on plugin.TValue[*time.Time]
	Modified_on plugin.TValue[*time.Time]
}

// createCloudflareWorkersWorker creates a new instance of this resource
func createCloudflareWorkersWorker(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareWorkersWorker{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.workers.worker", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareWorkersWorker) MqlName() string {
	return "cloudflare.workers.worker"
}

func (c *mqlCloudflareWorkersWorker) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareWorkersWorker) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareWorkersWorker) GetEtag() *plugin.TValue[string] {
	return &c.Etag
}

func (c *mqlCloudflareWorkersWorker) GetSize() *plugin.TValue[int64] {
	return &c.Size
}

func (c *mqlCloudflareWorkersWorker) GetDeployment_id() *plugin.TValue[string] {
	return &c.Deployment_id
}

func (c *mqlCloudflareWorkersWorker) GetPipeline_hash() *plugin.TValue[string] {
	return &c.Pipeline_hash
}

func (c *mqlCloudflareWorkersWorker) GetPlacement_mode() *plugin.TValue[string] {
	return &c.Placement_mode
}

func (c *mqlCloudflareWorkersWorker) GetLast_deployed_from() *plugin.TValue[string] {
	return &c.Last_deployed_from
}

func (c *mqlCloudflareWorkersWorker) GetLog_push() *plugin.TValue[bool] {
	return &c.Log_push
}

func (c *mqlCloudflareWorkersWorker) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

func (c *mqlCloudflareWorkersWorker) GetModified_on() *plugin.TValue[*time.Time] {
	return &c.Modified_on
}

// mqlCloudflareWorkersPage for the cloudflare.workers.page resource
type mqlCloudflareWorkersPage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlCloudflareWorkersPageInternal it will be used here
	Id plugin.TValue[string]
	Short_id plugin.TValue[string]
	Project_id plugin.TValue[string]
	Project_name plugin.TValue[string]
	Environment plugin.TValue[string]
	Url plugin.TValue[string]
	Aliases plugin.TValue[[]interface{}]
	Production_branch plugin.TValue[string]
	Created_on plugin.TValue[*time.Time]
	Modified_on plugin.TValue[*time.Time]
}

// createCloudflareWorkersPage creates a new instance of this resource
func createCloudflareWorkersPage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlCloudflareWorkersPage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("cloudflare.workers.page", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlCloudflareWorkersPage) MqlName() string {
	return "cloudflare.workers.page"
}

func (c *mqlCloudflareWorkersPage) MqlID() string {
	return c.__id
}

func (c *mqlCloudflareWorkersPage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlCloudflareWorkersPage) GetShort_id() *plugin.TValue[string] {
	return &c.Short_id
}

func (c *mqlCloudflareWorkersPage) GetProject_id() *plugin.TValue[string] {
	return &c.Project_id
}

func (c *mqlCloudflareWorkersPage) GetProject_name() *plugin.TValue[string] {
	return &c.Project_name
}

func (c *mqlCloudflareWorkersPage) GetEnvironment() *plugin.TValue[string] {
	return &c.Environment
}

func (c *mqlCloudflareWorkersPage) GetUrl() *plugin.TValue[string] {
	return &c.Url
}

func (c *mqlCloudflareWorkersPage) GetAliases() *plugin.TValue[[]interface{}] {
	return &c.Aliases
}

func (c *mqlCloudflareWorkersPage) GetProduction_branch() *plugin.TValue[string] {
	return &c.Production_branch
}

func (c *mqlCloudflareWorkersPage) GetCreated_on() *plugin.TValue[*time.Time] {
	return &c.Created_on
}

func (c *mqlCloudflareWorkersPage) GetModified_on() *plugin.TValue[*time.Time] {
	return &c.Modified_on
}
