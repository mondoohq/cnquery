// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"tailscale": {
			Init: initTailscale,
			Create: createTailscale,
		},
		"tailscale.device": {
			Init: initTailscaleDevice,
			Create: createTailscaleDevice,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"tailscale.tailnet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscale).GetTailnet()).ToDataRes(types.String)
	},
	"tailscale.devices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscale).GetDevices()).ToDataRes(types.Array(types.Resource("tailscale.device")))
	},
	"tailscale.device.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetId()).ToDataRes(types.String)
	},
	"tailscale.device.hostname": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetHostname()).ToDataRes(types.String)
	},
	"tailscale.device.os": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetOs()).ToDataRes(types.String)
	},
	"tailscale.device.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetName()).ToDataRes(types.String)
	},
	"tailscale.device.user": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetUser()).ToDataRes(types.String)
	},
	"tailscale.device.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetTags()).ToDataRes(types.Array(types.String))
	},
	"tailscale.device.addresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetAddresses()).ToDataRes(types.Array(types.String))
	},
	"tailscale.device.clientVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetClientVersion()).ToDataRes(types.String)
	},
	"tailscale.device.machineKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetMachineKey()).ToDataRes(types.String)
	},
	"tailscale.device.nodeKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetNodeKey()).ToDataRes(types.String)
	},
	"tailscale.device.tailnetLockError": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetTailnetLockError()).ToDataRes(types.String)
	},
	"tailscale.device.tailnetLockKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetTailnetLockKey()).ToDataRes(types.String)
	},
	"tailscale.device.blocksIncomingConnections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetBlocksIncomingConnections()).ToDataRes(types.Bool)
	},
	"tailscale.device.authorized": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetAuthorized()).ToDataRes(types.Bool)
	},
	"tailscale.device.isExternal": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetIsExternal()).ToDataRes(types.Bool)
	},
	"tailscale.device.keyExpiryDisabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetKeyExpiryDisabled()).ToDataRes(types.Bool)
	},
	"tailscale.device.updateAvailable": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetUpdateAvailable()).ToDataRes(types.Bool)
	},
	"tailscale.device.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetCreated()).ToDataRes(types.Time)
	},
	"tailscale.device.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetExpires()).ToDataRes(types.Time)
	},
	"tailscale.device.lastSeen": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTailscaleDevice).GetLastSeen()).ToDataRes(types.Time)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"tailscale.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTailscale).__id, ok = v.Value.(string)
			return
		},
	"tailscale.devices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscale).Devices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"tailscale.device.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTailscaleDevice).__id, ok = v.Value.(string)
			return
		},
	"tailscale.device.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.hostname": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Hostname, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.os": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Os, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.user": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).User, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"tailscale.device.addresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Addresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"tailscale.device.clientVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).ClientVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.machineKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).MachineKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.nodeKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).NodeKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.tailnetLockError": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).TailnetLockError, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.tailnetLockKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).TailnetLockKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"tailscale.device.blocksIncomingConnections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).BlocksIncomingConnections, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"tailscale.device.authorized": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Authorized, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"tailscale.device.isExternal": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).IsExternal, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"tailscale.device.keyExpiryDisabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).KeyExpiryDisabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"tailscale.device.updateAvailable": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).UpdateAvailable, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"tailscale.device.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"tailscale.device.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"tailscale.device.lastSeen": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTailscaleDevice).LastSeen, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[tailscale] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[tailscale] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlTailscale for the tailscale resource
type mqlTailscale struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTailscaleInternal it will be used here
	Tailnet plugin.TValue[string]
	Devices plugin.TValue[[]interface{}]
}

// createTailscale creates a new instance of this resource
func createTailscale(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTailscale{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("tailscale", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTailscale) MqlName() string {
	return "tailscale"
}

func (c *mqlTailscale) MqlID() string {
	return c.__id
}

func (c *mqlTailscale) GetTailnet() *plugin.TValue[string] {
	return &c.Tailnet
}

func (c *mqlTailscale) GetDevices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Devices, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("tailscale", c.__id, "devices")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.devices()
	})
}

// mqlTailscaleDevice for the tailscale.device resource
type mqlTailscaleDevice struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTailscaleDeviceInternal it will be used here
	Id plugin.TValue[string]
	Hostname plugin.TValue[string]
	Os plugin.TValue[string]
	Name plugin.TValue[string]
	User plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	Addresses plugin.TValue[[]interface{}]
	ClientVersion plugin.TValue[string]
	MachineKey plugin.TValue[string]
	NodeKey plugin.TValue[string]
	TailnetLockError plugin.TValue[string]
	TailnetLockKey plugin.TValue[string]
	BlocksIncomingConnections plugin.TValue[bool]
	Authorized plugin.TValue[bool]
	IsExternal plugin.TValue[bool]
	KeyExpiryDisabled plugin.TValue[bool]
	UpdateAvailable plugin.TValue[bool]
	Created plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	LastSeen plugin.TValue[*time.Time]
}

// createTailscaleDevice creates a new instance of this resource
func createTailscaleDevice(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTailscaleDevice{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("tailscale.device", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTailscaleDevice) MqlName() string {
	return "tailscale.device"
}

func (c *mqlTailscaleDevice) MqlID() string {
	return c.__id
}

func (c *mqlTailscaleDevice) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlTailscaleDevice) GetHostname() *plugin.TValue[string] {
	return &c.Hostname
}

func (c *mqlTailscaleDevice) GetOs() *plugin.TValue[string] {
	return &c.Os
}

func (c *mqlTailscaleDevice) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlTailscaleDevice) GetUser() *plugin.TValue[string] {
	return &c.User
}

func (c *mqlTailscaleDevice) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlTailscaleDevice) GetAddresses() *plugin.TValue[[]interface{}] {
	return &c.Addresses
}

func (c *mqlTailscaleDevice) GetClientVersion() *plugin.TValue[string] {
	return &c.ClientVersion
}

func (c *mqlTailscaleDevice) GetMachineKey() *plugin.TValue[string] {
	return &c.MachineKey
}

func (c *mqlTailscaleDevice) GetNodeKey() *plugin.TValue[string] {
	return &c.NodeKey
}

func (c *mqlTailscaleDevice) GetTailnetLockError() *plugin.TValue[string] {
	return &c.TailnetLockError
}

func (c *mqlTailscaleDevice) GetTailnetLockKey() *plugin.TValue[string] {
	return &c.TailnetLockKey
}

func (c *mqlTailscaleDevice) GetBlocksIncomingConnections() *plugin.TValue[bool] {
	return &c.BlocksIncomingConnections
}

func (c *mqlTailscaleDevice) GetAuthorized() *plugin.TValue[bool] {
	return &c.Authorized
}

func (c *mqlTailscaleDevice) GetIsExternal() *plugin.TValue[bool] {
	return &c.IsExternal
}

func (c *mqlTailscaleDevice) GetKeyExpiryDisabled() *plugin.TValue[bool] {
	return &c.KeyExpiryDisabled
}

func (c *mqlTailscaleDevice) GetUpdateAvailable() *plugin.TValue[bool] {
	return &c.UpdateAvailable
}

func (c *mqlTailscaleDevice) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlTailscaleDevice) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlTailscaleDevice) GetLastSeen() *plugin.TValue[*time.Time] {
	return &c.LastSeen
}
